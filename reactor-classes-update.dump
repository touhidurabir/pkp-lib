
236 files with changes
======================

1) classes/components/forms/FormComponent.inc.php:103

    ---------- begin diff ----------
@@ @@
      */
     public function removeField($fieldName)
     {
-        $this->fields = array_values(array_filter($this->fields, function ($field) use ($fieldName) {
-            return $field->name !== $fieldName;
-        }));
+        $this->fields = array_values(array_filter($this->fields, fn($field) => $field->name !== $fieldName));
         return $this;
     }

@@ @@
      */
     public function removeGroup($groupId)
     {
-        $this->groups = array_filter($this->groups, function ($group) use ($groupId) {
-            return $group['id'] !== $groupId;
-        });
-        $this->fields = array_filter($this->fields, function ($field) use ($groupId) {
-            return $field['groupId'] !== $groupId;
-        });
+        $this->groups = array_filter($this->groups, fn($group) => $group['id'] !== $groupId);
+        $this->fields = array_filter($this->fields, fn($field) => $field['groupId'] !== $groupId);
         return $this;
     }

@@ @@
      */
     public function removePage($pageId)
     {
-        $this->pages = array_filter($this->pages, function ($page) use ($pageId) {
-            return $page['id'] !== $pageId;
-        });
+        $this->pages = array_filter($this->pages, fn($page) => $page['id'] !== $pageId);
         foreach ($this->groups as $group) {
             if ($group['pageId'] === $pageId) {
                 $this->removeGroup($group['id']);
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


2) classes/components/forms/statistics/users/ReportForm.inc.php:38

    ---------- begin diff ----------
@@ @@
             'groupId' => 'default',
             'label' => __('user.group'),
             'description' => __('manager.export.usersToCsv.description'),
-            'options' => array_map(function ($userGroup) {
-                return [
-                    'value' => $userGroup->getId(),
-                    'label' => $userGroup->getLocalizedName()
-                ];
-            }, $userGroups),
-            'default' => array_map(function ($userGroup) {
-                return $userGroup->getId();
-            }, $userGroups)
+            'options' => array_map(fn($userGroup) => [
+                'value' => $userGroup->getId(),
+                'label' => $userGroup->getLocalizedName()
+            ], $userGroups),
+            'default' => array_map(fn($userGroup) => $userGroup->getId(), $userGroups)
         ]));
     }
 }
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


3) classes/components/forms/publication/PKPContributorForm.inc.php:67

    ---------- begin diff ----------
@@ @@
                 'label' => $country->getLocalName()
             ];
         }
-        usort($countries, function ($a, $b) {
-            return strcmp($a['label'], $b['label']);
-        });
+        usort($countries, fn($a, $b) => strcmp($a['label'], $b['label']));

         $this->addField(new FieldText('givenName', [
             'label' => __('user.givenName'),
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


4) classes/components/forms/context/PKPThemeForm.inc.php:127

    ---------- begin diff ----------
@@ @@
     public function getConfig()
     {
         // Add the active theme's option fields to the fields array
-        $activeThemeField = array_filter($this->fields, function ($field) {
-            return $field->name === 'themePluginPath';
-        });
+        $activeThemeField = array_filter($this->fields, fn($field) => $field->name === 'themePluginPath');
         $activeTheme = $activeThemeField[0]->value;
         if (!empty($this->themeFields[$activeTheme])) {
             $this->fields = array_merge($this->fields, $this->themeFields[$activeTheme]);
@@ @@
             }, $this->fields);
         }
         $defaultGroupId = $this->groups[0]['id'];
-        $config['themeFields'] = array_map(function ($themeOptions) use ($defaultGroupId) {
-            return array_map(function ($themeOption) use ($defaultGroupId) {
-                $field = $this->getFieldConfig($themeOption);
-                $field['groupId'] = $defaultGroupId;
-                return $field;
-            }, $themeOptions);
-        }, $this->themeFields);
+        $config['themeFields'] = array_map(fn($themeOptions) => array_map(function ($themeOption) use ($defaultGroupId) {
+            $field = $this->getFieldConfig($themeOption);
+            $field['groupId'] = $defaultGroupId;
+            return $field;
+        }, $themeOptions), $this->themeFields);

         return $config;
     }
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


5) classes/log/EventLogDAO.inc.php:211

    ---------- begin diff ----------
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('event_log', 'log_id');
+        return $this->_getInsertId();
     }
 }
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


6) classes/log/EmailLogEntry.inc.php:137

    ---------- begin diff ----------
@@ @@
             $senderFullName = Repo::user()->get($this->getSenderId(), true)->getFullName();
         }

-        return ($senderFullName ? $senderFullName : '');
+        return ($senderFullName ?: '');
     }

     /**
@@ @@
             $senderEmail = Repo::user()->get($this->getSenderId(), true)->getEmail();
         }

-        return ($senderEmail ? $senderEmail : '');
+        return ($senderEmail ?: '');
     }
    ----------- end diff -----------

Applied rules:
 * TernaryToElvisRector (http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary https://stackoverflow.com/a/1993455/1348344)


7) classes/log/EmailLogDAO.inc.php:229

    ---------- begin diff ----------
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('email_log', 'log_id');
+        return $this->_getInsertId();
     }
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)
 * RegexDashEscapeRector (https://3v4l.org/dRG8U)


8) classes/components/forms/context/PKPMetadataSettingsForm.inc.php:49

    ---------- begin diff ----------
@@ @@
                 ['value' => Context::METADATA_REQUEST, 'label' => __('manager.setup.metadata.coverage.request')],
                 ['value' => Context::METADATA_REQUIRE, 'label' => __('manager.setup.metadata.coverage.require')],
             ],
-            'value' => $context->getData('coverage') ? $context->getData('coverage') : Context::METADATA_DISABLE,
+            'value' => $context->getData('coverage') ?: Context::METADATA_DISABLE,
         ]))
             ->addField(new FieldMetadataSetting('languages', [
                 'label' => __('common.languages'),
@@ @@
                     ['value' => Context::METADATA_REQUEST, 'label' => __('manager.setup.metadata.languages.request')],
                     ['value' => Context::METADATA_REQUIRE, 'label' => __('manager.setup.metadata.languages.require')],
                 ],
-                'value' => $context->getData('languages') ? $context->getData('languages') : Context::METADATA_DISABLE,
+                'value' => $context->getData('languages') ?: Context::METADATA_DISABLE,
             ]))
             ->addField(new FieldMetadataSetting('rights', [
                 'label' => __('submission.rights'),
@@ @@
                     ['value' => Context::METADATA_REQUEST, 'label' => __('manager.setup.metadata.rights.request')],
                     ['value' => Context::METADATA_REQUIRE, 'label' => __('manager.setup.metadata.rights.require')],
                 ],
-                'value' => $context->getData('rights') ? $context->getData('rights') : Context::METADATA_DISABLE,
+                'value' => $context->getData('rights') ?: Context::METADATA_DISABLE,
             ]))
             ->addField(new FieldMetadataSetting('source', [
                 'label' => __('submission.source'),
@@ @@
                     ['value' => Context::METADATA_REQUEST, 'label' => __('manager.setup.metadata.source.request')],
                     ['value' => Context::METADATA_REQUIRE, 'label' => __('manager.setup.metadata.source.require')],
                 ],
-                'value' => $context->getData('source') ? $context->getData('source') : Context::METADATA_DISABLE,
+                'value' => $context->getData('source') ?: Context::METADATA_DISABLE,
             ]))
             ->addField(new FieldMetadataSetting('subjects', [
                 'label' => __('common.subjects'),
@@ @@
                     ['value' => Context::METADATA_REQUEST, 'label' => __('manager.setup.metadata.subjects.request')],
                     ['value' => Context::METADATA_REQUIRE, 'label' => __('manager.setup.metadata.subjects.require')],
                 ],
-                'value' => $context->getData('subjects') ? $context->getData('subjects') : Context::METADATA_DISABLE,
+                'value' => $context->getData('subjects') ?: Context::METADATA_DISABLE,
             ]))
             ->addField(new FieldMetadataSetting('type', [
                 'label' => __('common.type'),
@@ @@
                     ['value' => Context::METADATA_REQUEST, 'label' => __('manager.setup.metadata.type.request')],
                     ['value' => Context::METADATA_REQUIRE, 'label' => __('manager.setup.metadata.type.require')],
                 ],
-                'value' => $context->getData('type') ? $context->getData('type') : Context::METADATA_DISABLE,
+                'value' => $context->getData('type') ?: Context::METADATA_DISABLE,
             ]))
             ->addField(new FieldMetadataSetting('disciplines', [
                 'label' => __('search.discipline'),
@@ @@
                     ['value' => Context::METADATA_REQUEST, 'label' => __('manager.setup.metadata.disciplines.request')],
                     ['value' => Context::METADATA_REQUIRE, 'label' => __('manager.setup.metadata.disciplines.require')],
                 ],
-                'value' => $context->getData('disciplines') ? $context->getData('disciplines') : Context::METADATA_DISABLE,
+                'value' => $context->getData('disciplines') ?: Context::METADATA_DISABLE,
             ]))
             ->addField(new FieldMetadataSetting('keywords', [
                 'label' => __('common.keywords'),
@@ @@
                     ['value' => Context::METADATA_REQUEST, 'label' => __('manager.setup.metadata.keywords.request')],
                     ['value' => Context::METADATA_REQUIRE, 'label' => __('manager.setup.metadata.keywords.require')],
                 ],
-                'value' => $context->getData('keywords') ? $context->getData('keywords') : Context::METADATA_DISABLE,
+                'value' => $context->getData('keywords') ?: Context::METADATA_DISABLE,
             ]))
             ->addField(new FieldMetadataSetting('agencies', [
                 'label' => __('submission.supportingAgencies'),
@@ @@
                     ['value' => Context::METADATA_REQUEST, 'label' => __('manager.setup.metadata.agencies.request')],
                     ['value' => Context::METADATA_REQUIRE, 'label' => __('manager.setup.metadata.agencies.require')],
                 ],
-                'value' => $context->getData('agencies') ? $context->getData('agencies') : Context::METADATA_DISABLE,
+                'value' => $context->getData('agencies') ?: Context::METADATA_DISABLE,
             ]))
             ->addField(new FieldMetadataSetting('citations', [
                 'label' => __('submission.citations'),
@@ @@
                     ['value' => Context::METADATA_REQUEST, 'label' => __('manager.setup.metadata.citations.request')],
                     ['value' => Context::METADATA_REQUIRE, 'label' => __('manager.setup.metadata.citations.require')],
                 ],
-                'value' => $context->getData('citations') ? $context->getData('citations') : Context::METADATA_DISABLE,
+                'value' => $context->getData('citations') ?: Context::METADATA_DISABLE,
             ]));
     }
 }
    ----------- end diff -----------

Applied rules:
 * TernaryToElvisRector (http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary https://stackoverflow.com/a/1993455/1348344)


9) classes/components/forms/context/PKPMastheadForm.inc.php:49

    ---------- begin diff ----------
@@ @@
                 'label' => $country->getLocalName()
             ];
         }
-        usort($countries, function ($a, $b) {
-            return strcmp($a['label'], $b['label']);
-        });
+        usort($countries, fn($a, $b) => strcmp($a['label'], $b['label']));

         $this->addGroup([
             'id' => 'identity',
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


10) classes/components/forms/context/PKPDoiSetupSettingsForm.inc.php:98

    ---------- begin diff ----------
@@ @@
                         'label' => __('doi.manager.settings.doiCreationTime.never')
                     ]
                 ],
-                'value' => $context->getData(Context::SETTING_DOI_CREATION_TIME) ? $context->getData(Context::SETTING_DOI_CREATION_TIME) : Repo::doi()::CREATION_TIME_COPYEDIT,
+                'value' => $context->getData(Context::SETTING_DOI_CREATION_TIME) ?: Repo::doi()::CREATION_TIME_COPYEDIT,
             ]))
             ->addField(new FieldOptions(Context::SETTING_DOI_SUFFIX_TYPE, [
                 'label' => __('doi.manager.settings.doiSuffix'),
@@ @@
                         'label' => __('doi.manager.settings.doiSuffixUserDefined')
                     ],
                 ],
-                'value' => $context->getData(Context::SETTING_DOI_SUFFIX_TYPE) ? $context->getData(Context::SETTING_DOI_SUFFIX_TYPE) : Repo::doi()::SUFFIX_DEFAULT,
+                'value' => $context->getData(Context::SETTING_DOI_SUFFIX_TYPE) ?: Repo::doi()::SUFFIX_DEFAULT,
                 'type' => 'radio',
             ]))
             ->addField(new FieldText(Repo::doi()::CUSTOM_PUBLICATION_PATTERN, [
    ----------- end diff -----------

Applied rules:
 * TernaryToElvisRector (http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary https://stackoverflow.com/a/1993455/1348344)


11) classes/components/forms/context/PKPContextForm.inc.php:52

    ---------- begin diff ----------
@@ @@
             ];
         }

-        usort($countries, function ($a, $b) {
-            return strcmp($a['label'], $b['label']);
-        });
+        usort($countries, fn($a, $b) => strcmp($a['label'], $b['label']));

         $this->addField(new FieldText('name', [
             'label' => __('manager.setup.contextTitle'),
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


12) classes/components/forms/context/PKPAppearanceSetupForm.inc.php:69

    ---------- begin diff ----------
@@ @@
             }
         }

-        $sidebarOptions = array_merge($enabledOptions, $disabledOptions);
+        $sidebarOptions = [...$enabledOptions, ...$disabledOptions];

         $this->addField(new FieldUploadImage('pageHeaderLogoImage', [
             'label' => __('manager.setup.logo'),
    ----------- end diff -----------

Applied rules:
 * ArraySpreadInsteadOfArrayMergeRector (https://wiki.php.net/rfc/spread_operator_for_array)


13) classes/mail/mailables/DecisionSendExternalReviewNotifyAuthor.inc.php:53

    ---------- begin diff ----------
@@ @@

     protected function setupReviewTypeVariable(Context $context)
     {
-        switch ($context->getData('defaultReviewMode')) {
-            case ReviewAssignment::SUBMISSION_REVIEW_METHOD_ANONYMOUS:
-                $description = __('emailTemplate.variable.reviewType.anonymous');
-                break;
-            case ReviewAssignment::SUBMISSION_REVIEW_METHOD_OPEN:
-                $description = __('emailTemplate.variable.reviewType.open');
-                break;
-            default:
-                $description = __('emailTemplate.variable.reviewType.doubleAnonymous');
-        }
+        $description = match ($context->getData('defaultReviewMode')) {
+            ReviewAssignment::SUBMISSION_REVIEW_METHOD_ANONYMOUS => __('emailTemplate.variable.reviewType.anonymous'),
+            ReviewAssignment::SUBMISSION_REVIEW_METHOD_OPEN => __('emailTemplate.variable.reviewType.open'),
+            default => __('emailTemplate.variable.reviewType.doubleAnonymous'),
+        };

         $this->addData([
             static::REVIEW_TYPE_DESCRIPTION_VARIABLE => $description,
    ----------- end diff -----------

Applied rules:
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


14) classes/decision/maps/Schema.inc.php:40

    ---------- begin diff ----------
@@ @@
     public function mapMany(Enumerable $collection): Enumerable
     {
         $this->collection = $collection;
-        return $collection->map(function ($item) {
-            return $this->map($item);
-        });
+        return $collection->map(fn($item) => $this->map($item));
     }

     /**
@@ @@
     {
         $output = [];
         foreach ($props as $prop) {
-            switch ($prop) {
-                case '_href':
-                    $output[$prop] = $this->getApiUrl('submissions/' . (int) $item->getData('submissionId') . '/decisions/' . (int) $item->getId());
-                    break;
-                default:
-                    $output[$prop] = $item->getData($prop);
-                    break;
-            }
+            $output[$prop] = match ($prop) {
+                '_href' => $this->getApiUrl('submissions/' . (int) $item->getData('submissionId') . '/decisions/' . (int) $item->getId()),
+                default => $item->getData($prop),
+            };
         }

         ksort($output);
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


15) classes/components/forms/Field.inc.php:62

    ---------- begin diff ----------
@@ @@
     public $showWhen;

     /** @var array List of required properties for this field. */
-    private $_requiredProperties = ['name', 'component'];
+    private array $_requiredProperties = ['name', 'component'];

     /**
      * Initialize the form field
    ----------- end diff -----------

Applied rules:
 * TypedPropertyRector (https://wiki.php.net/rfc/typed_properties_v2#proposal)


16) classes/cliTool/UpgradeTool.inc.php:92

    ---------- begin diff ----------
@@ @@
         $installer->setLogger($this);

         if ($installer->execute()) {
-            if (count($installer->getNotes()) > 0) {
+            if ((is_countable($installer->getNotes()) ? count($installer->getNotes()) : 0) > 0) {
                 printf("\nRelease Notes\n");
                 printf("----------------------------------------\n");
                 foreach ($installer->getNotes() as $note) {
    ----------- end diff -----------

Applied rules:
 * CountOnNullRector (https://3v4l.org/Bndc9)


17) classes/cliTool/InstallTool.inc.php:50

    ---------- begin diff ----------
@@ @@
         $installer->setLogger($this);

         if ($installer->execute()) {
-            if (count($installer->getNotes()) > 0) {
+            if ((is_countable($installer->getNotes()) ? count($installer->getNotes()) : 0) > 0) {
                 printf("\nRelease Notes\n");
                 printf("----------------------------------------\n");
                 foreach ($installer->getNotes() as $note) {
    ----------- end diff -----------

Applied rules:
 * CountOnNullRector (https://3v4l.org/Bndc9)
 * RegexDashEscapeRector (https://3v4l.org/dRG8U)


18) classes/cliTool/CommandLineTool.inc.php:96

    ---------- begin diff ----------
@@ @@

         if ($usernameKeyPos) {
             $usernamePos = $usernameKeyPos + 1;
-            if (count($this->argv) >= $usernamePos + 1) {
+            if ((is_countable($this->argv) ? count($this->argv) : 0) >= $usernamePos + 1) {
                 $this->username = $this->argv[$usernamePos];

                 unset($this->argv[$usernamePos]);
@@ @@
             $userGroupDao = DAORegistry::getDAO('UserGroupDAO'); /** @var UserGroupDAO $userGroupDao */
             $adminGroups = $userGroupDao->getUserGroupIdsByRoleId(Role::ROLE_ID_SITE_ADMIN);

-            if (count($adminGroups)) {
+            if (is_countable($adminGroups) ? count($adminGroups) : 0) {
                 $groupUsers = $userGroupDao->getUsersById($adminGroups[0])->toArray();

-                if (count($groupUsers) > 0) {
+                if ((is_countable($groupUsers) ? count($groupUsers) : 0) > 0) {
                     $this->setUser($groupUsers[0]);
                 } else {
                     $this->exitWithUsageMessage();
    ----------- end diff -----------

Applied rules:
 * CountOnNullRector (https://3v4l.org/Bndc9)


19) classes/citation/CitationDAO.inc.php:30

    ---------- begin diff ----------
@@ @@
      */
     public function insertObject($citation)
     {
+        $row = null;
         $seq = $citation->getSequence();
         if (!(is_numeric($seq) && $seq > 0)) {
             // Find the latest sequence number
@@ @@
             ]
         );
         $citation->setId($this->getInsertId());
-        $this->_updateObjectMetadata($citation, false);
+        $this->_updateObjectMetadata($citation);
         return $citation->getId();
     }
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


20) classes/category/Repository.inc.php:125

    ---------- begin diff ----------
@@ @@
         $errors = [];

         if ($validator->fails()) {
-            $errors = $this->schemaService->formatValidationErrors($validator->errors(), $this->schemaService->get($this->dao->schema), $allowedLocales);
+            $errors = $this->schemaService->formatValidationErrors($validator->errors());
         }

         HookRegistry::call('Category::validate', [&$errors, $object, $props, $allowedLocales, $primaryLocale]);
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


21) classes/cache/XCacheCache.inc.php:26

    ---------- begin diff ----------
@@ @@
         $prefix = INDEX_FILE_LOCATION . ':' . $this->getContext() . ':' . $this->getCacheId();
         if (function_exists('xcache_unset_by_prefix')) {
             // If possible, just flush the context
-            xcache_unset_by_prefix(prefix);
+            xcache_unset_by_prefix(\PREFIX);
         } else {
             // Otherwise, we need to do this manually
             for ($i = 0; $i < xcache_count(XC_TYPE_VAR); $i++) {
    ----------- end diff -----------

Applied rules:
 * SensitiveConstantNameRector (https://wiki.php.net/rfc/case_insensitive_constant_deprecation)


22) classes/cache/MemcacheCache.inc.php:37

    ---------- begin diff ----------
@@ @@
     /**
      * Flag (used by Memcache::set)
      */
-    public $flag;
+    public $flag = null;

     /**
      * Expiry (used by Memcache::set)
      */
-    public $expire;
+    public $expire = 3600;

     /**
      * Instantiate a cache.
@@ @@
         // XXX check whether memcached server is usable
         if (!$this->connection->addServer($hostname, $port)) {
             $this->connection = null;
-        }
-
-        $this->flag = null;
-        $this->expire = 3600; // 1 hour default expiry
+        } // 1 hour default expiry
     }

     /**
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector


23) classes/cache/CacheManager.inc.php:54

    ---------- begin diff ----------
@@ @@
             $context,
             $cacheId,
             $fallback,
-            $this->getFileCachePath()
+            static::getFileCachePath()
         );
     }

@@ @@

     public function getCacheImplementation($type)
     {
-        switch ($type) {
-            case CACHE_TYPE_FILE: return 'file';
-            case CACHE_TYPE_OBJECT: return Config::getVar('cache', 'object_cache');
-            default: return null;
-        }
+        return match ($type) {
+            CACHE_TYPE_FILE => 'file',
+            CACHE_TYPE_OBJECT => Config::getVar('cache', 'object_cache'),
+            default => null,
+        };
     }

     /**
@@ @@
                 $junkCache->flush();
                 break;
             case 'file':
-                $filePath = $this->getFileCachePath();
+                $filePath = static::getFileCachePath();
                 $files = glob("$filePath/fc-" . (isset($context) ? $context . '-' : '') . '*.php');
                 foreach ($files as $file) {
                     @unlink($file);
    ----------- end diff -----------

Applied rules:
 * ThisCallOnStaticMethodToStaticCallRector (https://3v4l.org/rkiSC)
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


24) classes/author/maps/Schema.inc.php:64

    ---------- begin diff ----------
@@ @@
     public function mapMany(Enumerable $collection): Enumerable
     {
         $this->collection = $collection;
-        return $collection->map(function ($item) {
-            return $this->map($item);
-        });
+        return $collection->map(fn($item) => $this->map($item));
     }

     /**
@@ @@
     public function summarizeMany(Enumerable $collection): Enumerable
     {
         $this->collection = $collection;
-        return $collection->map(function ($item) {
-            return $this->summarize($item);
-        });
+        return $collection->map(fn($item) => $this->summarize($item));
     }

     /**
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


25) classes/announcement/maps/Schema.inc.php:51

    ---------- begin diff ----------
@@ @@
     public function mapMany(Enumerable $collection): Enumerable
     {
         $this->collection = $collection;
-        return $collection->map(function ($item) {
-            return $this->map($item);
-        });
+        return $collection->map(fn($item) => $this->map($item));
     }

     /**
@@ @@
     public function summarizeMany(Enumerable $collection): Enumerable
     {
         $this->collection = $collection;
-        return $collection->map(function ($item) {
-            return $this->summarize($item);
-        });
+        return $collection->map(fn($item) => $this->summarize($item));
     }

     /**
@@ @@
     {
         $output = [];
         foreach ($props as $prop) {
-            switch ($prop) {
-                case '_href':
-                    $output[$prop] = $this->getApiUrl('announcements/' . $item->getId());
-                    break;
-                case 'url':
-                    $output[$prop] = $this->request->getDispatcher()->url(
-                        $this->request,
-                        PKPApplication::ROUTE_PAGE,
-                        $this->context->getData('urlPath'),
-                        'announcement',
-                        'view',
-                        $item->getId()
-                    );
-                    break;
-                default:
-                    $output[$prop] = $item->getData($prop);
-                    break;
-            }
+            $output[$prop] = match ($prop) {
+                '_href' => $this->getApiUrl('announcements/' . $item->getId()),
+                'url' => $this->request->getDispatcher()->url(
+                    $this->request,
+                    PKPApplication::ROUTE_PAGE,
+                    $this->context->getData('urlPath'),
+                    'announcement',
+                    'view',
+                    $item->getId()
+                ),
+                default => $item->getData($prop),
+            };
         }

         $output = $this->schemaService->addMissingMultilingualValues($this->schema, $output, $this->context->getSupportedFormLocales());
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


26) classes/announcement/AnnouncementTypeDAO.inc.php:203

    ---------- begin diff ----------
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('announcement_types', 'type_id');
+        return $this->_getInsertId();
     }
 }
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


27) classes/context/LibraryFileDAO.inc.php:281

    ---------- begin diff ----------
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('library_files', 'file_id');
+        return $this->_getInsertId();
     }
 }
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


28) classes/context/Context.inc.php:600

    ---------- begin diff ----------
@@ @@
     * @return null|array The selected data as a simple tabular
     *  result set or null if metrics are not supported by this context.
     */
-    public function getMetrics($metricType = null, $columns = [], $filter = [], $orderBy = [], $range = null)
+    public function getMetrics($metricType = null, int|array $columns = [], $filter = [], $orderBy = [], $range = null)
     {
         // Add a context filter and run the report.
         $filter[PKPStatisticsHelper::STATISTICS_DIMENSION_CONTEXT_ID] = $this->getId();
    ----------- end diff -----------

Applied rules:
 * RegexDashEscapeRector (https://3v4l.org/dRG8U)
 * UnionTypesRector


29) classes/config/ConfigParser.inc.php:52

    ---------- begin diff ----------
@@ @@
         while (!feof($fp)) {
             $line = fgets($fp);
             $line = trim($line);
-            if ($line === '' || strpos($line, ';') === 0) {
+            if ($line === '' || str_starts_with($line, ';')) {
                 // Skip empty or commented line
                 continue;
             }
@@ @@
                 if (!isset($configData[$currentSection])) {
                     $configData[$currentSection] = [];
                 }
-            } elseif (strpos($line, '=') !== false) {
+            } elseif (str_contains($line, '=')) {
                 // Found a setting
                 [$key, $value] = explode('=', $line, 2);
                 $key = trim($key);
@@ @@
         $lines = file($file);

         // Parse each line of the configuration file
-        for ($i = 0, $count = count($lines); $i < $count; $i++) {
+        for ($i = 0, $count = is_countable($lines) ? count($lines) : 0; $i < $count; $i++) {
             $line = $lines[$i];

             if (preg_match('/^;/', $line) || preg_match('/^\s*$/', $line)) {
    ----------- end diff -----------

Applied rules:
 * CountOnNullRector (https://3v4l.org/Bndc9)
 * RegexDashEscapeRector (https://3v4l.org/dRG8U)
 * StrStartsWithRector (https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions)
 * StrContainsRector (https://externals.io/message/108562 https://github.com/php/php-src/pull/5179)


30) classes/components/listPanels/PKPSubmissionsListPanel.inc.php:249

    ---------- begin diff ----------
@@ @@
                 $autosuggestField = new FieldAutosuggestPreset('categoryIds', [
                     'label' => __('category.category'),
                     'value' => [],
-                    'options' => array_map(function ($category) {
-                        return [
-                            'value' => (int) $category['id'],
-                            'label' => $category['title'],
-                        ];
-                    }, $categories),
+                    'options' => array_map(fn($category) => [
+                        'value' => (int) $category['id'],
+                        'label' => $category['title'],
+                    ], $categories),
                 ]);
                 return [
                     'filters' => [
@@ @@

             return [
                 'heading' => __('category.category'),
-                'filters' => array_map(function ($category) {
-                    return [
-                        'param' => 'categoryIds',
-                        'value' => (int) $category['id'],
-                        'title' => $category['title'],
-                    ];
-                }, $categories),
+                'filters' => array_map(fn($category) => [
+                    'param' => 'categoryIds',
+                    'value' => (int) $category['id'],
+                    'title' => $category['title'],
+                ], $categories),
             ];
         }
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


31) classes/components/forms/submission/PKPSubmissionFileForm.inc.php:40

    ---------- begin diff ----------
@@ @@
             'label' => __('submission.submit.genre.label'),
             'description' => __('submission.submit.genre.description'),
             'type' => 'radio',
-            'options' => array_map(function ($genre) {
-                return [
-                    'value' => (int) $genre->getId(),
-                    'label' => $genre->getLocalizedName(),
-                ];
-            }, $genres),
+            'options' => array_map(fn($genre) => [
+                'value' => (int) $genre->getId(),
+                'label' => $genre->getLocalizedName(),
+            ], $genres),
             'value' => 0,
         ]));
     }
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


32) classes/observers/listeners/ValidateRegisteredEmail.inc.php:60

    ---------- begin diff ----------
@@ @@

     /**
      * Sends mail depending on a source - context or site registration
-     *
-     * @param UserRegisteredContext|UserRegisteredSite $event
      */
-    protected function manageEmail($event): void
+    protected function manageEmail(\PKP\observers\events\UserRegisteredContext|\PKP\observers\events\UserRegisteredSite $event): void
     {
         if (!$this->emailValidationRequired()) {
             return;
@@ @@
         );

         // Create and compile email template
-        if (get_class($event) === UserRegisteredContext::class) {
+        if ($event::class === UserRegisteredContext::class) {
             $mailable = new ContextMailable($event->context);
             $mailable->from($event->context->getData('supportEmail'), $event->context->getData('supportName'));
             $mailable->addData([
    ----------- end diff -----------

Applied rules:
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)
 * UnionTypesRector


33) classes/observers/listeners/EnvelopeSenderDefault.inc.php:37

    ---------- begin diff ----------
@@ @@
         );
     }

-    /**
-     * @param \PKP\observers\events\MessageSendingContext $event
-     */
     public function handleSenderContext(MessageSendingContext $event)
     {
         $this->defaultEnvelopeSender($event);
     }

-    /**
-     * @param \PKP\observers\events\MessageSendingSite $event
-     */
     public function handleSenderSite(MessageSendingSite $event)
     {
         $this->defaultEnvelopeSender($event);
     }

-    /**
-     * @param MessageSendingContext|MessageSendingSite $event
-     */
-    public function defaultEnvelopeSender($event)
+    public function defaultEnvelopeSender(\PKP\observers\events\MessageSendingContext|\PKP\observers\events\MessageSendingSite $event)
     {
         // Force default site-wide envelope sender if set
         $configDefaultEnvelopeSender = Config::getVar('email', 'default_envelope_sender');
@@ @@
         }

         // Set the sender provided in the context settings
-        if (get_class($event) === MessageSendingContext::class && $sender = $event->context->getData('envelopeSender')) {
+        if ($event::class === MessageSendingContext::class && $sender = $event->context->getData('envelopeSender')) {
             $event->message->setSender($sender);
             return;
         }
    ----------- end diff -----------

Applied rules:
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)
 * UnionTypesRector


34) classes/form/validation/FormValidatorArrayCustom.inc.php:20

    ---------- begin diff ----------
@@ @@
     public $_fields;

     /** @var array Array of field names where an error occurred */
-    public $_errorFields;
+    public $_errorFields = [];

     /** @var bool is the field a multilingual-capable field */
     public $_isLocaleField;
@@ @@
     {
         parent::__construct($form, $field, $type, $message);
         $this->_fields = $fields;
-        $this->_errorFields = [];
         $this->_isLocaleField = $isLocaleField;
         $this->_userFunction = $userFunction;
         $this->_additionalArguments = $additionalArguments;
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector


35) classes/form/validation/FormValidatorArray.inc.php:20

    ---------- begin diff ----------
@@ @@
     public $_fields;

     /** @var array Array of field names where an error occurred */
-    public $_errorFields;
+    public $_errorFields = [];

     /**
      * Constructor.
@@ @@
     {
         parent::__construct($form, $field, $type, $message);
         $this->_fields = $fields;
-        $this->_errorFields = [];
     }
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector


36) classes/form/FormBuilderVocabulary.inc.php:63

    ---------- begin diff ----------
@@ @@
     public $_form;

     /** @var array Styles organized by parameter name */
-    public $_fbvStyles;
+    public $_fbvStyles = [
+        'size' => ['SMALL' => 'SMALL', 'MEDIUM' => 'MEDIUM', 'LARGE' => 'LARGE'],
+        'height' => ['SHORT' => 'SHORT', 'MEDIUM' => 'MEDIUM', 'TALL' => 'TALL']
+    ];

     /**
      * Constructor.
@@ @@
      */
     public function __construct($form = null)
     {
-        $this->_fbvStyles = [
-            'size' => ['SMALL' => 'SMALL', 'MEDIUM' => 'MEDIUM', 'LARGE' => 'LARGE'],
-            'height' => ['SHORT' => 'SHORT', 'MEDIUM' => 'MEDIUM', 'TALL' => 'TALL']
-        ];
     }


@@ @@
      */
     public function _smartyFBVTextInput($params, $smarty)
     {
-        $params['name'] = $params['name'] ?? $params['id'];
+        $params['name'] ??= $params['id'];
         $params['subLabelTranslate'] = isset($params['subLabelTranslate']) ? (bool) $params['subLabelTranslate'] : true;
         $params['uniqId'] = uniqid();

@@ @@
      */
     public function _smartyFBVTextArea($params, $smarty)
     {
-        $params['name'] = $params['name'] ?? $params['id'];
-        $params['rows'] = $params['rows'] ?? 10;
-        $params['cols'] = $params['cols'] ?? 80;
+        $params['name'] ??= $params['id'];
+        $params['rows'] ??= 10;
+        $params['cols'] ??= 80;
         $params['subLabelTranslate'] = isset($params['subLabelTranslate']) ? (bool) $params['subLabelTranslate'] : true;
         $params['uniqId'] = uniqid();

@@ @@
      */
     public function _smartyFBVHiddenInput($params, $smarty)
     {
-        $params['name'] = $params['name'] ?? $params['id'];
+        $params['name'] ??= $params['id'];

         $hiddenInputParams = '';
         $smarty->assign(['FBV_id' => null, 'FBV_value' => null]);
@@ @@
      */
     public function _smartyFBVSelect($params, $smarty)
     {
-        $params['name'] = $params['name'] ?? $params['id'];
-        $params['translate'] = $params['translate'] ?? true;
+        $params['name'] ??= $params['id'];
+        $params['translate'] ??= true;
         $params['subLabelTranslate'] = isset($params['subLabelTranslate']) ? (bool) $params['subLabelTranslate'] : true;

         $selectParams = '';
@@ @@
      */
     public function _smartyFBVCheckboxGroup($params, $smarty)
     {
-        $params['name'] = $params['name'] ?? $params['id'];
+        $params['name'] ??= $params['id'];
         $params['translate'] = isset($params['translate']) ? (bool)$params['translate'] : true;
         $params['subLabelTranslate'] = isset($params['subLabelTranslate']) ? (bool) $params['subLabelTranslate'] : true;
         $checkboxParams = '';
@@ @@
      */
     public function _smartyFBVCheckbox($params, $smarty)
     {
-        $params['name'] = $params['name'] ?? $params['id'];
+        $params['name'] ??= $params['id'];
         $params['translate'] = isset($params['translate']) ? (bool)$params['translate'] : true;

         $checkboxParams = '';
@@ @@
      */
     public function _smartyFBVRadioButton($params, $smarty)
     {
-        $params['name'] = $params['name'] ?? $params['id'];
-        $params['translate'] = $params['translate'] ?? true;
+        $params['name'] ??= $params['id'];
+        $params['translate'] ??= true;

         if (isset($params['label']) && isset($params['content'])) {
             throw new Exception('FBV: radio button cannot have both a content and a label parameter.  Label has precedence.');
@@ @@
      */
     public function _smartyFBVFileInput($params, $smarty)
     {
-        $params['name'] = $params['name'] ?? $params['id'];
-        $params['translate'] = $params['translate'] ?? true;
+        $params['name'] ??= $params['id'];
+        $params['translate'] ??= true;

         $smarty->assign(['FBV_id' => null, 'FBV_label_content' => null, 'FBV_checked' => false, 'FBV_disabled' => false, 'FBV_submit' => null]);
         foreach ($params as $key => $value) {
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector
 * NullCoalescingOperatorRector (https://wiki.php.net/rfc/null_coalesce_equal_operator)


37) classes/form/Form.inc.php:36

    ---------- begin diff ----------
@@ @@
     public $_template;

     /** @var array Associative array containing form data */
-    public $_data;
+    public $_data = [];

     /** @var array Validation checks for this form */
-    public $_checks;
+    public $_checks = [];

     /** @var array Errors occurring in form validation */
-    public $_errors;
+    public $_errors = [];

     /** @var array Array of field names where an error occurred and the associated error message */
-    public $errorsArray;
+    public $errorsArray = [];

     /** @var array Array of field names where an error occurred */
-    public $errorFields;
+    public $errorFields = [];

     /** @var array Array of errors for the form section currently being processed */
-    public $formSectionErrors;
+    public $formSectionErrors = [];

     /** @var array Client-side validation rules */
     public $cssValidation;
@@ @@
         $this->defaultLocale = Locale::getLocale();

         $this->_template = $template;
-        $this->_data = [];
-        $this->_checks = [];
-        $this->_errors = [];
-        $this->errorsArray = [];
-        $this->errorFields = [];
-        $this->formSectionErrors = [];

         if ($callHooks === true) {
             // Call hooks based on the calling entity, assuming
@@ @@
             // this method is only called by a subclass. Results
             // in hook calls named e.g. "papergalleyform::Constructor"
             // Note that class names are always lower case.
-            $classNameParts = explode('\\', get_class($this)); // Separate namespace info from class name
+            $classNameParts = explode('\\', $this::class); // Separate namespace info from class name
             HookRegistry::call(strtolower_codesafe(end($classNameParts)) . '::Constructor', [$this, &$template]);
         }
     }
@@ @@
         // in hook calls named e.g. "papergalleyform::display"
         // Note that class names are always lower case.
         $returner = null;
-        $classNameParts = explode('\\', get_class($this)); // Separate namespace info from class name
+        $classNameParts = explode('\\', $this::class); // Separate namespace info from class name
         if (HookRegistry::call(strtolower_codesafe(end($classNameParts)) . '::display', [$this, &$returner])) {
             return $returner;
         }
@@ @@
      *
      * @param string|array $key If a string, then set a single field. If an associative array, then set many.
      */
-    public function setData($key, $value = null)
+    public function setData(string|array $key, $value = null)
     {
         if (is_array($key)) {
             foreach ($key as $aKey => $aValue) {
@@ @@
         // in hook calls named e.g. "papergalleyform::initData"
         // Note that class and function names are always lower
         // case.
-        $classNameParts = explode('\\', get_class($this)); // Separate namespace info from class name
+        $classNameParts = explode('\\', $this::class); // Separate namespace info from class name
         HookRegistry::call(strtolower_codesafe(end($classNameParts) . '::initData'), [$this]);
     }

@@ @@
             if (!isset($this->errorsArray[$check->getField()]) && !$check->isValid()) {
                 if (method_exists($check, 'getErrorFields') && method_exists($check, 'isArray') && call_user_func([&$check, 'isArray'])) {
                     $errorFields = call_user_func([&$check, 'getErrorFields']);
-                    for ($i = 0, $count = count($errorFields); $i < $count; $i++) {
+                    for ($i = 0, $count = is_countable($errorFields) ? count($errorFields) : 0; $i < $count; $i++) {
                         $this->addError($errorFields[$i], $check->getMessage());
                         $this->errorFields[$errorFields[$i]] = 1;
                     }
@@ @@
             // Note that class and function names are always lower
             // case.
             $value = null;
-            $classNameParts = explode('\\', get_class($this)); // Separate namespace info from class name
+            $classNameParts = explode('\\', $this::class); // Separate namespace info from class name
             if (HookRegistry::call(strtolower_codesafe(end($classNameParts) . '::validate'), [$this, &$value])) {
                 return $value;
             }
@@ @@
         // Note that class and function names are always lower
         // case.
         $returner = null;
-        $classNameParts = explode('\\', get_class($this)); // Separate namespace info from class name
+        $classNameParts = explode('\\', $this::class); // Separate namespace info from class name
         HookRegistry::call(strtolower_codesafe(end($classNameParts) . '::execute'), array_merge([$this], $functionArgs, [&$returner]));
         return $returner;
     }
@@ @@
         // Note that class and function names are always lower
         // case.
         $returner = [];
-        $classNameParts = explode('\\', get_class($this)); // Separate namespace info from class name
+        $classNameParts = explode('\\', $this::class); // Separate namespace info from class name
         HookRegistry::call(strtolower_codesafe(end($classNameParts) . '::getLocaleFieldNames'), [$this, &$returner]);
         return $returner;
     }
@@ @@
         // in hook calls named e.g. "papergalleyform::readUserVars"
         // Note that class and function names are always lower
         // case.
-        $classNameParts = explode('\\', get_class($this)); // Separate namespace info from class name
+        $classNameParts = explode('\\', $this::class); // Separate namespace info from class name
         HookRegistry::call(strtolower_codesafe(end($classNameParts) . '::readUserVars'), [$this, &$vars]);
         $request = Application::get()->getRequest();
         foreach ($vars as $k) {
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector
 * CountOnNullRector (https://3v4l.org/Bndc9)
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)
 * UnionTypesRector


38) classes/filter/PrimitiveTypeDescription.inc.php:40

    ---------- begin diff ----------
@@ @@
     public function parseTypeName($typeName)
     {
         // This should be a primitive type
-        if (!in_array($typeName, $this->_supportedPrimitiveTypes())) {
+        if (!in_array($typeName, static::_supportedPrimitiveTypes())) {
             return false;
         }
    ----------- end diff -----------

Applied rules:
 * ThisCallOnStaticMethodToStaticCallRector (https://3v4l.org/rkiSC)


39) classes/filter/GenericSequencerFilter.inc.php:39

    ---------- begin diff ----------
@@ @@
      */
     public function &process(&$input)
     {
+        $output = null;
         // Iterate over all filters and always feed the
         // output of one filter as input to the next
         // filter.
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)


40) classes/emailTemplate/maps/Schema.inc.php:53

    ---------- begin diff ----------
@@ @@
     public function mapMany(Enumerable $collection): Enumerable
     {
         $this->collection = $collection;
-        return $collection->map(function ($item) {
-            return $this->map($item);
-        });
+        return $collection->map(fn($item) => $this->map($item));
     }

     /**
@@ @@
     public function summarizeMany(Enumerable $collection): Enumerable
     {
         $this->collection = $collection;
-        return $collection->map(function ($item) {
-            return $this->summarize($item);
-        });
+        return $collection->map(fn($item) => $this->summarize($item));
     }

     /**
@@ @@
     {
         $output = [];
         foreach ($props as $prop) {
-            switch ($prop) {
-                case '_href':
-                    $output[$prop] = $this->request->getDispatcher()->url(
-                        $this->request,
-                        PKPApplication::ROUTE_API,
-                        $this->context->getData('urlPath'),
-                        'emailTemplates/' . $item->getData('key')
-                    );
-                    break;
-                default:
-                    $output[$prop] = $item->getData($prop);
-                    break;
-            }
+            $output[$prop] = match ($prop) {
+                '_href' => $this->request->getDispatcher()->url(
+                    $this->request,
+                    PKPApplication::ROUTE_API,
+                    $this->context->getData('urlPath'),
+                    'emailTemplates/' . $item->getData('key')
+                ),
+                default => $item->getData($prop),
+            };
         }

         $output = $this->schemaService->addMissingMultilingualValues($this->schema, $output, $this->context->getSupportedFormLocales());
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


41) classes/emailTemplate/Collector.inc.php:158

    ---------- begin diff ----------
@@ @@
             $this->getDefaultQueryBuilder()->union($this->getCustomQueryBuilder());

         $q
-            ->when(!is_null($this->count), function (Builder $q) {
-                return $q->limit($this->count);
-            })
+            ->when(!is_null($this->count), fn(Builder $q) => $q->limit($this->count))

-            ->when(!is_null($this->count) && !is_null($this->offset), function (Builder $q) {
-                return $q->offset($this->offset);
-            });
+            ->when(!is_null($this->count) && !is_null($this->offset), fn(Builder $q) => $q->offset($this->offset));

         $q->orderBy('email_key');

@@ @@
                 $q->select('et.email_key')->from('email_templates as et');
             })

-            ->when(!is_null($this->keys), function (Builder $q) {
-                return $q->whereIn('email_key', $this->keys);
-            })
+            ->when(!is_null($this->keys), fn(Builder $q) => $q->whereIn('email_key', $this->keys))

             // search phrase
             ->when(!is_null($this->searchPhrase), function (Builder $q) {
@@ @@
                 $words = explode(' ', $this->searchPhrase);
                 $likePattern = DB::raw("CONCAT('%', LOWER(?), '%')");
                 foreach ($words as $word) {
-                    $q->whereIn('etd.email_key', function (Builder $q) use ($word, $likePattern) {
-                        return $q->select('etddata.email_key')
-                            ->from('email_templates_default_data as etddata')
-                            ->orWhere(DB::raw('LOWER(etddata.subject)'), 'LIKE', $likePattern)->addBinding($word)
-                            ->orWhere(DB::raw('LOWER(etddata.body)'), 'LIKE', $likePattern)->addBinding($word)
-                            ->orWhere(DB::raw('LOWER(etddata.description)'), 'LIKE', $likePattern)->addBinding($word)
-                            ->orWhere(DB::raw('LOWER(etddata.email_key)'), 'LIKE', $likePattern)->addBinding($word);
-                    });
+                    $q->whereIn('etd.email_key', fn(Builder $q) => $q->select('etddata.email_key')
+                        ->from('email_templates_default_data as etddata')
+                        ->orWhere(DB::raw('LOWER(etddata.subject)'), 'LIKE', $likePattern)->addBinding($word)
+                        ->orWhere(DB::raw('LOWER(etddata.body)'), 'LIKE', $likePattern)->addBinding($word)
+                        ->orWhere(DB::raw('LOWER(etddata.description)'), 'LIKE', $likePattern)->addBinding($word)
+                        ->orWhere(DB::raw('LOWER(etddata.email_key)'), 'LIKE', $likePattern)->addBinding($word));
                 }
             });

@@ @@
      * the default.
      *
      * @see self::getCompiledQuery()
-     *
-     * @return Builder
      */
     protected function getCustomQueryBuilder(): Builder
     {
@@ @@
             ->addSelect('et.enabled')
             ->addSelect('et.context_id')

-            ->when(!is_null($this->contextId), function (Builder $q) {
-                return $q->where('et.context_id', $this->contextId);
-            })
+            ->when(!is_null($this->contextId), fn(Builder $q) => $q->where('et.context_id', $this->contextId))

-            ->when(!is_null($this->isEnabled), function (Builder $q) {
-                return $q->when($this->isEnabled === true,
-                    function (Builder $q) {
-                        return $q->where('et.enabled', '=', 1);
-                    },
-                    function (Builder $q) {
-                        return $q->where('et.enabled', '!=', 1);
-                    }
-                );
-            })
+            ->when(!is_null($this->isEnabled), fn(Builder $q) => $q->when($this->isEnabled === true,
+                fn(Builder $q) => $q->where('et.enabled', '=', 1),
+                fn(Builder $q) => $q->where('et.enabled', '!=', 1)
+            ))

-            ->when(!is_null($this->keys), function (Builder $q) {
-                return $q->whereIn('et.email_key', $this->keys);
-            })
+            ->when(!is_null($this->keys), fn(Builder $q) => $q->whereIn('et.email_key', $this->keys))

             ->when(!is_null($this->searchPhrase), function (Builder $q) {
                 $words = explode(' ', $this->searchPhrase);
@@ @@
                 $likePattern = DB::raw("CONCAT('%', LOWER(?), '%')");
                 foreach ($words as $word) {
                     $q->where(function (Builder $q) use ($word, $likePattern) {
-                        $q->whereIn('et.email_id', function ($q) use ($word, $likePattern) {
-                            return $q->select('ets.email_id')
-                                ->from('email_templates_settings as ets')
-                                ->where(function ($q) use ($word, $likePattern) {
-                                    $q->where('ets.setting_name', 'subject');
-                                    $q->where(DB::raw('LOWER(ets.setting_value)'), 'LIKE', $likePattern)->addBinding($word);
-                                })
-                                ->orWhere(function ($q) use ($word, $likePattern) {
-                                    $q->where('ets.setting_name', 'body');
-                                    $q->where(DB::raw('LOWER(ets.setting_value)'), 'LIKE', $likePattern)->addBinding($word);
-                                });
-                        })
+                        $q->whereIn('et.email_id', fn($q) => $q->select('ets.email_id')
+                            ->from('email_templates_settings as ets')
+                            ->where(function ($q) use ($word, $likePattern) {
+                                $q->where('ets.setting_name', 'subject');
+                                $q->where(DB::raw('LOWER(ets.setting_value)'), 'LIKE', $likePattern)->addBinding($word);
+                            })
+                            ->orWhere(function ($q) use ($word, $likePattern) {
+                                $q->where('ets.setting_name', 'body');
+                                $q->where(DB::raw('LOWER(ets.setting_value)'), 'LIKE', $likePattern)->addBinding($word);
+                            }))
                             ->orWhere(DB::raw('LOWER(et.email_key)'), 'LIKE', $likePattern)->addBinding($word);
                     });
                 }
@@ @@
     {
         return $q
             ->when($this->isCustom === true,
-                function (Builder $q) {
-                    return $q->whereNull('etd.can_disable');
-                },
-                function (Builder $q) {
-                    return $q->when($this->isCustom === false, function (Builder $q) {
-                        return $q->whereNotNull('etd.can_disable');
-                    });
-                }
+                fn(Builder $q) => $q->whereNull('etd.can_disable'),
+                fn(Builder $q) => $q->when($this->isCustom === false, fn(Builder $q) => $q->whereNotNull('etd.can_disable'))
             )

-            ->when(!is_null($this->fromRoleIds), function (Builder $q) {
-                return $q->whereIn('etd.from_role_id', $this->fromRoleIds);
-            })
+            ->when(!is_null($this->fromRoleIds), fn(Builder $q) => $q->whereIn('etd.from_role_id', $this->fromRoleIds))

-            ->when(!is_null($this->toRoleIds), function (Builder $q) {
-                return $q->whereIn('etd.to_role_id', $this->toRoleIds);
-            })
+            ->when(!is_null($this->toRoleIds), fn(Builder $q) => $q->whereIn('etd.to_role_id', $this->toRoleIds))

             ->when(!is_null($this->stageIds), function (Builder $q) {
                 if (in_array(self::EMAIL_TEMPLATE_STAGE_DEFAULT, $this->stageIds)) {
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * UnionTypesRector


42) classes/doi/maps/Schema.inc.php:52

    ---------- begin diff ----------
@@ @@
     public function mapMany(Enumerable $collection): Enumerable
     {
         $this->collection = $collection;
-        return $collection->map(function ($item) {
-            return $this->map($item);
-        });
+        return $collection->map(fn($item) => $this->map($item));
     }

     /**
@@ @@
     public function summarizeMany(Enumerable $collection): Enumerable
     {
         $this->collection = $collection;
-        return $collection->map(function ($item) {
-            return $this->summarize($item);
-        });
+        return $collection->map(fn($item) => $this->summarize($item));
     }

     /**
@@ @@
     {
         $output = [];
         foreach ($props as $prop) {
-            switch ($prop) {
-                case 'resolvingUrl':
-                    $output[$prop] = $item->getResolvingUrl();
-                    break;
-                default:
-                    $output[$prop] = $item->getData($prop);
-                    break;
-            }
+            $output[$prop] = match ($prop) {
+                'resolvingUrl' => $item->getResolvingUrl(),
+                default => $item->getData($prop),
+            };
         }
         ksort($output);
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


43) classes/doi/Repository.inc.php:178

    ---------- begin diff ----------
@@ @@
         });

         if ($validator->fails()) {
-            $errors = $this->schemaService->formatValidationErrors($validator->errors(), $this->schemaService->get(PKPSchemaService::SCHEMA_DOI), []);
+            $errors = $this->schemaService->formatValidationErrors($validator->errors());
         }

         HookRegistry::call('Doi::validate', [&$errors, $object, $props]);
@@ @@

     /**
      * Creates an eight character DOI suffix
-     *
-     * @return string
      */
     protected function generateDefaultSuffix(): string
     {
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)
 * UnionTypesRector


44) classes/doi/DoiGenerator.inc.php:19

    ---------- begin diff ----------
@@ @@
 class DoiGenerator
 {
     // 32 by the factor of 6
-    protected const UPPER_LIMIT = 1073741823;
+    protected const UPPER_LIMIT = 1_073_741_823;

     /**
      * Constructs a DOI with a hyphen-separated 8-character suffix, using a Crockford Base 32 algorithm
    ----------- end diff -----------

Applied rules:
 * AddLiteralSeparatorToNumberRector (https://wiki.php.net/rfc/numeric_literal_separator)


45) classes/decision/types/traits/NotifyReviewers.inc.php:75

    ---------- begin diff ----------
@@ @@
         $mailable = $this->addEmailDataToMailable($mailable, $editor, $email);

         /** @var User[] $recipients */
-        $recipients = array_map(function ($userId) {
-            return Repo::user()->get($userId);
-        }, $email->recipients);
+        $recipients = array_map(fn($userId) => Repo::user()->get($userId), $email->recipients);

         foreach ($recipients as $recipient) {
             Mail::send($mailable->recipients([$recipient], $email->locale));
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


46) classes/decision/types/traits/NotifyAuthors.inc.php:58

    ---------- begin diff ----------
@@ @@
      */
     protected function sendAuthorEmail(Mailable $mailable, EmailData $email, User $editor, Submission $submission, Context $context)
     {
-        $recipients = array_map(function ($userId) {
-            return Repo::user()->get($userId);
-        }, $this->getAssignedAuthorIds($submission));
+        $recipients = array_map(fn($userId) => Repo::user()->get($userId), $this->getAssignedAuthorIds($submission));

         $mailable = $this->addEmailDataToMailable($mailable, $editor, $email);

@@ @@

         if ($context->getData('notifyAllAuthors')) {
             $authors = $submission->getCurrentPublication()->getData('authors');
-            $assignedAuthorEmails = array_map(function (User $user) {
-                return $user->getEmail();
-            }, $recipients);
+            $assignedAuthorEmails = array_map(fn(User $user) => $user->getEmail(), $recipients);
             $mailable = new DecisionNotifyOtherAuthors($context, $submission);
             $emailTemplate = Repo::emailTemplate()->getByKey($context->getId(), $mailable::getEmailTemplateKey());
             $mailable
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


47) classes/handler/PKPHandler.inc.php:143

    ---------- begin diff ----------
@@ @@
         if (isset($dispatcher)) {
             $dispatcher->handle404();
         } else {
-            Dispatcher::handle404();
+            (new Dispatcher())->handle404();
         } // For old-style handlers
     }
    ----------- end diff -----------

Applied rules:
 * StaticCallOnNonStaticToInstanceCallRector (https://thephp.cc/news/2017/07/dont-call-instance-methods-statically https://3v4l.org/tQ32f https://3v4l.org/jB9jn)


48) classes/handler/APIHandler.inc.php:49

    ---------- begin diff ----------
@@ @@
         parent::__construct();
         $this->_app = new \Slim\App([
             // Load custom response handler
-            'response' => function ($c) {
-                return new APIResponse();
-            },
+            'response' => fn($c) => new APIResponse(),
             'settings' => [
                 // we need access to route within middleware
                 'determineRouteBeforeAppMiddleware' => true,
@@ @@
      *
      * @return int|string?
      */
-    public function getEntityId($parameterName)
+    public function getEntityId($parameterName): int|string
     {
         assert(false);
         return null;
@@ @@
      * @return bool|string True if they validate, or a string which
      *   contains the locale key of an error message.
      */
-    protected function _validateStatDates($params, $dateStartParam = 'dateStart', $dateEndParam = 'dateEnd')
+    protected function _validateStatDates($params, $dateStartParam = 'dateStart', $dateEndParam = 'dateEnd'): bool|string
     {
         $validator = ValidatorFactory::make(
             $params,
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * UnionTypesRector


49) classes/galley/maps/Schema.inc.php:64

    ---------- begin diff ----------
@@ @@
     public function mapMany(Enumerable $collection): Enumerable
     {
         $this->collection = $collection;
-        return $collection->map(function ($item) {
-            return $this->map($item);
-        });
+        return $collection->map(fn($item) => $this->map($item));
     }

     /**
@@ @@
     public function summarizeMany(Enumerable $collection): Enumerable
     {
         $this->collection = $collection;
-        return $collection->map(function ($item) {
-            return $this->summarize($item);
-        });
+        return $collection->map(fn($item) => $this->summarize($item));
     }

     /**
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


50) classes/galley/Repository.inc.php:156

    ---------- begin diff ----------
@@ @@


         if ($validator->fails()) {
-            $errors = $this->schemaService->formatValidationErrors($validator->errors(), $this->schemaService->get($this->dao->schema), $allowedLocales);
+            $errors = $this->schemaService->formatValidationErrors($validator->errors());
         }

         HookRegistry::call('Galley::validate', [&$errors, $object, $props, $allowedLocales, $primaryLocale]);
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


51) classes/galley/Galley.inc.php:92

    ---------- begin diff ----------
@@ @@
      */
     public function getBestGalleyId()
     {
-        return $this->getData('urlPath')
-            ? $this->getData('urlPath')
-            : $this->getId();
+        return $this->getData('urlPath') ?: $this->getId();
     }

     /**
    ----------- end diff -----------

Applied rules:
 * TernaryToElvisRector (http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary https://stackoverflow.com/a/1993455/1348344)


52) classes/form/validation/FormValidatorReCaptcha.inc.php:23

    ---------- begin diff ----------
@@ @@
     /** @var string The request URL */
     private const RECAPTCHA_URL = 'https://www.google.com/recaptcha/api/siteverify';
     /** @var string The initiating IP address of the user */
-    private $_userIp;
+    private string $_userIp;
     /** @var string The hostname to expect in the validation response */
-    private $_hostname;
+    private ?string $_hostname;

     /**
      * Constructor.
@@ @@
     /**
      * @see FormValidator::isValid()
      * Determine whether or not the form meets this ReCaptcha constraint.
-     *
-     * @return bool
      */
     public function isValid(): bool
     {
         $form = $this->getForm();
         try {
-            $this->validateResponse($form->getData(self::RECAPTCHA_RESPONSE_FIELD), $this->_userIp, $this->_hostname);
+            static::validateResponse($form->getData(self::RECAPTCHA_RESPONSE_FIELD), $this->_userIp, $this->_hostname);
             return true;
-        } catch (Exception $exception) {
+        } catch (Exception) {
             $this->_message = 'common.captcha.error.missing-input-response';
             return false;
         }
@@ @@
             ]
         );

-        $response = json_decode($response->getBody(), true);
+        $response = json_decode($response->getBody(), true, 512, JSON_THROW_ON_ERROR);
         if (Config::getVar('captcha', 'recaptcha_enforce_hostname') && ($response['hostname'] ?? null) != $hostname) {
             throw new Exception('The hostname validation of the reCaptcha response failed.');
         }
    ----------- end diff -----------

Applied rules:
 * ThisCallOnStaticMethodToStaticCallRector (https://3v4l.org/rkiSC)
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)
 * TypedPropertyRector (https://wiki.php.net/rfc/typed_properties_v2#proposal)
 * RemoveUnusedVariableInCatchRector (https://wiki.php.net/rfc/non-capturing_catches)
 * UnionTypesRector


53) classes/form/validation/FormValidatorLength.inc.php:71

    ---------- begin diff ----------
@@ @@
             return true;
         } else {
             $length = PKPString::strlen($this->getFieldValue());
-            switch ($this->_comparator) {
-                case '==':
-                    return $length == $this->_length;
-                case '!=':
-                    return $length != $this->_length;
-                case '<':
-                    return $length < $this->_length;
-                case '>':
-                    return $length > $this->_length;
-                case '<=':
-                    return $length <= $this->_length;
-                case '>=':
-                    return $length >= $this->_length;
-            }
-            return false;
+            return match ($this->_comparator) {
+                '==' => $length == $this->_length,
+                '!=' => $length != $this->_length,
+                '<' => $length < $this->_length,
+                '>' => $length > $this->_length,
+                '<=' => $length <= $this->_length,
+                '>=' => $length >= $this->_length,
+                default => false,
+            };
         }
     }
 }
    ----------- end diff -----------

Applied rules:
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


54) classes/core/ArrayItemIterator.inc.php:47

    ---------- begin diff ----------
@@ @@
         } else {
             $this->theArray = & $theArray;
             $this->page = 1;
-            $this->itemsPerPage = max(count($this->theArray), 1);
+            $this->itemsPerPage = max(count((array) $this->theArray), 1);
         }
         $this->count = count($theArray);
         $this->itemsPerPage = $itemsPerPage;
-        $this->wasEmpty = count($this->theArray) == 0;
+        $this->wasEmpty = count((array) $this->theArray) == 0;
         reset($this->theArray);
     }

@@ @@
      */
     public function eof()
     {
-        return (($this->theArray == null) || (count($this->theArray) == 0));
+        return (($this->theArray == null) || (count((array) $this->theArray) == 0));
     }

     /**
    ----------- end diff -----------

Applied rules:
 * CountOnNullRector (https://3v4l.org/Bndc9)


55) classes/core/AppServiceProvider.inc.php:35

    ---------- begin diff ----------
@@ @@
      */
     public function register()
     {
-        $this->app->singleton('maps', function ($app) {
-            return new MapContainer();
-        });
-        $this->app->singleton(PKPSchemaService::class, function ($app) {
-            return Services::get('schema');
-        });
-        $this->app->singleton(PKPRequest::class, function ($app) {
-            return Application::get()->getRequest();
-        });
-        $this->app->bind(Context::class, function ($app) {
-            return Application::get()->getRequest()->getContext();
-        });
+        $this->app->singleton('maps', fn($app) => new MapContainer());
+        $this->app->singleton(PKPSchemaService::class, fn($app) => Services::get('schema'));
+        $this->app->singleton(PKPRequest::class, fn($app) => Application::get()->getRequest());
+        $this->app->bind(Context::class, fn($app) => Application::get()->getRequest()->getContext());
     }
 }
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


56) classes/core/APIRouter.inc.php:112

    ---------- begin diff ----------
@@ @@
             echo json_encode([
                 'error' => 'api.404.endpointNotFound',
                 'errorMessage' => __('api.404.endpointNotFound'),
-            ]);
+            ], JSON_THROW_ON_ERROR);
             exit;
         }

@@ @@
         echo json_encode([
             'error' => $authorizationMessage,
             'errorMessage' => __($authorizationMessage, $messageParams),
-        ]);
+        ], JSON_THROW_ON_ERROR);
         exit;
     }
    ----------- end diff -----------

Applied rules:
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)


57) classes/controllers/listbuilder/ListbuilderHandler.inc.php:246

    ---------- begin diff ----------
@@ @@
         $availableOptions = false;
         if (is_array($options) && !empty($options)) {
             $firstColumnOptions = current($options);
-            $optionsCount = count($firstColumnOptions);
+            $optionsCount = is_countable($firstColumnOptions) ? count($firstColumnOptions) : 0;
             if (is_array(current($firstColumnOptions))) { // Options with opt group, count only the selectable options.
                 unset($firstColumnOptions[self::LISTBUILDER_OPTGROUP_LABEL]);
                 $optionsCount--;
-                $optionsCount = count($firstColumnOptions, COUNT_RECURSIVE) - $optionsCount;
+                $optionsCount = (is_countable($firstColumnOptions) ? count($firstColumnOptions, COUNT_RECURSIVE) : 0) - $optionsCount;
             }

             $listElements = $this->getGridDataElements($request);
@@ @@
      */
     public static function unpack($request, $data, $deletionCallback, $insertionCallback, $updateCallback)
     {
-        $data = json_decode($data);
+        $data = json_decode($data, null, 512, JSON_THROW_ON_ERROR);
         $status = true;

         // Handle deletions
    ----------- end diff -----------

Applied rules:
 * CountOnNullRector (https://3v4l.org/Bndc9)
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)
 * RegexDashEscapeRector (https://3v4l.org/dRG8U)


58) classes/controllers/grid/plugins/PluginGridHandler.inc.php:234

    ---------- begin diff ----------
@@ @@
             $filteredPlugins = [];
             foreach ($notHiddenPlugins as $plugin) { /** @var Plugin $plugin */
                 $pluginName = $plugin->getDisplayName();
-                if (stristr($pluginName, $filter['pluginName']) !== false) {
+                if (stristr($pluginName, (string) $filter['pluginName']) !== false) {
                     $filteredPlugins[$plugin->getName()] = $plugin;
                 }
             }
@@ @@
      */
     public function deletePlugin($args, $request)
     {
-        if (!$request->checkCSRF()) {
+        $pluginName = null;
+								if (!$request->checkCSRF()) {
             return new JSONMessage(false);
         }
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)
 * StringifyStrNeedlesRector (https://wiki.php.net/rfc/deprecations_php_7_3#string_search_functions_with_integer_needle)


59) classes/controllers/grid/feature/selectableItems/SelectableItemsFeature.inc.php:52

    ---------- begin diff ----------
@@ @@

         if ($grid instanceof \PKP\controllers\grid\CategoryGridHandler) {
             $categoryId = $grid->getCurrentCategoryId();
-            $row->addFlag('selected', (bool) $grid->isDataElementInCategorySelected($categoryId, $row->getData()));
+            $getData = $row->getData();
+            $row->addFlag('selected', (bool) $grid->isDataElementInCategorySelected($categoryId, $getData));
         } else {
             $row->addFlag('selected', (bool) $grid->isDataElementSelected($row->getData()));
         }
    ----------- end diff -----------

Applied rules:
 * NonVariableToVariableOnFunctionCallRector (https://www.php.net/manual/en/migration70.incompatible.php)


60) classes/controllers/grid/feature/PagingFeature.inc.php:94

    ---------- begin diff ----------
@@ @@
             $deleted = true;
             $topLimitRowId = (int) $request->getUserVar('topLimitRowId');
             $bottomLimitRowId = (int) $request->getUserVar('bottomLimitRowId');
-
-            reset($gridData);
-            $firstDataId = key($gridData);
+            $firstDataId = array_key_first($gridData);
             next($gridData);
             $secondDataId = key($gridData);
-            end($gridData);
-            $lastDataId = key($gridData);
+            $lastDataId = array_key_last($gridData);

             if ($secondDataId == $topLimitRowId) {
                 $deleted = false;
@@ @@
                     // Case 3.
                     $pagingAttributes['loadLastPage'] = true;
                 } else {
-                    if (count($gridData) >= $rangeInfo->getCount()) {
-                        // Case 2.
-                        // Get the last data element id of the current page.
-                        end($gridData);
-                        $firstRowId = key($gridData);
+                    if ((is_countable($gridData) ? count($gridData) : 0) >= $rangeInfo->getCount()) {
+                        $firstRowId = array_key_last($gridData);

                         // Get the row and render it.
                         $args = ['rowId' => $firstRowId];
    ----------- end diff -----------

Applied rules:
 * CountOnNullRector (https://3v4l.org/Bndc9)
 * ArrayKeyFirstLastRector (https://tomasvotruba.com/blog/2018/08/16/whats-new-in-php-73-in-30-seconds-in-diffs/#2-first-and-last-array-key)


61) classes/controllers/grid/feature/OrderGridItemsFeature.inc.php:55

    ---------- begin diff ----------
@@ @@
         $request = & $args['request'];
         $grid = & $args['grid'];

-        $data = json_decode($request->getUserVar('data'));
+        $data = json_decode($request->getUserVar('data'), null, 512, JSON_THROW_ON_ERROR);

         $gridElements = $grid->getGridDataElements($request);
         if (empty($gridElements)) {
    ----------- end diff -----------

Applied rules:
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)


62) classes/controllers/grid/feature/OrderCategoryGridItemsFeature.inc.php:105

    ---------- begin diff ----------
@@ @@
         $request = & $args['request'];
         $grid = & $args['grid'];

-        $data = json_decode($request->getUserVar('data'));
+        $data = json_decode($request->getUserVar('data'), null, 512, JSON_THROW_ON_ERROR);
         $gridCategoryElements = $grid->getGridDataElements($request);

         if ($this->getType() != self::ORDER_CATEGORY_GRID_CATEGORIES_ROWS_ONLY) {
    ----------- end diff -----------

Applied rules:
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)


63) classes/controllers/grid/feature/InfiniteScrollingFeature.inc.php:127

    ---------- begin diff ----------
@@ @@

         if (is_null($row)) {
             $gridData = $grid->getGridDataElements($request);
-
-            // Get the last data element id of the current page.
-            end($gridData);
-            $lastRowId = key($gridData);
+            $lastRowId = array_key_last($gridData);

             // Get the row and render it.
             $args = ['rowId' => $lastRowId];
    ----------- end diff -----------

Applied rules:
 * ArrayKeyFirstLastRector (https://tomasvotruba.com/blog/2018/08/16/whats-new-in-php-73-in-30-seconds-in-diffs/#2-first-and-last-array-key)


64) classes/decision/Steps.inc.php:26

    ---------- begin diff ----------
@@ @@
     public DecisionType $decisionType;
     public Submission $submission;
     public Context $context;
-    public ?ReviewRound $reviewRound;
+    public ?ReviewRound $reviewRound = null;
     public array $steps = [];

     public function __construct(DecisionType $decisionType, Submission $submission, Context $context, ?ReviewRound $reviewRound = null)
@@ @@
     /**
      * Get all users assigned to a role in this decision's stage
      *
-     * @param integer $roleId
      *
      * @return array<User>
      */
    ----------- end diff -----------

Applied rules:
 * RestoreDefaultNullToNullableTypePropertyRector
 * UnionTypesRector


65) classes/decision/Repository.inc.php:296

    ---------- begin diff ----------
@@ @@
      */
     public function getDecisionType(int $decision): ?DecisionType
     {
-        return $this->getDecisionTypes()->first(function (DecisionType $decisionType) use ($decision) {
-            return $decisionType->getDecision() === $decision;
-        });
+        return $this->getDecisionTypes()->first(fn(DecisionType $decisionType) => $decisionType->getDecision() === $decision);
     }

     /**
@@ @@
      */
     protected function getSubmissionNotificationTypes(Decision $decision): array
     {
-        switch ($decision->getData('decision')) {
-            case Decision::ACCEPT:
-                return [
-                    Notification::NOTIFICATION_TYPE_ASSIGN_COPYEDITOR,
-                    Notification::NOTIFICATION_TYPE_AWAITING_COPYEDITS
-                ];
-            case Decision::SEND_TO_PRODUCTION:
-                return [
-                    Notification::NOTIFICATION_TYPE_ASSIGN_COPYEDITOR,
-                    Notification::NOTIFICATION_TYPE_AWAITING_COPYEDITS,
-                    Notification::NOTIFICATION_TYPE_ASSIGN_PRODUCTIONUSER,
-                    Notification::NOTIFICATION_TYPE_AWAITING_REPRESENTATIONS,
-                ];
-        }
-        return [];
+        return match ($decision->getData('decision')) {
+            Decision::ACCEPT => [
+                Notification::NOTIFICATION_TYPE_ASSIGN_COPYEDITOR,
+                Notification::NOTIFICATION_TYPE_AWAITING_COPYEDITS
+            ],
+            Decision::SEND_TO_PRODUCTION => [
+                Notification::NOTIFICATION_TYPE_ASSIGN_COPYEDITOR,
+                Notification::NOTIFICATION_TYPE_AWAITING_COPYEDITS,
+                Notification::NOTIFICATION_TYPE_ASSIGN_PRODUCTIONUSER,
+                Notification::NOTIFICATION_TYPE_AWAITING_REPRESENTATIONS,
+            ],
+            default => [],
+        };
     }
 }
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


66) classes/decision/DecisionType.inc.php:118

    ---------- begin diff ----------
@@ @@
         ];
         if ($this->isInReview()) {
             if (!$reviewRoundId) {
-                throw new Exception('Can not get URL to the ' . get_class($this) . ' decision without a review round id.');
+                throw new Exception('Can not get URL to the ' . $this::class . ' decision without a review round id.');
             }
             $args['reviewRoundId'] = $reviewRoundId;
         }
    ----------- end diff -----------

Applied rules:
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)


67) classes/db/SchemaDAO.inc.php:78

    ---------- begin diff ----------
@@ @@
         $primaryDbProps = $this->_getPrimaryDbProps($object);

         if (empty($primaryDbProps)) {
-            throw new Exception('Tried to insert ' . get_class($object) . ' without any properties for the ' . $this->tableName . ' table.');
+            throw new Exception('Tried to insert ' . $object::class . ' without any properties for the ' . $this->tableName . ' table.');
         }

         DB::table($this->tableName)->insert($primaryDbProps);
@@ @@
         $object->setId(DB::getPdo()->lastInsertId());

         // Add additional properties to settings table if they exist
-        if (count($sanitizedProps) !== count($primaryDbProps)) {
+        if ((is_countable($sanitizedProps) ? count($sanitizedProps) : 0) !== count($primaryDbProps)) {
             $columns = [$this->primaryKeyColumn, 'locale', 'setting_name', 'setting_value'];
             $columnsList = join(', ', $columns);
             $bindList = join(', ', array_fill(0, count($columns), '?'));
@@ @@
         $set = join('=?,', array_keys($primaryDbProps)) . '=?';
         $this->update(
             "UPDATE {$this->tableName} SET ${set} WHERE {$this->primaryKeyColumn} = ?",
-            array_merge(array_values($primaryDbProps), [$object->getId()])
+            [...array_values($primaryDbProps), ...[$object->getId()]]
         );

         $deleteSettings = [];
@@ @@
         }

         if (count($deleteSettings)) {
-            $deleteSettingNames = join(',', array_map(function ($settingName) {
-                return "'${settingName}'";
-            }, $deleteSettings));
+            $deleteSettingNames = join(',', array_map(fn($settingName) => "'${settingName}'", $deleteSettings));
             $this->update(
                 "DELETE FROM {$this->settingsTableName} WHERE {$this->primaryKeyColumn} = ? AND setting_name in (${deleteSettingNames})",
                 [$object->getId()]
    ----------- end diff -----------

Applied rules:
 * CountOnNullRector (https://3v4l.org/Bndc9)
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * ArraySpreadInsteadOfArrayMergeRector (https://wiki.php.net/rfc/spread_operator_for_array)
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)


68) classes/db/DBDataXMLParser.inc.php:26

    ---------- begin diff ----------
@@ @@
 class DBDataXMLParser
 {
     /** @var array the array of parsed SQL statements */
-    public $sql;
+    public $sql = [];

     /**
      * Constructor.
@@ @@
      */
     public function __construct()
     {
-        $this->sql = [];
     }

     /**
@@ @@
                         $table = $child->getAttribute('table');
                         $column = $child->getAttribute('column');
                         if ($column) {
-                            $this->sql = array_merge($this->sql, array_column(DB::pretend(function () use ($table, $column) {
+                            $this->sql = [...$this->sql, ...array_column(DB::pretend(function () use ($table, $column) {
                                 Schema::table($table, function (Blueprint $table) use ($column) {
                                     $table->dropColumn('column');
                                 });
-                            }), 'query'));
+                            }), 'query')];
                         } else {
-                            $this->sql = array_merge($this->sql, array_column(DB::pretend(function () use ($table) {
+                            $this->sql = [...$this->sql, ...array_column(DB::pretend(function () use ($table) {
                                 Schema::drop($table);
-                            }), 'query'));
+                            }), 'query')];
                         }
                         break;
                     case 'rename':
@@ @@
                         $to = $child->getAttribute('to');
                         if ($column) {
                             // Rename a column.
-                            $this->sql = array_merge($this->sql, array_column(DB::pretend(function () use ($table, $column, $to) {
+                            $this->sql = [...$this->sql, ...array_column(DB::pretend(function () use ($table, $column, $to) {
                                 Schema::table($table, function (Blueprint $table) use ($column, $to) {
                                     $table->renameColumn($column, $to);
                                 });
-                            }), 'query'));
+                            }), 'query')];
                         } else {
                             // Rename the table.
-                            $this->sql = array_merge($this->sql, array_column(DB::pretend(function () use ($table, $to) {
+                            $this->sql = [...$this->sql, ...array_column(DB::pretend(function () use ($table, $to) {
                                 Schema::rename($table, $to);
-                            }), 'query'));
+                            }), 'query')];
                         }
                         break;
                     case 'dropindex':
@@ @@
                         if ($child->getAttribute('ifexists') && !in_array($index, array_keys($schemaManager->listTableIndexes($table)))) {
                             break;
                         }
-                        $this->sql = array_merge($this->sql, array_column(DB::pretend(function () use ($table, $index) {
+                        $this->sql = [...$this->sql, ...array_column(DB::pretend(function () use ($table, $index) {
                             Schema::table($table, function (Blueprint $table) use ($index) {
                                 $table->dropIndex($index);
                             });
-                        }), 'query'));
+                        }), 'query')];
                         break;
                     case 'query':
                         // If a "driver" attribute is specified, multiple drivers can be
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector
 * ArraySpreadInsteadOfArrayMergeRector (https://wiki.php.net/rfc/spread_operator_for_array)


69) classes/db/DAOResultFactory.inc.php:82

    ---------- begin diff ----------
@@ @@

         // Determine if the "fromRow" method expects to receive an array or a stdClass.
         // EntityDAOs expect an object. DAOs that extend PKP\db\DAO expect an array.
-        $reflector = new ReflectionClass(get_class($this->dao));
+        $reflector = new ReflectionClass($this->dao::class);
         if ($reflector->hasMethod($this->functionName)) {
             $params = $reflector->getMethod($this->functionName)->getParameters();
             if (!empty($params) && $params[0]->hasType() && $params[0]->getType()->getName() === 'object') {
@@ @@
     public function getCount()
     {
         if ($this->sql === null) {
-            throw new \Exception('DAOResultFactory instances cannot be counted unless supplied in constructor (DAO ' . get_class($this->dao) . ')!');
+            throw new \Exception('DAOResultFactory instances cannot be counted unless supplied in constructor (DAO ' . $this->dao::class . ')!');
         }
         // EntityDAOs do not support the countRecords method, but it can
         // be accessed through an instance of PKP\db\DAO attached to them
    ----------- end diff -----------

Applied rules:
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)


70) classes/db/DAO.inc.php:41

    ---------- begin diff ----------
@@ @@
         if ($callHooks === true) {
             // Call hooks based on the object name. Results
             // in hook calls named e.g. "sessiondao::_Constructor"
-            $classNameParts = explode('\\', get_class($this)); // Separate namespace info from class name
+            $classNameParts = explode('\\', $this::class); // Separate namespace info from class name
             if (HookRegistry::call(strtolower_codesafe(end($classNameParts)) . '::_Constructor', [$this])) {
                 return;
             }
@@ @@
      *
      * @return string
      */
-    public function datetimeToDB($dt)
+    public function datetimeToDB(int|string $dt)
     {
         if ($dt === null) {
             return 'NULL';
@@ @@
      *
      * @return string
      */
-    public function dateToDB($d)
+    public function dateToDB(int|string $d)
     {
         if ($d === null) {
             return 'NULL';
@@ @@
                 return (float) $value;
             case 'object':
             case 'array':
-                $decodedValue = json_decode($value, true);
+                $decodedValue = json_decode($value, true, 512, JSON_THROW_ON_ERROR);
                 // FIXME: pkp/pkp-lib#6250 Remove after 3.3.x upgrade code is removed (see also pkp/pkp-lib#5772)
                 if (!is_null($decodedValue)) {
                     return $decodedValue;
@@ @@
      */
     public function getType($value)
     {
-        switch (gettype($value)) {
-            case 'boolean':
-            case 'bool':
-                return 'bool';
-            case 'integer':
-            case 'int':
-                return 'int';
-            case 'double':
-            case 'float':
-                return 'float';
-            case 'array':
-            case 'object':
-                return 'object';
-            case 'string':
-            default:
-                return 'string';
-        }
+        return match (gettype($value)) {
+            'boolean', 'bool' => 'bool',
+            'integer', 'int' => 'int',
+            'double', 'float' => 'float',
+            'array', 'object' => 'object',
+            default => 'string',
+        };
     }

     /**
@@ @@
         // this method is only called by a subclass. Results
         // in hook calls named e.g. "sessiondao::getAdditionalFieldNames"
         // (class names lowercase)
-        $classNameParts = explode('\\', get_class($this)); // Separate namespace info from class name
+        $classNameParts = explode('\\', $this::class); // Separate namespace info from class name
         HookRegistry::call(strtolower_codesafe(end($classNameParts)) . '::getAdditionalFieldNames', [$this, &$returner]);

         return $returner;
@@ @@
         // this method is only called by a subclass. Results
         // in hook calls named e.g. "sessiondao::getLocaleFieldNames"
         // (class names lowercase)
-        $classNameParts = explode('\\', get_class($this)); // Separate namespace info from class name
+        $classNameParts = explode('\\', $this::class); // Separate namespace info from class name
         HookRegistry::call(strtolower_codesafe(end($classNameParts)) . '::getLocaleFieldNames', [$this, &$returner]);

         return $returner;
@@ @@
                 $removeParams[] = $idValue;
             }
             $removeWhere .= rtrim(' AND setting_name IN ( ' . str_repeat('? ,', count($staleSettings)), ',') . ')';
-            $removeParams = array_merge($removeParams, $staleSettings);
+            $removeParams = [...$removeParams, ...$staleSettings];
             $removeSql = 'DELETE FROM ' . $tableName . ' WHERE ' . $removeWhere;
             $this->update($removeSql, $removeParams);
         }
@@ @@
      */
     public function getDirectionMapping($direction)
     {
-        switch ($direction) {
-            case self::SORT_DIRECTION_ASC:
-                return 'ASC';
-            case self::SORT_DIRECTION_DESC:
-                return 'DESC';
-            default:
-                return 'ASC';
-        }
+        return match ($direction) {
+            self::SORT_DIRECTION_ASC => 'ASC',
+            self::SORT_DIRECTION_DESC => 'DESC',
+            default => 'ASC',
+        };
     }

     /**
    ----------- end diff -----------

Applied rules:
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)
 * ArraySpreadInsteadOfArrayMergeRector (https://wiki.php.net/rfc/spread_operator_for_array)
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)
 * UnionTypesRector
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


71) classes/core/VirtualArrayIterator.inc.php:68

    ---------- begin diff ----------
@@ @@
      */
     public static function factory($wholeArray, $rangeInfo)
     {
+        $slicedArray = null;
         if ($rangeInfo->isValid()) {
             $slicedArray = array_slice($wholeArray, $rangeInfo->getCount() * ($rangeInfo->getPage() - 1), $rangeInfo->getCount(), true);
         }
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)


72) classes/mail/mailables/DecisionNotifyReviewer.inc.php:65

    ---------- begin diff ----------
@@ @@
      */
     protected function getDecisionDescription(?string $locale = null): string
     {
-        switch ($this->decision->getData('decision')) {
-            case Decision::ACCEPT: return __('mailable.decision.notifyReviewer.variable.decisionDescription.accept', [], $locale);
-            case Decision::DECLINE: return __('mailable.decision.notifyReviewer.variable.decisionDescription.decline', [], $locale);
-            case Decision::PENDING_REVISIONS: return __('mailable.decision.notifyReviewer.variable.decisionDescription.pendingRevisions', [], $locale);
-            case Decision::RESUBMIT: return __('mailable.decision.notifyReviewer.variable.decisionDescription.resubmit', [], $locale);
-            default: return '';
-        }
+        return match ($this->decision->getData('decision')) {
+            Decision::ACCEPT => __('mailable.decision.notifyReviewer.variable.decisionDescription.accept', [], $locale),
+            Decision::DECLINE => __('mailable.decision.notifyReviewer.variable.decisionDescription.decline', [], $locale),
+            Decision::PENDING_REVISIONS => __('mailable.decision.notifyReviewer.variable.decisionDescription.pendingRevisions', [], $locale),
+            Decision::RESUBMIT => __('mailable.decision.notifyReviewer.variable.decisionDescription.resubmit', [], $locale),
+            default => '',
+        };
     }
 }
    ----------- end diff -----------

Applied rules:
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


73) classes/mail/Mailer.inc.php:71

    ---------- begin diff ----------
@@ @@
         }

         if (!is_string($view)) {
-            throw new InvalidArgumentException('View must be instance of ' . Htmlable::class . ' or a string, ' . get_class($view) . ' is given');
+            throw new InvalidArgumentException('View must be instance of ' . Htmlable::class . ' or a string, ' . $view::class . ' is given');
         }

         return $this->compileParams($view, $data);
@@ @@
      */
     protected static function scanMailables()
     {
-        $finder = (new Finder())->files()->in(array_filter(static::discoverMailablesWithin(), function ($directory) {
-            return is_dir($directory);
-        }));
+        $finder = (new Finder())->files()->in(array_filter(static::discoverMailablesWithin(), fn($directory) => is_dir($directory)));

         $mailables = [];
         foreach ($finder as $file) {
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)


74) classes/mail/Mailable.inc.php:120

    ---------- begin diff ----------
@@ @@
      */
     public static function getEmailTemplateKey(): string
     {
-        return static::$emailTemplateKey ? static::$emailTemplateKey : '';
+        return static::$emailTemplateKey ?: '';
     }

     /**
@@ @@
                     continue 2;
                 }
             }
-            $type = is_object($variable) ? get_class($variable) : gettype($variable);
+            $type = get_debug_type($variable);
             throw new InvalidArgumentException($type . ' argument passed to the ' . static::class . ' constructor isn\'t associated with template variables');
         }
     }
    ----------- end diff -----------

Applied rules:
 * TernaryToElvisRector (http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary https://stackoverflow.com/a/1993455/1348344)
 * GetDebugTypeRector (https://wiki.php.net/rfc/get_debug_type)


75) classes/mail/MailTemplate.inc.php:49

    ---------- begin diff ----------
@@ @@
     public $bccSender;

     /** @var bool Whether or not email fields are disabled */
-    public $addressFieldsEnabled;
+    public $addressFieldsEnabled = true;

     /** @var array The list of parameters to be assigned to the template. */
-    public $params;
+    public $params = [];

     /**
      * Constructor.
@@ @@
         // Record whether or not to BCC the sender when sending message
         $this->bccSender = $request->getUserVar('bccSender');

-        $this->addressFieldsEnabled = true;
-
         if (isset($this->emailKey)) {
             $emailTemplate = Repo::emailTemplate()->getByKey($context ? $context->getId() : \PKP\core\PKPApplication::CONTEXT_SITE, $this->emailKey);
         }
@@ @@
         }

         $this->context = $context;
-        $this->params = [];
     }

     /**
@@ @@
     {
         if (isset($this->context)) {
             $signature = $this->context->getData('emailSignature');
-            if (strstr($this->getBody(), '{$templateSignature}') === false) {
+            if (!str_contains($this->getBody(), '{$templateSignature}')) {
                 $this->setBody($this->getBody() . '<br/>' . $signature);
             } else {
                 $this->setBody(str_replace('{$templateSignature}', $signature, $this->getBody()));
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector
 * StrContainsRector (https://externals.io/message/108562 https://github.com/php/php-src/pull/5179)


76) classes/mail/Mail.inc.php:35

    ---------- begin diff ----------
@@ @@
     public const MAIL_WRAP = 76;

     /** @var array List of key => value private parameters for this message */
-    public $privateParams;
+    public $privateParams = [];

     /**
      * Constructor.
@@ @@
     public function __construct()
     {
         parent::__construct();
-        $this->privateParams = [];
         if (Config::getVar('email', 'allow_envelope_sender')) {
             $defaultEnvelopeSender = Config::getVar('email', 'default_envelope_sender');
             if (!empty($defaultEnvelopeSender)) {
@@ @@
     */
     public function addReplyTo($email, $name = '')
     {
+        $replyTo = null;
         if (($replyTos = $this->getData('replyTo')) == null) {
             $replyTos = [];
         }
@@ @@
                 error_log($mailer->ErrorInfo);
                 return false;
             }
-        } catch (Exception $e) {
+        } catch (Exception) {
             error_log($mailer->ErrorInfo);
             return false;
         }
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)
 * RemoveUnusedVariableInCatchRector (https://wiki.php.net/rfc/non-capturing_catches)


77) classes/metadata/MetadataProperty.inc.php:118

    ---------- begin diff ----------
@@ @@
         // A single type will be transformed to an
         // array of types so that we can handle them
         // uniformly.
-        if (is_scalar($allowedTypes) || count($allowedTypes) == 1) {
+        if (is_scalar($allowedTypes) || (is_countable($allowedTypes) ? count($allowedTypes) : 0) == 1) {
             $allowedTypes = [$allowedTypes];
         }

@@ @@
                 // We expect an array with a single entry
                 // of the form "type => additional parameter".
                 assert(count($allowedType) == 1);
-                // Reset the array, just in case...
-                reset($allowedType);
                 // Extract the type and the additional parameter
-                $allowedTypeId = key($allowedType);
+                $allowedTypeId = array_key_first($allowedType);
                 $allowedTypeParam = current($allowedType);
             } else {
                 // No additional parameter has been set.
@@ @@
      *  "type => additional type parameter" against which the value
      *  validated or boolean false if not validated at all.
      */
-    public function isValid($value, $locale = null)
+    public function isValid($value, $locale = null): array|bool
     {
         // We never accept null values or arrays.
         if (is_null($value) || is_array($value)) {
    ----------- end diff -----------

Applied rules:
 * CountOnNullRector (https://3v4l.org/Bndc9)
 * ArrayKeyFirstLastRector (https://tomasvotruba.com/blog/2018/08/16/whats-new-in-php-73-in-30-seconds-in-diffs/#2-first-and-last-array-key)
 * RegexDashEscapeRector (https://3v4l.org/dRG8U)
 * UnionTypesRector


78) classes/metadata/MetadataDescriptionDummyAdapter.inc.php:63

    ---------- begin diff ----------
@@ @@
     {
         // Inject data from the source description into the target description.
         assert($sourceMetadataDescription->getMetadataSchema() == $targetMetadataDescription->getMetadataSchema());
-        $targetMetadataDescription->setStatements($sourceMetadataDescription->getStatements());
+        $getStatements = $sourceMetadataDescription->getStatements();
+        $targetMetadataDescription->setStatements($getStatements);
         return $targetMetadataDescription;
     }
    ----------- end diff -----------

Applied rules:
 * NonVariableToVariableOnFunctionCallRector (https://www.php.net/manual/en/migration70.incompatible.php)


79) classes/metadata/MetadataDescription.inc.php:273

    ---------- begin diff ----------
@@ @@
      */
     public function addStatement($propertyName, $value, $locale = null, $replace = false)
     {
+        $newValue = null;
         // Check the property
         $property = & $this->getProperty($propertyName);
         if (is_null($property)) {
@@ @@
      */
     public function setStatements(&$statements, $replace = self::METADATA_DESCRIPTION_REPLACE_PROPERTIES)
     {
-        assert(in_array($replace, $this->_allowedReplaceLevels()));
+        assert(in_array($replace, static::_allowedReplaceLevels()));

         // Make a backup copy of all existing statements.
         $statementsBackup = $this->getAllData();
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)
 * ThisCallOnStaticMethodToStaticCallRector (https://3v4l.org/rkiSC)


80) classes/metadata/MetadataDataObjectAdapter.inc.php:280

    ---------- begin diff ----------
@@ @@
      */
     public function &process(&$input)
     {
+        $output = null;
         // Do we inject or extract metadata?
         switch ($this->getMode()) {
             case self::METADATA_DOA_INJECTION_MODE:
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)


81) classes/mail/variables/SubmissionEmailVariable.inc.php:85

    ---------- begin diff ----------
@@ @@
     protected function getAuthorsFull(string $locale): string
     {
         $authors = $this->currentPublication->getData('authors');
-        $fullNames = array_map(function (Author $author) use ($locale) {
-            return $author->getFullName(true, false, $locale);
-        }, iterator_to_array($authors));
+        $fullNames = array_map(fn(Author $author) => $author->getFullName(true, false, $locale), iterator_to_array($authors));

         return join(__('common.commaListSeparator'), $fullNames);
     }
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


82) classes/mail/variables/RecipientEmailVariable.inc.php:29

    ---------- begin diff ----------
@@ @@
     {
         foreach ($recipients as $recipient) {
             if (!is_a($recipient, User::class)) {
-                throw new InvalidArgumentException('recipient array values should be an instances or ancestors of ' . User::class . ', ' . get_class($recipient) . ' is given');
+                throw new InvalidArgumentException('recipient array values should be an instances or ancestors of ' . User::class . ', ' . $recipient::class . ' is given');
             }
         }
    ----------- end diff -----------

Applied rules:
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)


83) classes/mail/traits/Recipient.inc.php:60

    ---------- begin diff ----------
@@ @@

         // Override the existing recipient data
         $this->to = [];
-        $this->variables = array_filter($this->variables, function ($variable) {
-            return !is_a($variable, RecipientEmailVariable::class);
-        });
+        $this->variables = array_filter($this->variables, fn($variable) => !is_a($variable, RecipientEmailVariable::class));

         $this->setAddress($to);
         $this->variables[] = new RecipientEmailVariable($recipients);
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


84) classes/migration/upgrade/v3_4_0/PKPI7014_DoiMigration.inc.php:168

    ---------- begin diff ----------
@@ @@
             array_push($insertData, $item);
         }
         foreach ($data->enabledDoiTypes as $item) {
-            $item['setting_value'] = json_encode($item['setting_value']);
+            $item['setting_value'] = json_encode($item['setting_value'], JSON_THROW_ON_ERROR);
             array_push($insertData, $item);
         }
         foreach ($data->doiPrefix as $item) {
    ----------- end diff -----------

Applied rules:
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)


85) classes/migration/upgrade/v3_4_0/I7592_RemoveUnusedEmailTemplates.inc.php:18

    ---------- begin diff ----------
@@ @@

 class I7592_RemoveUnusedEmailTemplates extends \PKP\migration\Migration
 {
-    protected ?Collection $templatesDefaultData;
-    protected ?Collection $templatesDefault;
+    protected ?Collection $templatesDefaultData = null;
+    protected ?Collection $templatesDefault = null;

     public function up(): void
     {
    ----------- end diff -----------

Applied rules:
 * RestoreDefaultNullToNullableTypePropertyRector


86) classes/migration/upgrade/v3_4_0/I7167_RemoveDuplicatedUserSettingsAndDeprecatedFields.inc.php:96

    ---------- begin diff ----------
@@ @@
         // will either be a constraint or an index. See https://github.com/pkp/pkp-lib/issues/7670.
         try {
             Schema::table('user_settings', fn (Blueprint $table) => $table->dropUnique('user_settings_pkey'));
-        } catch (Exception $e) {
+        } catch (Exception) {
             error_log('Failed to drop unique index "user_settings_pkey" from table "user_settings", another attempt will be done.');
             try {
                 Schema::table('user_settings', fn (Blueprint $table) => $table->dropIndex('user_settings_pkey'));
-            } catch (Exception $e) {
+            } catch (Exception) {
                 error_log('Second attempt to remove the index has failed, perhaps it doesn\'t exist.');
             }
         }
    ----------- end diff -----------

Applied rules:
 * RemoveUnusedVariableInCatchRector (https://wiki.php.net/rfc/non-capturing_catches)


87) classes/migration/upgrade/PKPv3_3_0UpgradeMigration.inc.php:216

    ---------- begin diff ----------
@@ @@
             } elseif (@unserialize($locales) !== false) {
                 $locales = unserialize($locales);
             } else {
-                $locales = json_decode($locales, true);
+                $locales = json_decode($locales, true, 512, JSON_THROW_ON_ERROR);
             }
             $locales = array_values($locales);
             DB::table($this->getContextSettingsTable())
@@ @@
         // Convert settings where only setting_type column is available
         $tables = DB::getDoctrineSchemaManager()->listTableNames();
         foreach ($tables as $tableName) {
-            if (substr($tableName, -9) !== '_settings' || in_array($tableName, $processedTables)) {
+            if (!str_ends_with($tableName, '_settings') || in_array($tableName, $processedTables)) {
                 continue;
             }
             if ($tableName === 'plugin_settings') {
    ----------- end diff -----------

Applied rules:
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)
 * StrEndsWithRector (https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions)


88) classes/security/authorization/internal/SubmissionFileAssignedReviewerAccessPolicy.inc.php:51

    ---------- begin diff ----------
@@ @@
             if ($context->getData('restrictReviewerFileAccess') && !$reviewAssignment->getDateConfirmed()) {
                 continue;
             }
-
-            // Determine which file stage the requested file should be in.
-            $reviewFileStage = null;
-            switch ($reviewAssignment->getStageId()) {
-            case WORKFLOW_STAGE_ID_INTERNAL_REVIEW:
-                $reviewFileStage = SubmissionFile::SUBMISSION_FILE_INTERNAL_REVIEW_FILE;
-                break;
-            case WORKFLOW_STAGE_ID_EXTERNAL_REVIEW:
-                $reviewFileStage = SubmissionFile::SUBMISSION_FILE_REVIEW_FILE;
-                break;
-            default: throw new Exception('Unknown review workflow stage ID!');
-            }
+            $reviewFileStage = match ($reviewAssignment->getStageId()) {
+                WORKFLOW_STAGE_ID_INTERNAL_REVIEW => SubmissionFile::SUBMISSION_FILE_INTERNAL_REVIEW_FILE,
+                WORKFLOW_STAGE_ID_EXTERNAL_REVIEW => SubmissionFile::SUBMISSION_FILE_REVIEW_FILE,
+                default => throw new Exception('Unknown review workflow stage ID!'),
+            };

             if (
                 $submissionFile->getData('submissionId') == $reviewAssignment->getSubmissionId() &&
    ----------- end diff -----------

Applied rules:
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


89) classes/plugins/PKPPubIdPluginHelper.inc.php:211

    ---------- begin diff ----------
@@ @@
         $pubIdPlugins = PluginRegistry::loadCategory('pubIds', true, $contextId);
         if (!empty($pubIdPlugins)) {
             foreach ($pubIdPlugins as $pubIdPlugin) {
-                $classNameParts = explode('\\', get_class($pubIdPlugin)); // Separate namespace info from class name
+                $classNameParts = explode('\\', $pubIdPlugin::class); // Separate namespace info from class name
                 if (end($classNameParts) == $pubIdPlugInClassName) {
                     // clear the pubId:
                     // delete the pubId from the DB
    ----------- end diff -----------

Applied rules:
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)


90) classes/plugins/PKPPubIdPlugin.inc.php:52

    ---------- begin diff ----------
@@ @@
                     HookRegistry::register('Schema::get::' . $dao->schema, [$this, 'addToSchema']);
                 } else {
                     // For non-schema-backed DAOs, DAOName::getAdditionalFieldNames can be used.
-                    $classNameParts = explode('\\', get_class($dao)); // Separate namespace info from class name
+                    $classNameParts = explode('\\', $dao::class); // Separate namespace info from class name
                     HookRegistry::register(strtolower_codesafe(end($classNameParts)) . '::getAdditionalFieldNames', [$this, 'getAdditionalFieldNames']);
                 }
             }
@@ @@
             }
             $newPubId = $this->constructPubId($pubIdPrefix, $fieldValue, $contextId);

-            if (!$this->checkDuplicate($newPubId, $pubObject->getId(), get_class($pubObject), $contextId)) {
+            if (!$this->checkDuplicate($newPubId, $pubObject->getId(), $pubObject::class, $contextId)) {
                 $errorMsg = $this->getNotUniqueErrorMsg();
                 return false;
             }
@@ @@
             return false;
         }
         // Does the suffix contain unresolved pattern.
-        $containPatterns = strpos($pubId, '%') !== false;
+        $containPatterns = str_contains($pubId, '%');
         return !$containPatterns;
     }
    ----------- end diff -----------

Applied rules:
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)
 * StrContainsRector (https://externals.io/message/108562 https://github.com/php/php-src/pull/5179)


91) classes/plugins/OAIMetadataFormatPlugin.inc.php:63

    ---------- begin diff ----------
@@ @@
         $formats = & $args[2];

         if ($namesOnly) {
-            $formats = array_merge($formats, [$this->getMetadataPrefix()]);
+            $formats = array_merge($formats, [static::getMetadataPrefix()]);
         } else {
             $formatClass = $this->getFormatClass();
             $formats = array_merge(
                 $formats,
-                [$this->getMetadataPrefix() => new $formatClass($this->getMetadataPrefix(), $this->getSchema(), $this->getNamespace())]
+                [static::getMetadataPrefix() => new $formatClass(static::getMetadataPrefix(), static::getSchema(), static::getNamespace())]
             );
         }
         return false;
    ----------- end diff -----------

Applied rules:
 * ThisCallOnStaticMethodToStaticCallRector (https://3v4l.org/rkiSC)


92) classes/plugins/LazyLoadPlugin.inc.php:49

    ---------- begin diff ----------
@@ @@
         // as plug-in name. Legacy plug-ins will override this method so
         // this implementation is backwards compatible.
         // NB: strtolower was required for PHP4 compatibility.
-        $classNameParts = explode('\\', get_class($this)); // Separate namespace info from class name
+        $classNameParts = explode('\\', $this::class); // Separate namespace info from class name
         return strtolower_codesafe(end($classNameParts));
     }
    ----------- end diff -----------

Applied rules:
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)


93) classes/plugins/ImportExportPlugin.inc.php:153

    ---------- begin diff ----------
@@ @@
             'ftps://'
         ];
         foreach ($allowedPrefixes as $prefix) {
-            if (substr($url, 0, strlen($prefix)) === $prefix) {
+            if (str_starts_with($url, $prefix)) {
                 return true;
             }
         }
    ----------- end diff -----------

Applied rules:
 * StrStartsWithRector (https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions)


94) classes/payment/QueuedPaymentDAO.inc.php:100

    ---------- begin diff ----------
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('queued_payments', 'queued_payment_id');
+        return $this->_getInsertId();
     }

     /**
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


95) classes/security/authorization/internal/ApiTokenDecodingMiddleware.inc.php:39

    ---------- begin diff ----------
@@ @@
      * Decodes the request's JSON Web Token
      *
      * @param SlimRequest $slimRequest
-     *
-     * @return bool|string
      */
-    protected function _decode($slimRequest)
+    protected function _decode($slimRequest): bool|string
     {
         try {
             $jwt = $this->getJWT($slimRequest);
@@ @@
              *
              * @link https://github.com/pkp/pkp-lib/issues/6462
              */
-            if (substr($apiToken, 0, 2) === '""') {
-                $apiToken = json_decode($apiToken);
+            if (str_starts_with($apiToken, '""')) {
+                $apiToken = json_decode($apiToken, null, 512, JSON_THROW_ON_ERROR);
             }
             $this->_handler->setApiToken($apiToken);
    ----------- end diff -----------

Applied rules:
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)
 * UnionTypesRector
 * StrStartsWithRector (https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions)


96) classes/security/authorization/internal/ApiAuthorizationMiddleware.inc.php:35

    ---------- begin diff ----------
@@ @@
      * Handles authorization
      *
      * @param SlimRequest $slimRequest
-     *
-     * @return bool|string
      */
-    protected function _authorize($slimRequest)
+    protected function _authorize($slimRequest): bool|string
     {
         // share SlimRequest with Handler
         $this->_handler->setSlimRequest($slimRequest);
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


97) classes/security/authorization/StageRolePolicy.inc.php:21

    ---------- begin diff ----------
@@ @@

 class StageRolePolicy extends AuthorizationPolicy
 {
-    /** @var array */
-    private $_roleIds;
+    private array $_roleIds;

-    /** @var int|null */
-    private $_stageId;
+    private ?int $_stageId;

-    /** @var bool */
-    private $_allowRecommendOnly;
+    private bool $_allowRecommendOnly;

     /**
      * Constructor
    ----------- end diff -----------

Applied rules:
 * TypedPropertyRector (https://wiki.php.net/rfc/typed_properties_v2#proposal)


98) classes/security/authorization/ReviewAssignmentFileWritePolicy.inc.php:23

    ---------- begin diff ----------
@@ @@
     /** @var Request */
     private $_request;

-    /** @var int */
-    private $_reviewAssignmentId;
+    private int $_reviewAssignmentId;

     /**
      * Constructor
    ----------- end diff -----------

Applied rules:
 * TypedPropertyRector (https://wiki.php.net/rfc/typed_properties_v2#proposal)


99) classes/security/RoleDAO.inc.php:38

    ---------- begin diff ----------
@@ @@
      *
      * @return bool True iff at least one such role exists
      */
-    public function userHasRole($contextId, $userId, $roleId)
+    public function userHasRole($contextId, $userId, int|array $roleId)
     {
         $roleId = is_array($roleId) ? join(',', array_map('intval', $roleId)) : (int) $roleId;
         $result = $this->retrieve(
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


100) classes/security/AuthSourceDAO.inc.php:157

    ---------- begin diff ----------
@@ @@
             [
                 $auth->getTitle(),
                 $auth->getPlugin(),
-                serialize($auth->getSettings() ? $auth->getSettings() : [])
+                serialize($auth->getSettings() ?: [])
             ]
         );

-        $auth->setAuthId($this->_getInsertId('auth_sources', 'auth_id'));
+        $auth->setAuthId($this->_getInsertId());
         return $auth->getAuthId();
     }

@@ @@
 			WHERE	auth_id = ?',
             [
                 $auth->getTitle(),
-                serialize($auth->getSettings() ? $auth->getSettings() : []),
+                serialize($auth->getSettings() ?: []),
                 (int) $auth->getAuthId()
             ]
         );
    ----------- end diff -----------

Applied rules:
 * TernaryToElvisRector (http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary https://stackoverflow.com/a/1993455/1348344)
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


101) classes/security/AccessKeyDAO.inc.php:139

    ---------- begin diff ----------
@@ @@
             [
                 $accessKey->getKeyHash(),
                 $accessKey->getContext(),
-                $accessKey->getAssocId() == '' ? null : (int) $accessKey->getAssocId(),
+                $accessKey->getAssocId() == 0 ? null : (int) $accessKey->getAssocId(),
                 (int) $accessKey->getUserId()
             ]
         );
@@ @@
             [
                 $accessKey->getKeyHash(),
                 $accessKey->getContext(),
-                $accessKey->getAssocId() == '' ? null : (int) $accessKey->getAssocId(),
+                $accessKey->getAssocId() == 0 ? null : (int) $accessKey->getAssocId(),
                 (int) $accessKey->getUserId(),
                 (int) $accessKey->getId()
             ]
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('access_keys', 'access_key_id');
+        return $this->_getInsertId();
     }
 }
    ----------- end diff -----------

Applied rules:
 * BinaryOpBetweenNumberAndStringRector (https://3v4l.org/XPEEl)
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


102) classes/search/SubmissionSearchIndex.inc.php:78

    ---------- begin diff ----------
@@ @@
             $searchStopwords = array_count_values(
                 array_filter(
                     array_map('trim', file(self::SEARCH_STOPWORDS_FILE)),
-                    function ($a) {
-                        return !empty($a) && $a[0] != '#';
-                    }
+                    fn($a) => !empty($a) && $a[0] != '#'
                 )
             );
             $searchStopwords[''] = 1;
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


103) classes/search/SubmissionSearchDAO.inc.php:46

    ---------- begin diff ----------
@@ @@
                 true,
                 false
             )) {
-                $keywordId = $this->_getInsertId('submission_search_keyword_list', 'keyword_id');
+                $keywordId = $this->_getInsertId();
             } else {
                 $keywordId = null; // Bug #2324
             }
@@ @@
                 'INSERT INTO submission_search_objects (submission_id, type, assoc_id) VALUES (?, ?, ?)',
                 [(int) $submissionId, (int) $type, (int) $assocId]
             );
-            return $this->_getInsertId('submission_search_objects', 'object_id');
+            return $this->_getInsertId();
         }
     }
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


104) classes/search/SubmissionSearch.inc.php:249

    ---------- begin diff ----------
@@ @@
      */
     public function retrieveResults($request, $context, $keywords, &$error, $publishedFrom = null, $publishedTo = null, $rangeInfo = null, $exclude = [])
     {
+        $results = null;
         // Pagination
         if ($rangeInfo && $rangeInfo->isValid()) {
             $page = $rangeInfo->getPage();
@@ @@
             // It is generated here in such a manner that matches with
             // identical frequency do not collide.
             $results = $this->getSparseArray($mergedResults, $orderBy, $orderDir, $exclude);
-            $totalResults = count($results);
+            $totalResults = is_countable($results) ? count($results) : 0;

             // Use only the results for the specified page.
             $offset = $itemsPerPage * ($page - 1);
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)
 * CountOnNullRector (https://3v4l.org/Bndc9)


105) classes/search/SearchFileParser.inc.php:130

    ---------- begin diff ----------
@@ @@
      */
     public static function fromFileType($type, $path)
     {
-        switch ($type) {
-            case 'text/plain':
-                return new self($path);
-                break;
-            case 'text/html':
-            case 'text/xml':
-            case 'application/xhtml':
-            case 'application/xml':
-                return new \PKP\search\SearchHTMLParser($path);
-                break;
-        }
-        return new \PKP\search\SearchHelperParser($type, $path);
+        return match ($type) {
+            'text/plain' => new self($path),
+            'text/html', 'text/xml', 'application/xhtml', 'application/xml' => new \PKP\search\SearchHTMLParser($path),
+            default => new \PKP\search\SearchHelperParser($type, $path),
+        };
     }
 }
    ----------- end diff -----------

Applied rules:
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


106) classes/scheduledTask/ScheduledTask.inc.php:25

    ---------- begin diff ----------
@@ @@
 abstract class ScheduledTask
 {
     /** @var array task arguments */
-    private $_args;
+    private array $_args;

     /** @var string? This process id. */
-    private $_processId = null;
+    private ?string $_processId = null;

     /** @var string File path in which execution log messages will be written. */
-    private $_executionLogFile;
+    private ?string $_executionLogFile;

-    /** @var ScheduledTaskHelper */
-    private $_helper;
+    private ?\PKP\scheduledTask\ScheduledTaskHelper $_helper = null;


     /**
    ----------- end diff -----------

Applied rules:
 * TypedPropertyRector (https://wiki.php.net/rfc/typed_properties_v2#proposal)


107) classes/reviewForm/ReviewFormResponseDAO.inc.php:78

    ---------- begin diff ----------
@@ @@
      */
     public function insertObject($reviewFormResponse)
     {
+        $getResponseType = $reviewFormResponse->getResponseType();
         $this->update(
             'INSERT INTO review_form_responses
 				(review_form_element_id, review_id, response_type, response_value)
@@ @@
                 $reviewFormResponse->getReviewFormElementId(),
                 $reviewFormResponse->getReviewId(),
                 $reviewFormResponse->getResponseType(),
-                $this->convertToDB($reviewFormResponse->getValue(), $reviewFormResponse->getResponseType())
+                $this->convertToDB($reviewFormResponse->getValue(), $getResponseType)
             ]
         );
     }
    ----------- end diff -----------

Applied rules:
 * NonVariableToVariableOnFunctionCallRector (https://www.php.net/manual/en/migration70.incompatible.php)


108) classes/filter/FilterHelper.inc.php:165

    ---------- begin diff ----------
@@ @@
             foreach ($filterBSubfilters as $filterBSubfilter) { /** @var PersistableFilter $filterBSubfilter */
                 $seq = $filterBSubfilter->getSequence();
                 $filterASubfilter = & $filterA->getFilter($seq);
-                if (!$filterASubfilter || !$filterBSubfilter || get_class($filterASubfilter) != get_class($filterBSubfilter)) {
+                if (!$filterASubfilter || !$filterBSubfilter || $filterASubfilter::class != $filterBSubfilter::class) {
                     return false;
                 }
    ----------- end diff -----------

Applied rules:
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)


109) classes/filter/FilterDAO.inc.php:70

    ---------- begin diff ----------
@@ @@
      *
      * @return PersistableFilter|boolean the new filter if installation successful, otherwise 'false'.
      */
-    public function configureObject($filterClassName, $filterGroupSymbolic, $settings = [], $asTemplate = false, $contextId = 0, $subFilters = [], $persist = true)
+    public function configureObject($filterClassName, $filterGroupSymbolic, $settings = [], $asTemplate = false, $contextId = 0, $subFilters = [], $persist = true): \PKP\filter\PersistableFilter|bool
     {
         // Retrieve the filter group from the database.
         $filterGroupDao = DAORegistry::getDAO('FilterGroupDAO'); /** @var FilterGroupDAO $filterGroupDao */
@@ @@
         }

         // Build the object-specific adapter cache.
-        $objectFilterCacheKey = md5($filterCacheKey . (is_object($data) ? get_class($data) : "'${data}'") . ($dataIsInput ? 'in' : 'out'));
+        $objectFilterCacheKey = md5($filterCacheKey . (is_object($data) ? $data::class : "'${data}'") . ($dataIsInput ? 'in' : 'out'));
         if (!isset($objectFilterCache[$objectFilterCacheKey])) {
             $objectFilterCache[$objectFilterCacheKey] = [];
             foreach ($filterCache[$filterCacheKey] as $filterCandidateId => $filterCandidate) { /** @var PersistableFilter $filterCandidate */
    ----------- end diff -----------

Applied rules:
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)
 * UnionTypesRector


110) classes/filter/Filter.inc.php:147

    ---------- begin diff ----------
@@ @@
     public function getDisplayName()
     {
         if (!$this->hasData('displayName')) {
-            $this->setData('displayName', get_class($this));
+            $this->setData('displayName', $this::class);
         }

         return $this->getData('displayName');
@@ @@

         // Inject the runtime settings into the data object
         // for persistence.
-        $runtimeSettings = $this->supportedRuntimeEnvironmentSettings();
+        $runtimeSettings = static::supportedRuntimeEnvironmentSettings();
         foreach ($runtimeSettings as $runtimeSetting => $defaultValue) {
             $methodName = 'get' . PKPString::ucfirst($runtimeSetting);
             $this->setData($runtimeSetting, $runtimeEnvironment->$methodName());
@@ @@
      */
     public function isCompatibleWithRuntimeEnvironment()
     {
+        $phpVersionMin = null;
+        $phpVersionMax = null;
+        $phpExtensions = null;
+        $externalPrograms = null;
         if ($this->_runtimeEnvironment === false) {
             // The runtime environment has never been
             // queried before.
-            $runtimeSettings = $this->supportedRuntimeEnvironmentSettings();
+            $runtimeSettings = static::supportedRuntimeEnvironmentSettings();

             // Find out whether we have any runtime restrictions set.
             $hasRuntimeSettings = false;
             foreach ($runtimeSettings as $runtimeSetting => $defaultValue) {
                 if ($this->hasData($runtimeSetting)) {
-                    $$runtimeSetting = $this->getData($runtimeSetting);
+                    ${$runtimeSetting} = $this->getData($runtimeSetting);
                     $hasRuntimeSettings = true;
                 } else {
-                    $$runtimeSetting = $defaultValue;
+                    ${$runtimeSetting} = $defaultValue;
                 }
             }

@@ @@
                 'displayName' => $this->getDisplayName(),
                 'inputTypeName' => $this->getInputType()->_typeName,
                 'typeofInput' => gettype($input) === 'object'
-                    ? get_class($input)
+                    ? $input::class
                     : gettype($input)
             ]));
         }
@@ @@
         // Process the filter
         $preliminaryOutput = & $this->process($input);

-        $classNameParts = explode('\\', get_class($this)); // Separate namespace info from class name
+        $classNameParts = explode('\\', $this::class); // Separate namespace info from class name
         HookRegistry::call(strtolower_codesafe(end($classNameParts) . '::execute'), [&$preliminaryOutput]);

         // Validate the filter output
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)
 * ThisCallOnStaticMethodToStaticCallRector (https://3v4l.org/rkiSC)
 * WrapVariableVariableNameInCurlyBracesRector (https://www.php.net/manual/en/language.variables.variable.php)
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)


111) classes/file/TemporaryFileManager.inc.php:95

    ---------- begin diff ----------
@@ @@
      *
      * @return object|boolean The new TemporaryFile or false on failure
      */
-    public function handleUpload($fileName, $userId)
+    public function handleUpload($fileName, $userId): object|bool
     {
         // Get the file extension, then rename the file.
         $fileExtension = $this->parseFileExtension($this->getUploadedFileName($fileName));
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


112) classes/file/TemporaryFileDAO.inc.php:178

    ---------- begin diff ----------
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('temporary_files', 'file_id');
+        return $this->_getInsertId();
     }
 }
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


113) classes/file/FileManager.inc.php:493

    ---------- begin diff ----------
@@ @@
      */
     public function fileExists($filePath, $type = 'file')
     {
-        switch ($type) {
-            case 'file':
-                return file_exists($filePath);
-            case 'dir':
-                return file_exists($filePath) && is_dir($filePath);
-            default:
-                return false;
-        }
+        return match ($type) {
+            'file' => file_exists($filePath),
+            'dir' => file_exists($filePath) && is_dir($filePath),
+            default => false,
+        };
     }

     /**
@@ @@
             return self::DOCUMENT_TYPE_IMAGE;
         }

-        switch ($type) {
-            case 'application/pdf':
-            case 'application/x-pdf':
-            case 'text/pdf':
-            case 'text/x-pdf':
-                return self::DOCUMENT_TYPE_PDF;
-            case 'application/msword':
-            case 'application/word':
-                return self::DOCUMENT_TYPE_WORD;
-            case 'application/excel':
-                return self::DOCUMENT_TYPE_EXCEL;
-            case 'text/html':
-                return self::DOCUMENT_TYPE_HTML;
-            case 'application/zip':
-            case 'application/x-zip':
-            case 'application/x-zip-compressed':
-            case 'application/x-compress':
-            case 'application/x-compressed':
-            case 'multipart/x-zip':
-                return self::DOCUMENT_TYPE_ZIP;
-            case 'application/epub':
-            case 'application/epub+zip':
-                return self::DOCUMENT_TYPE_EPUB;
-            default:
-                return self::DOCUMENT_TYPE_DEFAULT;
-        }
+        return match ($type) {
+            'application/pdf', 'application/x-pdf', 'text/pdf', 'text/x-pdf' => self::DOCUMENT_TYPE_PDF,
+            'application/msword', 'application/word' => self::DOCUMENT_TYPE_WORD,
+            'application/excel' => self::DOCUMENT_TYPE_EXCEL,
+            'text/html' => self::DOCUMENT_TYPE_HTML,
+            'application/zip', 'application/x-zip', 'application/x-zip-compressed', 'application/x-compress', 'application/x-compressed', 'multipart/x-zip' => self::DOCUMENT_TYPE_ZIP,
+            'application/epub', 'application/epub+zip' => self::DOCUMENT_TYPE_EPUB,
+            default => self::DOCUMENT_TYPE_DEFAULT,
+        };
     }

     /**
@@ @@
      */
     public function getDocumentExtension($type)
     {
-        switch ($type) {
-            case 'application/pdf':
-                return '.pdf';
-            case 'application/word':
-                return '.doc';
-            case 'text/css':
-                return '.css';
-            case 'text/html':
-                return '.html';
-            case 'application/epub+zip':
-                return '.epub';
-            default:
-                return false;
-        }
+        return match ($type) {
+            'application/pdf' => '.pdf',
+            'application/word' => '.doc',
+            'text/css' => '.css',
+            'text/html' => '.html',
+            'application/epub+zip' => '.epub',
+            default => false,
+        };
     }

     /**
@@ @@
      */
     public function getImageExtension($type)
     {
-        switch ($type) {
-            case 'image/gif':
-                return '.gif';
-            case 'image/jpeg':
-            case 'image/pjpeg':
-                return '.jpg';
-            case 'image/png':
-            case 'image/x-png':
-                return '.png';
-            case 'image/vnd.microsoft.icon':
-            case 'image/x-icon':
-            case 'image/x-ico':
-            case 'image/ico':
-                return '.ico';
-            case 'image/svg+xml':
-            case 'image/svg':
-                return '.svg';
-            case 'application/x-shockwave-flash':
-                return '.swf';
-            case 'video/x-flv':
-            case 'application/x-flash-video':
-            case 'flv-application/octet-stream':
-                return '.flv';
-            case 'audio/mpeg':
-                return '.mp3';
-            case 'audio/x-aiff':
-                return '.aiff';
-            case 'audio/x-wav':
-                return '.wav';
-            case 'video/mpeg':
-                return '.mpg';
-            case 'video/quicktime':
-                return '.mov';
-            case 'video/mp4':
-                return '.mp4';
-            case 'text/javascript':
-                return '.js';
-            case 'image/webp':
-                return '.webp';
-            default:
-                return false;
-        }
+        return match ($type) {
+            'image/gif' => '.gif',
+            'image/jpeg', 'image/pjpeg' => '.jpg',
+            'image/png', 'image/x-png' => '.png',
+            'image/vnd.microsoft.icon', 'image/x-icon', 'image/x-ico', 'image/ico' => '.ico',
+            'image/svg+xml', 'image/svg' => '.svg',
+            'application/x-shockwave-flash' => '.swf',
+            'video/x-flv', 'application/x-flash-video', 'flv-application/octet-stream' => '.flv',
+            'audio/mpeg' => '.mp3',
+            'audio/x-aiff' => '.aiff',
+            'audio/x-wav' => '.wav',
+            'video/mpeg' => '.mpg',
+            'video/quicktime' => '.mov',
+            'video/mp4' => '.mp4',
+            'text/javascript' => '.js',
+            'image/webp' => '.webp',
+            default => false,
+        };
     }

     /**
    ----------- end diff -----------

Applied rules:
 * RegexDashEscapeRector (https://3v4l.org/dRG8U)
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


114) classes/oai/PKPOAIDAO.inc.php:73

    ---------- begin diff ----------
@@ @@
     {
         do {
             // Generate unique token ID
-            $token->id = md5(uniqid(mt_rand(), true));
+            $token->id = md5(uniqid(random_int(0, mt_getrandmax()), true));
             $result = $this->retrieve(
                 'SELECT COUNT(*) AS row_count FROM oai_resumption_tokens WHERE token = ?',
                 [$token->id]
@@ @@
     /**
      * Common operations for OAIRecord and OAIIdentifier object data set.
      *
-     * @param OAIRecord|OAIIdentifier $record
      * @param array $row
      *
-     * @return OAIRecord|OAIIdentifier
      */
-    public function _doCommonOAIFromRowOperations($record, $row)
+    public function _doCommonOAIFromRowOperations(\PKP\oai\OAIRecord|\PKP\oai\OAIIdentifier $record, $row): \PKP\oai\OAIRecord|\PKP\oai\OAIIdentifier
     {
         $record->datestamp = OAIUtils::UTCDate(strtotime($this->datetimeFromDB($row['last_modified'])));

@@ @@
      *
      * @return \Illuminate\Database\Query\Builder
      */
-    abstract public function _getRecordsRecordSetQuery($setIds, $from, $until, $set, $submissionId = null, $orderBy = 'journal_id, submission_id');
+    abstract public function _getRecordsRecordSetQuery($setIds, int|string $from, int|string $until, $set, $submissionId = null, $orderBy = 'journal_id, submission_id');
 }

 if (!PKP_STRICT_MODE) {
    ----------- end diff -----------

Applied rules:
 * RandomFunctionRector
 * UnionTypesRector


115) classes/oai/OAIUtils.inc.php:21

    ---------- begin diff ----------
@@ @@
 class OAIUtils
 {
     private static $TO_ASCII;
-    private static $NOT_IN_URI_NON_RESERVED_CHARS = '/[^A-Za-z0-9\-_\.!~*\'()]/';
+    private static string $NOT_IN_URI_NON_RESERVED_CHARS = '/[^A-Za-z0-9\-_\.!~*\'()]/';

     public static function init()
     {
    ----------- end diff -----------

Applied rules:
 * RegexDashEscapeRector (https://3v4l.org/dRG8U)
 * TypedPropertyRector (https://wiki.php.net/rfc/typed_properties_v2#proposal)


116) classes/oai/OAIRecord.inc.php:22

    ---------- begin diff ----------
@@ @@
  */
 class OAIRecord extends OAIIdentifier
 {
-    public $data;
+    public $data = [];

     /**
      * Constructor
@@ @@
      */
     public function __construct()
     {
-        $this->data = [];
     }

     public function setData($name, &$value)
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector


117) classes/oai/OAI.inc.php:35

    ---------- begin diff ----------
@@ @@
     public $config;

     /** @var array list of request parameters */
-    public $params;
+    public $params = [];

     /** @var string version of the OAI protocol supported by this class */
     public $protocolVersion = '2.0';
@@ @@
     {
         $this->config = $config;

-        // Initialize parameters from GET or POST variables
-        $this->params = [];
-
         if (isset($GLOBALS['HTTP_RAW_POST_DATA']) && !empty($GLOBALS['HTTP_RAW_POST_DATA'])) {
             OAIUtils::parseStr($GLOBALS['HTTP_RAW_POST_DATA'], $this->params);
         } elseif (!empty($_SERVER['QUERY_STRING'])) {
@@ @@
     }

     /**
-     * Retrieve a resumption token.
-     *
-     * @param string $tokenId
-     *
-     * @return OAIResumptionToken|false
-     */
-    abstract public function resumptionToken($tokenId);
+				 * Retrieve a resumption token.
+				 *
+				 * @param string $tokenId
+				 */
+				abstract public function resumptionToken($tokenId): \PKP\oai\OAIResumptionToken|false;

     /**
      * Save a resumption token.
@@ @@
         $response = "\t<ListSets>\n";

         // Output sets
-        for ($i = 0, $num = count($sets); $i < $num; $i++) {
+        for ($i = 0, $num = is_countable($sets) ? count($sets) : 0; $i < $num; $i++) {
             $set = $sets[$i];
             $response .= "\t\t<set>\n" .
                     "\t\t\t<setSpec>" . OAIUtils::prepOutput($set->spec) . "</setSpec>\n" .
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector
 * CountOnNullRector (https://3v4l.org/Bndc9)
 * UnionTypesRector


118) classes/notification/managerDelegate/PKPEditingProductionStatusNotificationManager.inc.php:119

    ---------- begin diff ----------
@@ @@
                         $this->_removeNotification($submissionId, $editorStageAssignment->getUserId(), $notificationType, $contextId);
                     } else {
                         // If there is a representation
-                        if (count($representations)) {
+                        if (is_countable($representations) ? count($representations) : 0) {
                             // Remove 'assign a production user' and 'awaiting representations' notification
                             $this->_removeNotification($submissionId, $editorStageAssignment->getUserId(), $notificationType, $contextId);
                         } else {
    ----------- end diff -----------

Applied rules:
 * CountOnNullRector (https://3v4l.org/Bndc9)


119) classes/notification/managerDelegate/EditorialReportNotificationManager.inc.php:34

    ---------- begin diff ----------
@@ @@
 class EditorialReportNotificationManager extends NotificationManagerDelegate
 {
     /** @var Context Context instance */
-    private $_context;
+    private ?\PKP\context\Context $_context = null;
     /** @var Request Request instance */
     private $_request;
     /** @var array Cached message parameters */
@@ @@
             Notification::NOTIFICATION_LEVEL_TASK,
             ['contents' => __('notification.type.editorialReport.contents', [], $this->_context->getPrimaryLocale())],
             false,
-            function ($mail) use ($user) {
-                return $this->_setupMessage($mail, $user);
-            }
+            fn($mail) => $this->_setupMessage($mail, $user)
         );
     }
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * TypedPropertyRector (https://wiki.php.net/rfc/typed_properties_v2#proposal)


120) classes/notification/managerDelegate/EditorDecisionNotificationManager.inc.php:28

    ---------- begin diff ----------
@@ @@
      */
     public function getNotificationMessage($request, $notification)
     {
-        switch ($notification->getType()) {
-            case PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_INTERNAL_REVIEW:
-                return __('notification.type.editorDecisionInternalReview');
-            case PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_ACCEPT:
-                return __('notification.type.editorDecisionAccept');
-            case PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_EXTERNAL_REVIEW:
-                return __('notification.type.editorDecisionExternalReview');
-            case PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_PENDING_REVISIONS:
-                return __('notification.type.editorDecisionPendingRevisions');
-            case PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_RESUBMIT:
-                return __('notification.type.editorDecisionResubmit');
-            case PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_NEW_ROUND:
-                return __('notification.type.editorDecisionNewRound');
-            case PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_DECLINE:
-                return __('notification.type.editorDecisionDecline');
-            case PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_REVERT_DECLINE:
-                return __('notification.type.editorDecisionRevertDecline');
-            case PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_SEND_TO_PRODUCTION:
-                return __('notification.type.editorDecisionSendToProduction');
-            default:
-                return null;
-        }
+        return match ($notification->getType()) {
+            PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_INTERNAL_REVIEW => __('notification.type.editorDecisionInternalReview'),
+            PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_ACCEPT => __('notification.type.editorDecisionAccept'),
+            PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_EXTERNAL_REVIEW => __('notification.type.editorDecisionExternalReview'),
+            PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_PENDING_REVISIONS => __('notification.type.editorDecisionPendingRevisions'),
+            PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_RESUBMIT => __('notification.type.editorDecisionResubmit'),
+            PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_NEW_ROUND => __('notification.type.editorDecisionNewRound'),
+            PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_DECLINE => __('notification.type.editorDecisionDecline'),
+            PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_REVERT_DECLINE => __('notification.type.editorDecisionRevertDecline'),
+            PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_SEND_TO_PRODUCTION => __('notification.type.editorDecisionSendToProduction'),
+            default => null,
+        };
     }

     /**
@@ @@
      */
     public function _getNotificationTaskLevel($type)
     {
-        switch ($type) {
-            case PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_PENDING_REVISIONS:
-            case PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_RESUBMIT:
-                return Notification::NOTIFICATION_LEVEL_TASK;
-            default:
-                return Notification::NOTIFICATION_LEVEL_NORMAL;
-        }
+        return match ($type) {
+            PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_PENDING_REVISIONS, PKPNotification::NOTIFICATION_TYPE_EDITOR_DECISION_RESUBMIT => Notification::NOTIFICATION_LEVEL_TASK,
+            default => Notification::NOTIFICATION_LEVEL_NORMAL,
+        };
     }
 }
    ----------- end diff -----------

Applied rules:
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


121) classes/notification/managerDelegate/EditorAssignmentNotificationManager.inc.php:114

    ---------- begin diff ----------
@@ @@
      */
     public function _getStageIdByNotificationType()
     {
-        switch ($this->getNotificationType()) {
-            case PKPNotification::NOTIFICATION_TYPE_EDITOR_ASSIGNMENT_SUBMISSION:
-                return WORKFLOW_STAGE_ID_SUBMISSION;
-            case PKPNotification::NOTIFICATION_TYPE_EDITOR_ASSIGNMENT_INTERNAL_REVIEW:
-                return WORKFLOW_STAGE_ID_INTERNAL_REVIEW;
-            case PKPNotification::NOTIFICATION_TYPE_EDITOR_ASSIGNMENT_EXTERNAL_REVIEW:
-                return WORKFLOW_STAGE_ID_EXTERNAL_REVIEW;
-            case PKPNotification::NOTIFICATION_TYPE_EDITOR_ASSIGNMENT_EDITING:
-                return WORKFLOW_STAGE_ID_EDITING;
-            case PKPNotification::NOTIFICATION_TYPE_EDITOR_ASSIGNMENT_PRODUCTION:
-                return WORKFLOW_STAGE_ID_PRODUCTION;
-            default:
-                return null;
-        }
+        return match ($this->getNotificationType()) {
+            PKPNotification::NOTIFICATION_TYPE_EDITOR_ASSIGNMENT_SUBMISSION => WORKFLOW_STAGE_ID_SUBMISSION,
+            PKPNotification::NOTIFICATION_TYPE_EDITOR_ASSIGNMENT_INTERNAL_REVIEW => WORKFLOW_STAGE_ID_INTERNAL_REVIEW,
+            PKPNotification::NOTIFICATION_TYPE_EDITOR_ASSIGNMENT_EXTERNAL_REVIEW => WORKFLOW_STAGE_ID_EXTERNAL_REVIEW,
+            PKPNotification::NOTIFICATION_TYPE_EDITOR_ASSIGNMENT_EDITING => WORKFLOW_STAGE_ID_EDITING,
+            PKPNotification::NOTIFICATION_TYPE_EDITOR_ASSIGNMENT_PRODUCTION => WORKFLOW_STAGE_ID_PRODUCTION,
+            default => null,
+        };
     }
 }
    ----------- end diff -----------

Applied rules:
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


122) classes/notification/managerDelegate/AnnouncementNotificationManager.inc.php:108

    ---------- begin diff ----------
@@ @@
             Notification::NOTIFICATION_LEVEL_NORMAL,
             ['contents' => $this->_announcement->getLocalizedTitle()],
             false,
-            function ($mail) use ($user) {
-                return $this->_setupMessage($mail, $user);
-            }
+            fn($mail) => $this->_setupMessage($mail, $user)
         );
     }

@@ @@
      */
     private function _setupMessage(Mail $mail, User $user): Mail
     {
-        $mail->assignParams($this->_getMessageParams($user));
+        $mail->assignParams($this->_getMessageParams());
         return $mail;
     }
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


123) classes/security/authorization/NoteAccessPolicy.inc.php:26

    ---------- begin diff ----------
@@ @@
     /** @var Request */
     private $_request;

-    /** @var int */
-    private $_noteId;
+    private int $_noteId;

-    /** @var int */
-    private $_accessMode;
+    private int $_accessMode;

     /**
      * Constructor
    ----------- end diff -----------

Applied rules:
 * TypedPropertyRector (https://wiki.php.net/rfc/typed_properties_v2#proposal)


124) classes/security/authorization/DataObjectRequiredPolicy.inc.php:90

    ---------- begin diff ----------
@@ @@
     //
     /**
      * Test the data object's effect
-     *
-     * @return AUTHORIZATION_DENY|AUTHORIZATION_ACCEPT
      */
-    public function dataObjectEffect()
+    public function dataObjectEffect(): \AUTHORIZATION_DENY|\AUTHORIZATION_ACCEPT
     {
         // Deny by default. Must be implemented by subclass.
         return AuthorizationPolicy::AUTHORIZATION_DENY;
@@ @@
      *
      * @return int|false returns false if no valid submission id could be found.
      */
-    public function getDataObjectId($lookOnlyByParameterName = false)
+    public function getDataObjectId($lookOnlyByParameterName = false): int|false
     {
         // Identify the data object id.
         $router = $this->_request->getRouter();
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


125) classes/security/authorization/AuthorizationDecisionManager.inc.php:64

    ---------- begin diff ----------
@@ @@
     /**
      * Add an authorization policy or a policy set.
      *
-     * @param AuthorizationPolicy|PolicySet $policyOrPolicySet
      * @param bool $addToTop whether to insert the new policy
      *  to the top of the list.
      */
-    public function addPolicy($policyOrPolicySet, $addToTop = false)
+    public function addPolicy(\PKP\security\authorization\AuthorizationPolicy|\PKP\security\authorization\PolicySet $policyOrPolicySet, $addToTop = false)
     {
         $this->_rootPolicySet->addPolicy($policyOrPolicySet, $addToTop);
     }
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


126) classes/security/authorization/AllowedHostsPolicy.inc.php:54

    ---------- begin diff ----------
@@ @@
         // The list of server hosts, when specified, is a JSON array. Decode it
         // and make it lowercase.
         $allowedHosts = Config::getVar('general', 'allowed_hosts');
-        $allowedHosts = array_map('strtolower', json_decode($allowedHosts));
+        $allowedHosts = array_map('strtolower', json_decode($allowedHosts, null, 512, JSON_THROW_ON_ERROR));
         $serverHost = $this->_request->getServerHost(null, false);
         return in_array(strtolower($serverHost), $allowedHosts) ?
             AuthorizationPolicy::AUTHORIZATION_PERMIT : AuthorizationPolicy::AUTHORIZATION_DENY;
    ----------- end diff -----------

Applied rules:
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)


127) classes/security/Validation.inc.php:326

    ---------- begin diff ----------
@@ @@

         $password = '';
         for ($i = 0; $i < $length; $i++) {
-            $password .= mt_rand(1, 4) == 4 ? $numbers[mt_rand(0, strlen($numbers) - 1)] : $letters[mt_rand(0, strlen($letters) - 1)];
+            $password .= random_int(1, 4) == 4 ? $numbers[random_int(0, strlen($numbers) - 1)] : $letters[random_int(0, strlen($letters) - 1)];
         }
         return $password;
     }
    ----------- end diff -----------

Applied rules:
 * RandomFunctionRector


128) classes/security/UserGroupDAO.inc.php:192

    ---------- begin diff ----------
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('user_groups', 'user_group_id');
+        return $this->_getInsertId();
     }

     /**
@@ @@
      *
      * @param int $contextId Context ID
      * @param int $roleId ROLE_ID_...
-     *
-     * @return UserGroup|false
      */
-    public function getDefaultByRoleId($contextId, $roleId)
+    public function getDefaultByRoleId($contextId, $roleId): \PKP\security\UserGroup|false
     {
         $allDefaults = $this->getByRoleId($contextId, $roleId, true);
         return $allDefaults->next() ?? false;
@@ @@
                 'name',
                 [$locale => __($nameKey, [], $locale)],
                 'string',
-                $locale,
-                true
+                $locale
             );

             $abbrevKey = $this->getSetting($userGroup->getId(), 'abbrevLocaleKey');
@@ @@
                 'abbrev',
                 [$locale => __($abbrevKey, [], $locale)],
                 'string',
-                $locale,
-                true
+                $locale
             );
         }
     }
@@ @@
                 $terms = array_map(fn (string $term) => '%' . addcslashes($term, '%_') . '%', PKPString::regexp_split('/\s+/', $search));
                 $filters = [];

-                switch (get_class(DB::connection())) {
+                switch (DB::connection()::class) {
                     case MySqlConnection::class:
                         $concatSettingValue = "GROUP_CONCAT(setting_value SEPARATOR '')";
                         break;
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)
 * UnionTypesRector


129) classes/xslt/XSLTransformer.inc.php:44

    ---------- begin diff ----------
@@ @@
     public $registerPHPFunctions;

     /** @var array List of error strings */
-    public $errors;
+    public $errors = [];

     /**
      * Constructor.
@@ @@
     {
         // Necessary to fetch configuration.
         self::checkSupport();
-
-        $this->errors = [];
     }

     /**
@@ @@
         // Determine the appropriate XSLT processor for the system
         if (self::$externalCommand) {
             // check the external command to check for %xsl and %xml parameter substitution
-            if (strpos(self::$externalCommand, '%xsl') === false) {
+            if (!str_contains(self::$externalCommand, '%xsl')) {
                 return false;
             }
-            if (strpos(self::$externalCommand, '%xml') === false) {
+            if (!str_contains(self::$externalCommand, '%xml')) {
                 return false;
             }
             self::$processor = 'External';
@@ @@
         // The result type can only be string or DOM
         assert($resultType != self::XSL_TRANSFORMER_DOCTYPE_FILE);

-        switch (self::$processor) {
-            case 'External':
-                return $this->_transformExternal($xml, $xmlType, $xsl, $xslType, $resultType);
-
-            case 'PHP':
-                return $this->_transformPHP($xml, $xmlType, $xsl, $xslType, $resultType);
-
-            default:
-                // No XSLT processor available
-                return false;
-        }
+        return match (self::$processor) {
+            'External' => $this->_transformExternal($xml, $xmlType, $xsl, $xslType, $resultType),
+            'PHP' => $this->_transformPHP($xml, $xmlType, $xsl, $xslType, $resultType),
+            default => false,
+        };
     }

     //
@@ @@
         }

         // check the external command to check for %xsl and %xml parameter substitution
-        if (strpos(self::$externalCommand, '%xsl') === false) {
+        if (!str_contains(self::$externalCommand, '%xsl')) {
             return false;
         }
-        if (strpos(self::$externalCommand, '%xml') === false) {
+        if (!str_contains(self::$externalCommand, '%xml')) {
             return false;
         }
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector
 * StrContainsRector (https://externals.io/message/108562 https://github.com/php/php-src/pull/5179)
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


130) classes/xslt/XSLTransformationFilter.inc.php:56

    ---------- begin diff ----------
@@ @@
      *
      * @return DOMDocument|string a document, xsl string or file name
      */
-    public function &getXSL()
+    public function &getXSL(): \DOMDocument|string
     {
         return $this->getData('xsl');
     }
@@ @@

     /**
      * Set the XSL
-     *
-     * @param DOMDocument|string $xsl
      */
-    public function setXSL(&$xsl)
+    public function setXSL(\DOMDocument|string &$xsl)
     {
         // Determine the xsl type
         if (is_string($xsl)) {
@@ @@
      * @see Filter::process()
      *
      * @param DOMDocument|string $xml
-     *
-     * @return DOMDocument|string
      */
-    public function &process(&$xml)
+    public function &process(&$xml): \DOMDocument|string
     {
+        $xmlType = null;
         // Determine the input type
         if (is_string($xml)) {
             $xmlType = XSLTransformer::XSL_TRANSFORMER_DOCTYPE_STRING;
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)
 * UnionTypesRector


131) classes/xml/XMLParserDOMHandler.inc.php:25

    ---------- begin diff ----------
@@ @@
 	var $rootNode;

 	/** @var XMLNode reference to the node currently being parsed */
-	var $currentNode;
+	var $currentNode = null;

 	/** @var string reference to the current data */
 	var $currentData;
@@ @@
 	 */
 	function __construct() {
 		$this->rootNodes = array();
-		$this->currentNode = null;
 	}

 	function destroy() {
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector


132) classes/xml/XMLNode.inc.php:21

    ---------- begin diff ----------
@@ @@
 	var $name;

 	/** @var XMLNode reference to the parent node (null if this is the root node) */
-	var $parent;
+	var $parent = null;

 	/** @var array the element's attributes */
-	var $attributes;
+	var $attributes = array();

 	/** @var string the element's value */
-	var $value;
+	var $value = null;

 	/** @var array references to the XMLNode children of this node */
-	var $children;
+	var $children = array();

 	/**
 	 * Constructor.
@@ @@
 	 */
 	function __construct($name = null) {
 		$this->name = $name;
-		$this->parent = null;
-		$this->attributes = array();
-		$this->value = null;
-		$this->children = array();
 	}

 	/**
@@ @@
 	 * @return string attribute value
 	 */
 	function getAttribute($name) {
-		return isset($this->attributes[$name]) ? $this->attributes[$name] : null;
+		return $this->attributes[$name] ?? null;
 	}

 	/**
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector
 * TernaryToNullCoalescingRector


133) classes/xml/PKPXMLParser.inc.php:30

    ---------- begin diff ----------
@@ @@
 	var $handler;

 	/** @var array List of error strings */
-	var $errors;
+	var $errors = array();

 	/**
 	 * Constructor.
 	 * Initialize parser and set parser options.
 	 */
-	function __construct() {
-		$this->errors = array();
+	function __construct()
+	{
 	}

 	function parseText($text) {
@@ @@
 	 * @param string $file full path to the XML file
 	 * @return object|false actual return type depends on the handler
 	 */
-	function parse($file) {
+	function parse($file): object|false {
 		$parser = $this->createParser();

 		if (!isset($this->handler)) {
@@ @@
 				}

 				$data[$key][] = array(
-					'attributes' => isset($values[$index]['attributes']) ? $values[$index]['attributes'] : array(),
-					'value' => isset($values[$index]['value']) ? $values[$index]['value'] : ''
+					'attributes' => $values[$index]['attributes'] ?? array(),
+					'value' => $values[$index]['value'] ?? ''
 				);
 			}
 		}
@@ @@
 	class_alias('\PKP\xml\PKPXMLParser', '\PKPXMLParser');

 	// For PHP < 8.x, this class used to be called XMLParser. Alias for compatibility when possible.
-	if (!class_exists('XMLParser')) class_alias('\PKPXMLParser', '\XMLParser');
+	if (!class_exists(\XMLParser::class)) class_alias('\PKPXMLParser', \XMLParser::class);
 }
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)
 * TernaryToNullCoalescingRector
 * UnionTypesRector


134) classes/views/ViewsDAO.inc.php:43

    ---------- begin diff ----------
@@ @@
      *
      * @return string|boolean Datetime of last view. False if no view found.
      */
-    public function getLastViewDate($assocType, $assocId, $userId = null)
+    public function getLastViewDate($assocType, $assocId, $userId = null): string|bool
     {
         $params = [(int)$assocType, $assocId];
         if ($userId) {
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


135) classes/install/form/InstallForm.inc.php:41

    ---------- begin diff ----------
@@ @@
     /** @var array database drivers supported by this system */
     public $supportedDatabaseDrivers = [
         // <driver> => array(<php-module>, <name>)
-        'mysqli' => ['mysqli', 'MySQLi'],
+        \mysqli::class => [\mysqli::class, 'MySQLi'],
         'postgres9' => ['pgsql', 'PostgreSQL'],
         'mysql' => ['mysql', 'MySQL']
     ];
@@ @@
             'locale' => Locale::getLocale(),
             'additionalLocales' => [],
             'filesDir' => $docRoot . 'files',
-            'databaseDriver' => 'mysqli',
+            'databaseDriver' => \mysqli::class,
             'databaseHost' => 'localhost',
             'databaseUsername' => Application::getName(),
             'databasePassword' => '',
    ----------- end diff -----------

Applied rules:
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


136) classes/install/PKPInstall.inc.php:76

    ---------- begin diff ----------
@@ @@

         // Map valid config options to Illuminate database drivers
         $driver = strtolower($this->getParam('databaseDriver'));
-        if (substr($driver, 0, 8) === 'postgres') {
+        if (str_starts_with($driver, 'postgres')) {
             $driver = 'pgsql';
         } else {
             $driver = 'mysql';
@@ @@
                     'installed' => 'On',
                     'base_url' => $request->getBaseUrl(),
                     'enable_beacon' => $this->getParam('enableBeacon') ? 'On' : 'Off',
-                    'allowed_hosts' => json_encode([$request->getServerHost(null, false)]),
+                    'allowed_hosts' => json_encode([$request->getServerHost(null, false)], JSON_THROW_ON_ERROR),
                     'time_zone' => $this->getParam('timeZone')
                 ],
                 'database' => [
    ----------- end diff -----------

Applied rules:
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)
 * StrStartsWithRector (https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions)


137) classes/install/Installer.inc.php:420

    ---------- begin diff ----------
@@ @@
                 $includeAction = true;
                 if ($condition) {
                     // Create a new scope to evaluate the condition
-                    $evalFunction = function ($installer, $action) use ($condition) {
-                        return eval($condition);
-                    };
+                    $evalFunction = fn($installer, $action) => eval($condition);
                     $includeAction = $evalFunction($this, $action);
                 }
                 $this->log('data: ' . $action['file'] . ($includeAction ? '' : ' (skipped)'));
@@ @@
             case 'migration':
                 assert(isset($action['attr']['class']));
                 $fullClassName = $action['attr']['class'];
-                if (strpos($fullClassName, '\\') !== false) {
+                if (str_contains($fullClassName, '\\')) {
                     // Migration is specified fully-qualified PHP class name; allow autoloading
                     $this->log(sprintf('migration: %s', $fullClassName));
                     $migration = new $fullClassName($this, $action['attr']);
@@ @@
                     // Back out already-executed migrations.
                     while ($previousMigration = array_pop($this->migrations)) {
                         try {
-                            $this->log(sprintf('revert migration: %s', get_class($previousMigration)));
+                            $this->log(sprintf('revert migration: %s', $previousMigration::class));
                             $previousMigration->down();
                         } catch (DowngradeNotSupportedException $e) {
-                            $this->log(sprintf('downgrade for "%s" unsupported: %s', get_class($previousMigration), $e->getMessage()));
+                            $this->log(sprintf('downgrade for "%s" unsupported: %s', $previousMigration::class, $e->getMessage()));
                             break;
                         } catch (Exception $e) {
-                            $this->log(sprintf('error while downgrading "%s": %s', get_class($previousMigration), Config::getVar('debug', 'show_stacktrace') ? (string) $e : $e->getMessage()));
+                            $this->log(sprintf('error while downgrading "%s": %s', $previousMigration::class, Config::getVar('debug', 'show_stacktrace') ? (string) $e : $e->getMessage()));
                             break;
                         }
                     }
@@ @@
                 $includeAction = true;
                 if ($condition) {
                     // Create a new scope to evaluate the condition
-                    $evalFunction = function ($installer, $action) use ($condition) {
-                        return eval($condition);
-                    };
+                    $evalFunction = fn($installer, $action) => eval($condition);
                     $includeAction = $evalFunction($this, $action);
                 }
                 $this->log(sprintf('code: %s %s::%s' . ($includeAction ? '' : ' (skipped)'), $action['file'] ?? 'Installer', $action['attr']['class'] ?? 'Installer', $action['attr']['function']));
@@ @@
      */
     public function getErrorString()
     {
-        switch ($this->getErrorType()) {
-            case self::INSTALLER_ERROR_DB:
-                return 'DB: ' . $this->getErrorMsg();
-            default:
-                return __($this->getErrorMsg());
-        }
+        return match ($this->getErrorType()) {
+            self::INSTALLER_ERROR_DB => 'DB: ' . $this->getErrorMsg(),
+            default => __($this->getErrorMsg()),
+        };
     }

     /**
@@ @@
         }

         // Sanitize plugin names for use in sql IN().
-        $sanitizedPluginNames = array_map(function ($name) {
-            return "'" . preg_replace('/[^A-Za-z0-9]/', '', $name) . "'";
-        }, array_keys($plugins));
+        $sanitizedPluginNames = array_map(fn($name) => "'" . preg_replace('/[^A-Za-z0-9]/', '', $name) . "'", array_keys($plugins));

         $pluginSettingsDao = DAORegistry::getDAO('PluginSettingsDAO'); /** @var PluginSettingsDAO $pluginSettingsDao */
         $result = $pluginSettingsDao->retrieve(
    ----------- end diff -----------

Applied rules:
 * RegexDashEscapeRector (https://3v4l.org/dRG8U)
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)
 * StrContainsRector (https://externals.io/message/108562 https://github.com/php/php-src/pull/5179)
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


138) classes/identity/Identity.inc.php:115

    ---------- begin diff ----------
@@ @@
      * Get given name.
      *
      * @param string $locale
-     *
-     * @return string|array
      */
-    public function getGivenName($locale)
+    public function getGivenName($locale): string|array
     {
         return $this->getData(self::IDENTITY_SETTING_GIVENNAME, $locale);
     }
@@ @@
      * Get family name.
      *
      * @param string $locale
-     *
-     * @return string|array
      */
-    public function getFamilyName($locale)
+    public function getFamilyName($locale): string|array
     {
         return $this->getData(self::IDENTITY_SETTING_FAMILYNAME, $locale);
     }
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


139) classes/i18n/translation/LocaleBundle.inc.php:54

    ---------- begin diff ----------
@@ @@
      *
      * @param string $key Locale key
      * @param array $params Named substitution parameters
-     *
-     * @return ?string
      */
     public function translateSingular(string $key, array $params = []): ?string
     {
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


140) classes/i18n/interfaces/LocaleInterface.inc.php:118

    ---------- begin diff ----------
@@ @@

     /**
      * Retrieves a locale bundle to translate texts.
-     * 
-     * @return LocaleBundle
      */
     public function getBundle(?string $locale = null, bool $useCache = true): LocaleBundle;
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


141) classes/i18n/LocaleServiceProvider.inc.php:33

    ---------- begin diff ----------
@@ @@
 {
     /**
      * Register the service provider.
-     *
-     * @return void
      */
     public function register(): void
     {
@@ @@

     /**
      * Get the services provided by the provider.
-     *
-     * @return array
      */
     public function provides(): array
     {
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


142) classes/controllers/grid/feature/GeneralPagingFeature.inc.php:28

    ---------- begin diff ----------
@@ @@
     private $_itemIterator;

     /** @var int itemsPerPage */
-    private $_itemsPerPage;
+    private int $_itemsPerPage;

     /**
      * @see GridFeature::GridFeature()
@@ @@
         $filter = $args['filter'];

         if (is_array($filter) && !empty($filter)) {
-            $this->addOptions(['filter' => json_encode($filter)]);
+            $this->addOptions(['filter' => json_encode($filter, JSON_THROW_ON_ERROR)]);
         }
     }
    ----------- end diff -----------

Applied rules:
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)
 * TypedPropertyRector (https://wiki.php.net/rfc/typed_properties_v2#proposal)


143) classes/controllers/grid/LiteralGridCellProvider.inc.php:32

    ---------- begin diff ----------
@@ @@
      */
     public function getTemplateVarsFromRowColumn($row, $column)
     {
-        switch ($column->getId()) {
-            case 'id':
-                return ['label' => $row->getId()];
-            case 'value':
-            default:
-                return ['label' => $row->getData()];
-        }
+        return match ($column->getId()) {
+            'id' => ['label' => $row->getId()],
+            default => ['label' => $row->getData()],
+        };
     }
 }
    ----------- end diff -----------

Applied rules:
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


144) classes/controllers/grid/GridRow.inc.php:37

    ---------- begin diff ----------
@@ @@
     public $_data;

     /** @var bool true if the row has been modified */
-    public $_isModified;
+    public $_isModified = false;

     /**
      * @var array row actions, the first key represents
@@ @@
     public function __construct()
     {
         parent::__construct();
-
-        $this->_isModified = false;
     }
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector


145) classes/controllers/grid/GridHandler.inc.php:391

    ---------- begin diff ----------
@@ @@
         $this->callFeaturesHook('setGridDataElements', ['grid' => &$this, 'data' => &$data]);

         if ($data instanceof Enumerable) {
-            $this->_data = $this->toAssociativeArray($data);
+            $this->_data = static::toAssociativeArray($data);
         } elseif (is_iterable($data)) {
             $this->_data = $data;
         } elseif ($data instanceof \PKP\db\DAOResultFactory) {
@@ @@
      */
     public function getRequestedRow($request, $args)
     {
+        $elementId = null;
         $isModified = isset($args['modify']);
         if (isset($args['rowId']) && !$isModified) {
             // A row ID was specified. Fetch it
@@ @@
     protected function initFeatures($request, $args)
     {
         $returner = [];
-        $classNameParts = explode('\\', get_class($this)); // Separate namespace info from class name
+        $classNameParts = explode('\\', $this::class); // Separate namespace info from class name
         HookRegistry::call(strtolower_codesafe(end($classNameParts) . '::initFeatures'), [$this, $request, $args, &$returner]);
         return $returner;
     }
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)
 * ThisCallOnStaticMethodToStaticCallRector (https://3v4l.org/rkiSC)
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)


146) classes/controllers/grid/CategoryGridHandler.inc.php:391

    ---------- begin diff ----------
@@ @@
      */
     protected function getRequestedCategoryRow($request, $args)
     {
+        $elementId = null;
+        $dataElement = null;
         if (isset($args['rowId'])) {
             // A row ID was specified. Fetch it
             $elementId = $args['rowId'];
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)


147) classes/notification/form/PKPNotificationSettingsForm.inc.php:103

    ---------- begin diff ----------
@@ @@
             ],
         ];

-        $classNameParts = explode('\\', get_class($this)); // Separate namespace info from class name
+        $classNameParts = explode('\\', $this::class); // Separate namespace info from class name
         HookRegistry::call(strtolower_codesafe(end($classNameParts) . '::getNotificationSettingCategories'), [$this, &$result]);

         return $result;
    ----------- end diff -----------

Applied rules:
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)


148) classes/notification/PKPNotificationOperationManager.inc.php:493

    ---------- begin diff ----------
@@ @@
         $secret = Config::getVar('security', 'api_key_secret', '');
         $jwt = '';
         if ($secret !== '') {
-            $jwt = JWT::encode(json_encode($encodeString), $secret, 'HS256');
+            $jwt = JWT::encode(json_encode($encodeString, JSON_THROW_ON_ERROR), $secret, 'HS256');
         }

         return $jwt;
@@ @@
         $secret = Config::getVar('security', 'api_key_secret', '');
         $jwt = '';
         if ($secret !== '') {
-            $jwt = json_decode(JWT::decode($token, $secret, ['HS256']));
+            $jwt = json_decode(JWT::decode($token, $secret, ['HS256']), null, 512, JSON_THROW_ON_ERROR);
         }

         if ($jwt == $encodeString) {
    ----------- end diff -----------

Applied rules:
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)


149) classes/notification/PKPNotificationManager.inc.php:444

    ---------- begin diff ----------
@@ @@
      */
     public function getNotificationTypeByEditorDecision(Decision $decision): ?int
     {
-        switch ($decision->getData('decision')) {
-            case Decision::ACCEPT:
-                return Notification::NOTIFICATION_TYPE_EDITOR_DECISION_ACCEPT;
-            case Decision::EXTERNAL_REVIEW:
-                return Notification::NOTIFICATION_TYPE_EDITOR_DECISION_EXTERNAL_REVIEW;
-            case Decision::PENDING_REVISIONS:
-                return Notification::NOTIFICATION_TYPE_EDITOR_DECISION_PENDING_REVISIONS;
-            case Decision::RESUBMIT:
-                return Notification::NOTIFICATION_TYPE_EDITOR_DECISION_RESUBMIT;
-            case Decision::NEW_EXTERNAL_ROUND:
-                return Notification::NOTIFICATION_TYPE_EDITOR_DECISION_NEW_ROUND;
-            case Decision::DECLINE:
-            case Decision::INITIAL_DECLINE:
-                return Notification::NOTIFICATION_TYPE_EDITOR_DECISION_DECLINE;
-            case Decision::REVERT_DECLINE:
-                return Notification::NOTIFICATION_TYPE_EDITOR_DECISION_REVERT_DECLINE;
-            case Decision::SEND_TO_PRODUCTION:
-                return Notification::NOTIFICATION_TYPE_EDITOR_DECISION_SEND_TO_PRODUCTION;
-        }
-        return null;
+        return match ($decision->getData('decision')) {
+            Decision::ACCEPT => Notification::NOTIFICATION_TYPE_EDITOR_DECISION_ACCEPT,
+            Decision::EXTERNAL_REVIEW => Notification::NOTIFICATION_TYPE_EDITOR_DECISION_EXTERNAL_REVIEW,
+            Decision::PENDING_REVISIONS => Notification::NOTIFICATION_TYPE_EDITOR_DECISION_PENDING_REVISIONS,
+            Decision::RESUBMIT => Notification::NOTIFICATION_TYPE_EDITOR_DECISION_RESUBMIT,
+            Decision::NEW_EXTERNAL_ROUND => Notification::NOTIFICATION_TYPE_EDITOR_DECISION_NEW_ROUND,
+            Decision::DECLINE, Decision::INITIAL_DECLINE => Notification::NOTIFICATION_TYPE_EDITOR_DECISION_DECLINE,
+            Decision::REVERT_DECLINE => Notification::NOTIFICATION_TYPE_EDITOR_DECISION_REVERT_DECLINE,
+            Decision::SEND_TO_PRODUCTION => Notification::NOTIFICATION_TYPE_EDITOR_DECISION_SEND_TO_PRODUCTION,
+            default => null,
+        };
     }

     //
    ----------- end diff -----------

Applied rules:
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


150) classes/notification/NotificationSubscriptionSettingsDAO.inc.php:149

    ---------- begin diff ----------
@@ @@
      */
     public function insertNewRSSToken($userId, $contextId)
     {
-        $token = uniqid(rand());
+        $token = uniqid(random_int(0, mt_getrandmax()));

         // Recurse if this token already exists
         if ($this->getUserIdByRSSToken($token, $contextId)) {
    ----------- end diff -----------

Applied rules:
 * RandomFunctionRector


151) classes/notification/NotificationManagerDelegate.inc.php:22

    ---------- begin diff ----------
@@ @@
 abstract class NotificationManagerDelegate extends PKPNotificationOperationManager
 {
     /** @var int NOTIFICATION_TYPE_... */
-    private $_notificationType;
+    private int $_notificationType;

     /**
      * Constructor.
    ----------- end diff -----------

Applied rules:
 * TypedPropertyRector (https://wiki.php.net/rfc/typed_properties_v2#proposal)


152) classes/notification/NotificationDAO.inc.php:292

    ---------- begin diff ----------
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('notifications', 'notification_id');
+        return $this->_getInsertId();
     }

     /**
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


153) classes/note/NoteDAO.inc.php:89

    ---------- begin diff ----------
@@ @@
             $params[] = (int) $userId;
         }

-        // Sanitize sort ordering
-        switch ($orderBy) {
-            case self::NOTE_ORDER_ID:
-                $orderSanitized = 'note_id';
-                break;
-            case self::NOTE_ORDER_DATE_CREATED:
-            default:
-                $orderSanitized = 'date_created';
-        }
-        switch ($sortDirection) {
-            case self::SORT_DIRECTION_ASC:
-                $directionSanitized = 'ASC';
-                break;
-            case self::SORT_DIRECTION_DESC:
-            default:
-                $directionSanitized = 'DESC';
-        }
+        $orderSanitized = match ($orderBy) {
+            self::NOTE_ORDER_ID => 'note_id',
+            default => 'date_created',
+        };
+        $directionSanitized = match ($sortDirection) {
+            self::SORT_DIRECTION_ASC => 'ASC',
+            default => 'DESC',
+        };

         $result = $this->retrieve(
             $sql = 'SELECT	*
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('notes', 'note_id');
+        return $this->_getInsertId();
     }
 }
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


154) classes/navigationMenu/NavigationMenuItemDAO.inc.php:312

    ---------- begin diff ----------
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('navigation_menu_items', 'navigation_menu_item_id');
+        return $this->_getInsertId();
     }

     /**
@@ @@
      */
     public function getSetting($navigationMenuItemId, $name, $locale = null)
     {
+        $returner = [];
         $params = [(int) $navigationMenuItemId, $name];
         if ($locale) {
             $params[] = $locale;
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


155) classes/navigationMenu/NavigationMenuItemAssignmentDAO.inc.php:300

    ---------- begin diff ----------
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('navigation_menu_item_assignments', 'navigation_menu_item_assignment_id');
+        return $this->_getInsertId();
     }

     /**
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


156) classes/navigationMenu/NavigationMenuDAO.inc.php:232

    ---------- begin diff ----------
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('navigation_menus', 'navigation_menu_id');
+        return $this->_getInsertId();
     }

     /**
@@ @@
                 // Check if the given area has a NM attached.
                 // If it does the NM is not being processed and a warning is being thrown
                 $navigationMenusWithArea = $this->getByArea($contextId, $area)->toArray();
-                if (count($navigationMenusWithArea) != 0) {
+                if ((is_countable($navigationMenusWithArea) ? count($navigationMenusWithArea) : 0) != 0) {
                     error_log("WARNING: The NavigationMenu (ContextId: ${contextId}, Title: ${title}, Area: ${area}) will be skipped because the specified area has already a NavigationMenu attached.");
                     continue;
                 }
    ----------- end diff -----------

Applied rules:
 * CountOnNullRector (https://3v4l.org/Bndc9)
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


157) classes/submission/SubmissionKeywordDAO.inc.php:138

    ---------- begin diff ----------
@@ @@
      *
      * @return int|array Controlled Vocab
      */
-    public function deleteByPublicationId($publicationId)
+    public function deleteByPublicationId($publicationId): int|array
     {
         $keywordDao = DAORegistry::getDAO('SubmissionKeywordDAO'); /** @var SubmissionKeywordDAO $keywordDao */
         $submissionKeywordEntryDao = DAORegistry::getDAO('SubmissionKeywordEntryDAO'); /** @var SubmissionKeywordEntryDAO $submissionKeywordEntryDao */
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


158) classes/submission/SubmissionCommentDAO.inc.php:207

    ---------- begin diff ----------
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('submission_comments', 'comment_id');
+        return $this->_getInsertId();
     }

     /**
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


159) classes/submission/SubmissionComment.inc.php:141

    ---------- begin diff ----------
@@ @@
             $authorFullName = $user->getFullName();
         }

-        return $authorFullName ? $authorFullName : '';
+        return $authorFullName ?: '';
     }

     /**
@@ @@
             return $user->getEmail();
         }

-        return $authorEmail ? $authorEmail : '';
+        return $authorEmail ?: '';
     }

     /**
    ----------- end diff -----------

Applied rules:
 * TernaryToElvisRector (http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary https://stackoverflow.com/a/1993455/1348344)


160) classes/submission/Repository.inc.php:338

    ---------- begin diff ----------
@@ @@
         }
         // If user has no stage assigments, check if user can edit anyway ie. is manager
         $context = Application::get()->getRequest()->getContext();
-        if (count($stageAssignments) == 0 && $this->_canUserAccessUnassignedSubmissions($context->getId(), $userId)) {
+        if ((is_countable($stageAssignments) ? count($stageAssignments) : 0) == 0 && $this->_canUserAccessUnassignedSubmissions($context->getId(), $userId)) {
             return true;
         }
         // Else deny access
@@ @@
         // If there are no publications, we are probably in the process of deleting a submission.
         // To be safe, reset the status anyway.
         if (!$publications->count()) {
-            return Submission::STATUS_DECLINED
-                ? Submission::STATUS_DECLINED
-                : Submission::STATUS_QUEUED;
+            return Submission::STATUS_DECLINED ?: Submission::STATUS_QUEUED;
         }

         $newStatus = Submission::STATUS_QUEUED;
@@ @@
         }

         // Use the latest published publication
-        $newCurrentPublicationId = $publications->reduce(function ($a, $b) {
-            return $b->getData('status') === Submission::STATUS_PUBLISHED && $b->getId() > $a ? $b->getId() : $a;
-        }, 0);
+        $newCurrentPublicationId = $publications->reduce(fn($a, $b) => $b->getData('status') === Submission::STATUS_PUBLISHED && $b->getId() > $a ? $b->getId() : $a, 0);

         // If there is no published publication, use the latest publication
         if (!$newCurrentPublicationId) {
-            $newCurrentPublicationId = $publications->reduce(function ($a, $b) {
-                return $a > $b->getId() ? $a : $b->getId();
-            }, 0);
+            $newCurrentPublicationId = $publications->reduce(fn($a, $b) => $a > $b->getId() ? $a : $b->getId(), 0);
         }

         return $newCurrentPublicationId ?? $submission->getData('currentPublicationId');
    ----------- end diff -----------

Applied rules:
 * TernaryToElvisRector (http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary https://stackoverflow.com/a/1993455/1348344)
 * CountOnNullRector (https://3v4l.org/Bndc9)
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


161) classes/submission/PKPSubmissionMetadataFormImplementation.inc.php:70

    ---------- begin diff ----------
@@ @@
             'authors',
             'required',
             'submission.submit.form.authorRequired',
-            function () use ($submission) {
-                return !empty($submission->getCurrentPublication()->getData('authors'));
-            }
+            fn() => !empty($submission->getCurrentPublication()->getData('authors'))
         ));

         $contextDao = Application::getContextDao();
@@ @@
                         break;
                     case 'citations':
                         $form = $this->_parentForm;
-                        $this->_parentForm->addCheck(new \PKP\form\validation\FormValidatorCustom($this->_parentForm, 'citationsRaw', 'required', $requiredLocaleKey, function ($key) use ($form) {
-                            return !empty($form->getData('citationsRaw'));
-                        }));
+                        $this->_parentForm->addCheck(new \PKP\form\validation\FormValidatorCustom($this->_parentForm, 'citationsRaw', 'required', $requiredLocaleKey, fn($key) => !empty($form->getData('citationsRaw'))));
                         break;
                     default:
                         $this->_parentForm->addCheck(new \PKP\form\validation\FormValidator($this->_parentForm, $field, 'required', $requiredLocaleKey));
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


162) classes/submission/PKPSubmission.inc.php:110

    ---------- begin diff ----------
@@ @@
             return null;
         }

-        return $publications->reduce(function ($a, $b) {
-            return $a && $a->getId() > $b->getId() ? $a : $b;
-        });
+        return $publications->reduce(fn($a, $b) => $a && $a->getId() > $b->getId() ? $a : $b);
     }

     /**
@@ @@
             return [];
         }

-        return $publications->filter(function ($publication) {
-            return $publication->getData('status') === self::STATUS_PUBLISHED;
-        })->toArray();
+        return $publications->filter(fn($publication) => $publication->getData('status') === self::STATUS_PUBLISHED)->toArray();
     }

     /**
@@ @@
             return '';
         }

-        $userGroupIds = array_map(function ($author) {
-            return $author->getData('userGroupId');
-        }, Repo::author()->getSubmissionAuthors($this)->toArray());
+        $userGroupIds = array_map(fn($author) => $author->getData('userGroupId'), Repo::author()->getSubmissionAuthors($this)->toArray());
         $userGroups = array_map(function ($userGroupId) {
             $userGroupDao = DAORegistry::getDAO('UserGroupDAO'); /** @var UserGroupDAO $userGroupDao */
             return $userGroupDao->getbyId($userGroupId);
@@ @@
      * @param string $locale
      * @param bool $includePrefix
      *
-     * @return string|array
      *
      * @deprecated 3.2.0.0
      */
-    public function getTitle($locale, $includePrefix = true)
+    public function getTitle($locale, $includePrefix = true): string|array
     {
         $publication = $this->getCurrentPublication();
         if (!$publication) {
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * UnionTypesRector


163) classes/validation/ValidatorFactory.inc.php:82

    ---------- begin diff ----------
@@ @@
             for ($i = 0; $i < 7; $i++) {
                 $check += $numbers[$i] * (8 - $i);
             }
-            $check = $check % 11;
-            switch ($check) {
-                case 0:
-                    $check = '0';
-                    break;
-                case 1:
-                    $check = 'X';
-                    break;
-                default:
-                    $check = (string) (11 - $check);
-            }
+            $check = match ($check) {
+                0 => '0',
+                1 => 'X',
+                default => (string) (11 - $check),
+            };

             return ($numbers[7] === $check);
         });
    ----------- end diff -----------

Applied rules:
 * RegexDashEscapeRector (https://3v4l.org/dRG8U)
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


164) classes/user/maps/Schema.inc.php:63

    ---------- begin diff ----------
@@ @@
     public function mapMany(Enumerable $collection): Enumerable
     {
         $this->collection = $collection;
-        return $collection->map(function ($item) {
-            return $this->map($item);
-        });
+        return $collection->map(fn($item) => $this->map($item));
     }

     /**
@@ @@
     public function summarizeMany(Enumerable $collection): Enumerable
     {
         $this->collection = $collection;
-        return $collection->map(function ($item) {
-            return $this->summarize($item);
-        });
+        return $collection->map(fn($item) => $this->summarize($item));
     }

     /**
@@ @@
     public function summarizeManyReviewers(Enumerable $collection): Enumerable
     {
         $this->collection = $collection;
-        return $collection->map(function ($item) {
-            return $this->summarizeReviewer($item);
-        });
+        return $collection->map(fn($item) => $this->summarizeReviewer($item));
     }

     /**
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


165) classes/user/form/RegistrationForm.inc.php:166

    ---------- begin diff ----------
@@ @@
         }

         // Collect the specified user group IDs into a single piece of data
-        $this->setData('userGroupIds', array_merge(
-            array_keys((array) $this->getData('readerGroup')),
-            array_keys((array) $this->getData('reviewerGroup'))
-        ));
+        $this->setData('userGroupIds', [...array_keys((array) $this->getData('readerGroup')), ...array_keys((array) $this->getData('reviewerGroup'))]);
     }

     /**
    ----------- end diff -----------

Applied rules:
 * ArraySpreadInsteadOfArrayMergeRector (https://wiki.php.net/rfc/spread_operator_for_array)


166) classes/user/form/LoginChangePasswordForm.inc.php:32

    ---------- begin diff ----------
@@ @@

         // Validation checks for this form
         $form = $this;
-        $this->addCheck(new \PKP\form\validation\FormValidatorCustom($this, 'oldPassword', 'required', 'user.profile.form.oldPasswordInvalid', function ($password) use ($form) {
-            return Validation::checkCredentials($form->getData('username'), $password);
-        }));
+        $this->addCheck(new \PKP\form\validation\FormValidatorCustom($this, 'oldPassword', 'required', 'user.profile.form.oldPasswordInvalid', fn($password) => Validation::checkCredentials($form->getData('username'), $password)));
         $this->addCheck(new \PKP\form\validation\FormValidatorLength($this, 'password', 'required', 'user.register.form.passwordLengthRestriction', '>=', $site->getMinPasswordLength()));
         $this->addCheck(new \PKP\form\validation\FormValidator($this, 'password', 'required', 'user.profile.form.newPasswordRequired'));
-        $this->addCheck(new \PKP\form\validation\FormValidatorCustom($this, 'password', 'required', 'user.register.form.passwordsDoNotMatch', function ($password) use ($form) {
-            return $password == $form->getData('password2');
-        }));
+        $this->addCheck(new \PKP\form\validation\FormValidatorCustom($this, 'password', 'required', 'user.register.form.passwordsDoNotMatch', fn($password) => $password == $form->getData('password2')));
         $this->addCheck(new \PKP\form\validation\FormValidatorPost($this));
         $this->addCheck(new \PKP\form\validation\FormValidatorCSRF($this));
     }
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


167) classes/user/form/ChangePasswordForm.inc.php:40

    ---------- begin diff ----------
@@ @@
         $this->_site = $site;

         // Validation checks for this form
-        $this->addCheck(new \PKP\form\validation\FormValidatorCustom($this, 'oldPassword', 'required', 'user.profile.form.oldPasswordInvalid', function ($password) use ($user) {
-            return Validation::checkCredentials($user->getUsername(), $password);
-        }));
+        $this->addCheck(new \PKP\form\validation\FormValidatorCustom($this, 'oldPassword', 'required', 'user.profile.form.oldPasswordInvalid', fn($password) => Validation::checkCredentials($user->getUsername(), $password)));
         $this->addCheck(new \PKP\form\validation\FormValidatorLength($this, 'password', 'required', 'user.register.form.passwordLengthRestriction', '>=', $site->getMinPasswordLength()));
         $this->addCheck(new \PKP\form\validation\FormValidator($this, 'password', 'required', 'user.profile.form.newPasswordRequired'));
         $form = $this;
-        $this->addCheck(new \PKP\form\validation\FormValidatorCustom($this, 'password', 'required', 'user.register.form.passwordsDoNotMatch', function ($password) use ($form) {
-            return $password == $form->getData('password2');
-        }));
-        $this->addCheck(new \PKP\form\validation\FormValidatorCustom($this, 'password', 'required', 'user.profile.form.passwordSameAsOld', function ($password) use ($form) {
-            return $password != $form->getData('oldPassword');
-        }));
+        $this->addCheck(new \PKP\form\validation\FormValidatorCustom($this, 'password', 'required', 'user.register.form.passwordsDoNotMatch', fn($password) => $password == $form->getData('password2')));
+        $this->addCheck(new \PKP\form\validation\FormValidatorCustom($this, 'password', 'required', 'user.profile.form.passwordSameAsOld', fn($password) => $password != $form->getData('oldPassword')));

         $this->addCheck(new \PKP\form\validation\FormValidatorPost($this));
         $this->addCheck(new \PKP\form\validation\FormValidatorCSRF($this));
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


168) classes/user/User.inc.php:422

    ---------- begin diff ----------
@@ @@
      *
      * @return bool
      */
-    public function hasRole($roles, $contextId)
+    public function hasRole(int|array $roles, $contextId)
     {
         $contextRoles = $this->getRoles($contextId);
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


169) classes/core/PKPString.inc.php:248

    ---------- begin diff ----------
@@ @@
      *
      * @return int|boolean Returns 1 if the pattern matches given subject, 0 if it does not, or FALSE if an error occurred.
      */
-    public static function regexp_match_get($pattern, $subject, &$matches)
+    public static function regexp_match_get($pattern, $subject, &$matches): int|bool
     {
         return preg_match($pattern . 'u', $subject, $matches);
     }
@@ @@
      *
      * @return int|boolean Returns number of full matches of given subject, or FALSE if an error occurred.
      */
-    public static function regexp_match_all($pattern, $subject, &$matches)
+    public static function regexp_match_all($pattern, $subject, &$matches): int|bool
     {
         return preg_match_all($pattern . 'u', $subject, $matches);
     }
@@ @@
         if (function_exists('finfo_open')) {
             $fi = & Registry::get('fileInfo', true, null);
             if ($fi === null) {
-                $fi = finfo_open(FILEINFO_MIME, Config::getVar('finfo', 'mime_database_path'));
+                $fi = finfo_open(FILEINFO_MIME, Config::getVar(\finfo::class, 'mime_database_path'));
             }
             if ($fi !== false) {
                 $result = strtok(finfo_file($fi, $filename), ' ;');
@@ @@
     public static function generateUUID()
     {
         mt_srand((float)microtime() * 10000);
-        $charid = strtoupper(md5(uniqid(rand(), true)));
+        $charid = strtoupper(md5(uniqid(random_int(0, mt_getrandmax()), true)));
         $hyphen = '-';
         $uuid = substr($charid, 0, 8) . $hyphen
                 . substr($charid, 8, 4) . $hyphen
    ----------- end diff -----------

Applied rules:
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)
 * RandomFunctionRector
 * UnionTypesRector


170) classes/core/PKPServices.inc.php:21

    ---------- begin diff ----------
@@ @@
 abstract class PKPServices
 {
     /** @var Pimple\Container Pimple Dependency Injection Container */
-    private static $instance = null;
+    private static ?\Pimple\Container $instance = null;

     protected $container = null;
    ----------- end diff -----------

Applied rules:
 * TypedPropertyRector (https://wiki.php.net/rfc/typed_properties_v2#proposal)


171) classes/core/PKPRequest.inc.php:482

    ---------- begin diff ----------
@@ @@

             if (!isset($ipaddr)) {
                 // If multiple addresses are listed, take the last. (Supports ipv6.)
-                $ipaddr = $matches[0][count($matches[0]) - 1];
+                $ipaddr = $matches[0][(is_countable($matches[0]) ? count($matches[0]) : 0) - 1];
             }
             HookRegistry::call('Request::getRemoteAddr', [&$ipaddr]);
         }
@@ @@
             $basePath = '/';
         }

-        setcookie($key, $value, $expire, $basePath);
+        setcookie($key, $value, ['expires' => $expire, 'path' => $basePath]);
         $_COOKIE[$key] = $value;
     }
    ----------- end diff -----------

Applied rules:
 * CountOnNullRector (https://3v4l.org/Bndc9)
 * RegexDashEscapeRector (https://3v4l.org/dRG8U)
 * SetCookieRector (https://www.php.net/setcookie https://wiki.php.net/rfc/same-site-cookie)


172) classes/core/PKPEventServiceProvider.inc.php:129

    ---------- begin diff ----------
@@ @@
         };

         return collect($this->discoverEventsWithin())
-            ->reject(function ($directory) {
-                return ! is_dir($directory);
-            })
-            ->reduce(function ($discovered, $directory) use ($discoverEvents) {
-                return array_merge_recursive(
-                    $discovered,
-                    $discoverEvents::within($directory, base_path())
-                );
-            }, []);
+            ->reject(fn($directory) => ! is_dir($directory))
+            ->reduce(fn($discovered, $directory) => array_merge_recursive(
+                $discovered,
+                $discoverEvents::within($directory, base_path())
+            ), []);
     }

     /**
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


173) classes/core/PKPContainer.inc.php:39

    ---------- begin diff ----------
@@ @@
      * @var string
      * @brief the base path of the application, needed for base_path helper
      */
-    protected $basePath;
+    protected $basePath = BASE_SYS_DIR;

     /**
      * @brief Create own container instance, initialize bindings
@@ @@
      */
     public function __construct()
     {
-        $this->basePath = BASE_SYS_DIR;
         $this->settingProxyForStreamContext();
         $this->registerBaseBindings();
         $this->registerCoreContainerAliases();
@@ @@
         $this->instance('app', $this);
         $this->instance(Container::class, $this);
         $this->instance('path', $this->basePath);
-        $this->singleton(ExceptionHandler::class, function () {
-            return new class() implements ExceptionHandler {
-                public function shouldReport(Throwable $e)
-                {
-                    return true;
-                }
+        $this->singleton(ExceptionHandler::class, fn() => new class() implements ExceptionHandler {
+            public function shouldReport(Throwable $e)
+            {
+                return true;
+            }

-                public function report(Throwable $e)
-                {
-                    error_log((string) $e->getTraceAsString());
-                }
+            public function report(Throwable $e)
+            {
+                error_log((string) $e->getTraceAsString());
+            }

-                public function render($request, Throwable $e)
-                {
-                    return null;
-                }
+            public function render($request, Throwable $e)
+            {
+                return null;
+            }

-                public function renderForConsole($output, Throwable $e)
-                {
-                    echo (string) $e;
-                }
-            };
+            public function renderForConsole($output, Throwable $e)
+            {
+                echo (string) $e;
+            }
         });
         $this->singleton(
             KernelContract::class,
@@ @@

         $this->singleton(
             'queue.failer',
-            function ($app) {
-                return new DatabaseFailedJobProvider(
-                    $app['db'],
-                    config('queue.failed.database'),
-                    config('queue.failed.table')
-                );
-            }
+            fn($app) => new DatabaseFailedJobProvider(
+                $app['db'],
+                config('queue.failed.database'),
+                config('queue.failed.table')
+            )
         );

         Facade::setFacadeApplication($this);
@@ @@
         // Database connection
         $driver = 'mysql';

-        if (substr(strtolower(Config::getVar('database', 'driver')), 0, 8) === 'postgres') {
+        if (str_starts_with(strtolower(Config::getVar('database', 'driver')), 'postgres')) {
             $driver = 'pgsql';
         }
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * StrStartsWithRector (https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions)


174) classes/core/PKPApplication.inc.php:141

    ---------- begin diff ----------
@@ @@
     public function __construct()
     {
         // Seed random number generator
-        mt_srand(intval(((float) microtime()) * 1000000));
+        mt_srand(intval(((float) microtime()) * 1_000_000));

         if (!defined('PKP_STRICT_MODE')) {
             define('PKP_STRICT_MODE', (bool) Config::getVar('general', 'strict'));
@@ @@
         $this->initializeTimeZone();

         if (Config::getVar('database', 'debug')) {
-            DB::listen(fn (QueryExecuted $query) => error_log("Database query\n{$query->sql}\n" . json_encode($query->bindings)));
+            DB::listen(fn (QueryExecuted $query) => error_log("Database query\n{$query->sql}\n" . json_encode($query->bindings, JSON_THROW_ON_ERROR)));
         }
     }

@@ @@
         if ($setting = Config::getVar('general', 'time_zone')) {
             try {
                 $timeZone = (new DateTimeZone($setting))->getName();
-            } catch (Exception $e) {
+            } catch (Exception) {
                 $setting = strtolower($setting);
                 foreach (DateTimeZone::listIdentifiers() as $identifier) {
                     // Backward compatibility identification
@@ @@
     {
         $currentVersion = & $this->getEnabledProducts('core');
         assert(count($currentVersion)) == 1;
-        return $currentVersion[$this->getName()];
+        return $currentVersion[static::getName()];
     }

     /**
@@ @@
      * @return null|array The selected data as a simple tabular result set or
      *   null if the given parameter combination is not supported.
      */
-    public function getMetrics($metricType = null, $columns = [], $filter = [], $orderBy = [], $range = null)
+    public function getMetrics($metricType = null, string|array $columns = [], $filter = [], $orderBy = [], $range = null)
     {
         $statsHelper = new StatisticsHelper();

@@ @@
      */
     public static function getWorkflowStageName($stageId)
     {
-        switch ($stageId) {
-            case WORKFLOW_STAGE_ID_SUBMISSION: return 'submission.submission';
-            case WORKFLOW_STAGE_ID_INTERNAL_REVIEW: return 'workflow.review.internalReview';
-            case WORKFLOW_STAGE_ID_EXTERNAL_REVIEW: return 'workflow.review.externalReview';
-            case WORKFLOW_STAGE_ID_EDITING: return 'submission.editorial';
-            case WORKFLOW_STAGE_ID_PRODUCTION: return 'submission.production';
-        }
-        throw new Exception('Name requested for an unrecognized stage id.');
+        return match ($stageId) {
+            WORKFLOW_STAGE_ID_SUBMISSION => 'submission.submission',
+            WORKFLOW_STAGE_ID_INTERNAL_REVIEW => 'workflow.review.internalReview',
+            WORKFLOW_STAGE_ID_EXTERNAL_REVIEW => 'workflow.review.externalReview',
+            WORKFLOW_STAGE_ID_EDITING => 'submission.editorial',
+            WORKFLOW_STAGE_ID_PRODUCTION => 'submission.production',
+            default => throw new Exception('Name requested for an unrecognized stage id.'),
+        };
     }

     /**
@@ @@
      */
     public static function getWorkflowStageColor($stageId)
     {
-        switch ($stageId) {
-            case WORKFLOW_STAGE_ID_SUBMISSION: return '#d00a0a';
-            case WORKFLOW_STAGE_ID_INTERNAL_REVIEW: return '#e05c14';
-            case WORKFLOW_STAGE_ID_EXTERNAL_REVIEW: return '#e08914';
-            case WORKFLOW_STAGE_ID_EDITING: return '#006798';
-            case WORKFLOW_STAGE_ID_PRODUCTION: return '#00b28d';
-        }
-        throw new Exception('Color requested for an unrecognized stage id.');
+        return match ($stageId) {
+            WORKFLOW_STAGE_ID_SUBMISSION => '#d00a0a',
+            WORKFLOW_STAGE_ID_INTERNAL_REVIEW => '#e05c14',
+            WORKFLOW_STAGE_ID_EXTERNAL_REVIEW => '#e08914',
+            WORKFLOW_STAGE_ID_EDITING => '#006798',
+            WORKFLOW_STAGE_ID_PRODUCTION => '#00b28d',
+            default => throw new Exception('Color requested for an unrecognized stage id.'),
+        };
     }

     /**
    ----------- end diff -----------

Applied rules:
 * ThisCallOnStaticMethodToStaticCallRector (https://3v4l.org/rkiSC)
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)
 * AddLiteralSeparatorToNumberRector (https://wiki.php.net/rfc/numeric_literal_separator)
 * RemoveUnusedVariableInCatchRector (https://wiki.php.net/rfc/non-capturing_catches)
 * UnionTypesRector
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


175) classes/core/MailServiceProvider.inc.php:35

    ---------- begin diff ----------
@@ @@
      */
     public function registerIlluminateMailer() : void
     {
-        $this->app->singleton('mail.manager', function ($app) {
-            return new class($app) extends MailManager
+        $this->app->singleton('mail.manager', fn($app) => new class($app) extends MailManager
+        {
+            /**
+             * @see MailManager::resolve()
+             *
+             * @param string $name
+             *
+             * @throws InvalidArgumentException
+             */
+            protected function resolve($name) : Mailer
             {
-                /**
-                 * @see MailManager::resolve()
-                 *
-                 * @param string $name
-                 *
-                 * @throws InvalidArgumentException
-                 */
-                protected function resolve($name) : Mailer
-                {
-                    $config = $this->getConfig($name);
+                $config = $this->getConfig($name);

-                    if (is_null($config)) {
-                        throw new InvalidArgumentException("Mailer [{$name}] is not defined.");
-                    }
+                if (is_null($config)) {
+                    throw new InvalidArgumentException("Mailer [{$name}] is not defined.");
+                }

-                    // Override Illuminate mailer construction to remove unsupported view
-                    $mailer = new Mailer(
-                        $name,
-                        $this->createSymfonyTransport($config),
-                        $this->app['events']
-                    );
+                // Override Illuminate mailer construction to remove unsupported view
+                $mailer = new Mailer(
+                    $name,
+                    $this->createSymfonyTransport($config),
+                    $this->app['events']
+                );

-                    if ($this->app->bound('queue')) {
-                        $mailer->setQueue($this->app['queue']);
-                    }
+                if ($this->app->bound('queue')) {
+                    $mailer->setQueue($this->app['queue']);
+                }

-                    return $mailer;
-                }
+                return $mailer;
+            }

-                // Override sendmail transport construction to allow default path
-                protected function createSendmailTransport(array $config) : SendmailTransport
-                {
-                    $path = $config['path'] ?? $this->app['config']->get('mail.sendmail');
-                    return $path ? new SendmailTransport($path) : new SendmailTransport();
-                }
-            };
+            // Override sendmail transport construction to allow default path
+            protected function createSendmailTransport(array $config) : SendmailTransport
+            {
+                $path = $config['path'] ?? $this->app['config']->get('mail.sendmail');
+                return $path ? new SendmailTransport($path) : new SendmailTransport();
+            }
         });

-        $this->app->bind('mailer', function ($app) {
-            return $app->make('mail.manager')->mailer();
-        });
+        $this->app->bind('mailer', fn($app) => $app->make('mail.manager')->mailer());
     }

     /**
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


176) classes/core/EntityDAO.inc.php:145

    ---------- begin diff ----------
@@ @@
         $primaryDbProps = $this->getPrimaryDbProps($object);

         if (empty($primaryDbProps)) {
-            throw new \Exception('Tried to insert ' . get_class($object) . ' without any properties for the ' . $this->table . ' table.');
+            throw new \Exception('Tried to insert ' . $object::class . ' without any properties for the ' . $this->table . ' table.');
         }

         DB::table($this->table)->insert($primaryDbProps);
    ----------- end diff -----------

Applied rules:
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)


177) classes/core/Dispatcher.inc.php:103

    ---------- begin diff ----------
@@ @@
      */
     public function dispatch($request)
     {
+        $router = null;
         // Make sure that we have at least one router configured
         $routerNames = $this->getRouterNames();
         assert(count($routerNames) > 0);
@@ @@
         $time = substr($data, 0, $i);
         $contents = substr($data, $i + 1);

-        if (mktime() > $time + Config::getVar('cache', 'web_cache_hours') * 60 * 60) {
+        if (time() > $time + Config::getVar('cache', 'web_cache_hours') * 60 * 60) {
             return false;
         }

@@ @@
         $filename = $this->_router->getCacheFilename($this->_requestCallbackHack);
         $fp = fopen($filename, 'w');
         if ($fp) {
-            fwrite($fp, mktime() . ':' . $contents);
+            fwrite($fp, time() . ':' . $contents);
             fclose($fp);
         }
         return $contents;
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)
 * RenameMktimeWithoutArgsToTimeRector (https://3v4l.org/F5GE8)


178) classes/core/Core.inc.php:262

    ---------- begin diff ----------
@@ @@
      * @return string|bool The url without base url,
      * false if it was not possible to remove it.
      */
-    public static function removeBaseUrl($url)
+    public static function removeBaseUrl($url): string|bool
     {
         [$baseUrl, $contextPath] = Core::_getBaseUrlAndPath($url);

@@ @@
         } else {
             // Handle case where index.php was removed by rewrite rules,
             // and we have base url followed by the args.
-            if (strpos($url, $baseUrlPath . '?') === 0) {
+            if (str_starts_with($url, $baseUrlPath . '?')) {
                 $replacement = '?'; // Url path replacement.
                 $baseSystemEscapedPath = preg_quote($baseUrlPath . '?', '/');
             } else {
@@ @@
             // We found the contextPath using the base_url
             // config file settings. Check if the url starts
             // with the context path, if not, prepend it.
-            if (strpos($url, '/' . $contextPath . '/') !== 0) {
+            if (!str_starts_with($url, '/' . $contextPath . '/')) {
                 $url = '/' . $contextPath . $url;
             }
         }
@@ @@
                     if (is_null($baseUrlHost)) {
                         break;
                     }
-                    $baseUrlToSearch = substr($workingBaseUrl, strpos($workingBaseUrl, $baseUrlHost) + strlen($baseUrlHost));
+                    $baseUrlToSearch = substr($workingBaseUrl, strpos($workingBaseUrl, (string) $baseUrlHost) + strlen($baseUrlHost));
                     // Base url with only host part, add trailing slash
                     // so it can be checked below.
                     if (!$baseUrlToSearch) {
@@ @@

         // If the base url is found inside the passed url,
         // then we might found the right context path.
-        if (strpos($url, $baseUrl) === 0) {
+        if (str_starts_with($url, $baseUrl)) {
             if (strpos($url, '/index.php') == strlen($baseUrl) - 1) {
                 // index.php appears right after the base url,
                 // no more possible paths.
@@ @@
             function ($regexp) {
                 $delimiter = '/';
                 $regexp = trim($regexp);
-                if (strpos($regexp, $delimiter) !== 0) {
+                if (!str_starts_with($regexp, $delimiter)) {
                     // Make sure delimiters are in place.
                     $regexp = $delimiter . $regexp . $delimiter;
                 }
    ----------- end diff -----------

Applied rules:
 * StringifyStrNeedlesRector (https://wiki.php.net/rfc/deprecations_php_7_3#string_search_functions_with_integer_needle)
 * UnionTypesRector
 * StrStartsWithRector (https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions)


179) classes/submissionFile/Collector.inc.php:201

    ---------- begin diff ----------
@@ @@
         }

         if ($this->fileIds !== null) {
-            $qb->whereIn('sf.submission_file_id', function ($query) {
-                return $query->select('submission_file_id')
-                    ->from('submission_file_revisions')
-                    ->whereIn('file_id', $this->fileIds);
-            });
+            $qb->whereIn('sf.submission_file_id', fn($query) => $query->select('submission_file_id')
+                ->from('submission_file_revisions')
+                ->whereIn('file_id', $this->fileIds));
         }

         if ($this->reviewRoundIds !== null) {
-            $qb->whereIn('sf.submission_file_id', function ($query) {
-                return $query->select('submission_file_id')
-                    ->from('review_round_files')
-                    ->whereIn('review_round_id', $this->reviewRoundIds);
-            });
+            $qb->whereIn('sf.submission_file_id', fn($query) => $query->select('submission_file_id')
+                ->from('review_round_files')
+                ->whereIn('review_round_id', $this->reviewRoundIds));
         }

         if ($this->reviewIds !== null) {
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


180) classes/submission/reviewRound/ReviewRoundDAO.inc.php:284

    ---------- begin diff ----------
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('review_rounds', 'review_round_id');
+        return $this->_getInsertId();
     }

     /**
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


181) classes/submission/reviewRound/ReviewRound.inc.php:279

    ---------- begin diff ----------
@@ @@
      */
     public function getStatusKey($isAuthor = false)
     {
-        switch ($this->determineStatus()) {
-            case self::REVIEW_ROUND_STATUS_REVISIONS_REQUESTED:
-                return 'editor.submission.roundStatus.revisionsRequested';
-            case self::REVIEW_ROUND_STATUS_REVISIONS_SUBMITTED:
-                return 'editor.submission.roundStatus.revisionsSubmitted';
-            case self::REVIEW_ROUND_STATUS_RESUBMIT_FOR_REVIEW:
-                return 'editor.submission.roundStatus.resubmitForReview';
-            case self::REVIEW_ROUND_STATUS_RESUBMIT_FOR_REVIEW_SUBMITTED:
-                return 'editor.submission.roundStatus.submissionResubmitted';
-            case self::REVIEW_ROUND_STATUS_SENT_TO_EXTERNAL:
-                return 'editor.submission.roundStatus.sentToExternal';
-            case self::REVIEW_ROUND_STATUS_ACCEPTED:
-                return 'editor.submission.roundStatus.accepted';
-            case self::REVIEW_ROUND_STATUS_DECLINED:
-                return 'editor.submission.roundStatus.declined';
-            case self::REVIEW_ROUND_STATUS_PENDING_REVIEWERS:
-                return 'editor.submission.roundStatus.pendingReviewers';
-            case self::REVIEW_ROUND_STATUS_PENDING_REVIEWS:
-                return 'editor.submission.roundStatus.pendingReviews';
-            case self::REVIEW_ROUND_STATUS_REVIEWS_READY:
-                return $isAuthor ? 'author.submission.roundStatus.reviewsReady' : 'editor.submission.roundStatus.reviewsReady';
-            case self::REVIEW_ROUND_STATUS_REVIEWS_COMPLETED:
-                return 'editor.submission.roundStatus.reviewsCompleted';
-            case self::REVIEW_ROUND_STATUS_REVIEWS_OVERDUE:
-                return $isAuthor ? 'author.submission.roundStatus.reviewOverdue' : 'editor.submission.roundStatus.reviewOverdue';
-            case self::REVIEW_ROUND_STATUS_PENDING_RECOMMENDATIONS:
-                return 'editor.submission.roundStatus.pendingRecommendations';
-            case self::REVIEW_ROUND_STATUS_RECOMMENDATIONS_READY:
-                return 'editor.submission.roundStatus.recommendationsReady';
-            case self::REVIEW_ROUND_STATUS_RECOMMENDATIONS_COMPLETED:
-                return 'editor.submission.roundStatus.recommendationsCompleted';
-            default: return null;
-        }
+        return match ($this->determineStatus()) {
+            self::REVIEW_ROUND_STATUS_REVISIONS_REQUESTED => 'editor.submission.roundStatus.revisionsRequested',
+            self::REVIEW_ROUND_STATUS_REVISIONS_SUBMITTED => 'editor.submission.roundStatus.revisionsSubmitted',
+            self::REVIEW_ROUND_STATUS_RESUBMIT_FOR_REVIEW => 'editor.submission.roundStatus.resubmitForReview',
+            self::REVIEW_ROUND_STATUS_RESUBMIT_FOR_REVIEW_SUBMITTED => 'editor.submission.roundStatus.submissionResubmitted',
+            self::REVIEW_ROUND_STATUS_SENT_TO_EXTERNAL => 'editor.submission.roundStatus.sentToExternal',
+            self::REVIEW_ROUND_STATUS_ACCEPTED => 'editor.submission.roundStatus.accepted',
+            self::REVIEW_ROUND_STATUS_DECLINED => 'editor.submission.roundStatus.declined',
+            self::REVIEW_ROUND_STATUS_PENDING_REVIEWERS => 'editor.submission.roundStatus.pendingReviewers',
+            self::REVIEW_ROUND_STATUS_PENDING_REVIEWS => 'editor.submission.roundStatus.pendingReviews',
+            self::REVIEW_ROUND_STATUS_REVIEWS_READY => $isAuthor ? 'author.submission.roundStatus.reviewsReady' : 'editor.submission.roundStatus.reviewsReady',
+            self::REVIEW_ROUND_STATUS_REVIEWS_COMPLETED => 'editor.submission.roundStatus.reviewsCompleted',
+            self::REVIEW_ROUND_STATUS_REVIEWS_OVERDUE => $isAuthor ? 'author.submission.roundStatus.reviewOverdue' : 'editor.submission.roundStatus.reviewOverdue',
+            self::REVIEW_ROUND_STATUS_PENDING_RECOMMENDATIONS => 'editor.submission.roundStatus.pendingRecommendations',
+            self::REVIEW_ROUND_STATUS_RECOMMENDATIONS_READY => 'editor.submission.roundStatus.recommendationsReady',
+            self::REVIEW_ROUND_STATUS_RECOMMENDATIONS_COMPLETED => 'editor.submission.roundStatus.recommendationsCompleted',
+            default => null,
+        };
     }
 }
    ----------- end diff -----------

Applied rules:
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


182) classes/submission/reviewAssignment/ReviewAssignmentDAO.inc.php:178

    ---------- begin diff ----------
@@ @@
      */
     public function getBySubmissionId($submissionId, $reviewRoundId = null, $stageId = null)
     {
+        $queryParams = [];
         $query = $this->_getSelectQuery() .
             ' WHERE	r.submission_id = ?';

@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('review_assignments', 'review_id');
+        return $this->_getInsertId();
     }

     /**
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


183) classes/submission/reviewAssignment/ReviewAssignment.inc.php:731

    ---------- begin diff ----------
@@ @@
                 return 'submission.review.status.thanked';
         }

-        assert(false, 'No status key could be found for ' . get_class($this) . ' on ' . __LINE__);
+        assert(false, 'No status key could be found for ' . $this::class . ' on ' . __LINE__);

         return '';
     }
@@ @@
                 return 'editor.submissionReview.doubleAnonymous';
         }

-        assert(false, 'No review method key could be found for ' . get_class($this) . ' on ' . __LINE__);
+        assert(false, 'No review method key could be found for ' . $this::class . ' on ' . __LINE__);

         return '';
     }
    ----------- end diff -----------

Applied rules:
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)


184) classes/submission/maps/Schema.inc.php:122

    ---------- begin diff ----------
@@ @@
         $this->collection = $collection;
         $this->userGroups = $userGroups;
         $this->genres = $genres;
-        return $collection->map(function ($item) {
-            return $this->map($item, $this->userGroups, $this->genres);
-        });
+        return $collection->map(fn($item) => $this->map($item, $this->userGroups, $this->genres));
     }

     /**
@@ @@
         $this->collection = $collection;
         $this->userGroups = $userGroups;
         $this->genres = $genres;
-        return $collection->map(function ($item) {
-            return $this->summarize($item, $this->userGroups, $this->genres);
-        });
+        return $collection->map(fn($item) => $this->summarize($item, $this->userGroups, $this->genres));
     }

     /**
@@ @@
         $this->collection = $collection;
         $this->userGroups = $userGroups;
         $this->genres = $genres;
-        return $collection->map(function ($item) {
-            return $this->mapToSubmissionsList($item, $this->userGroups, $this->genres);
-        });
+        return $collection->map(fn($item) => $this->mapToSubmissionsList($item, $this->userGroups, $this->genres));
     }

     /**
@@ @@
      */
     public function summarizeWithoutPublication(Submission $item): array
     {
-        $props = array_filter($this->getSummaryProps(), function ($prop) {
-            return $prop !== 'publications';
-        });
+        $props = array_filter($this->getSummaryProps(), fn($prop) => $prop !== 'publications');
         return $this->mapByProperties($props, $item);
     }

@@ @@
         }

         foreach ($props as $prop) {
-            switch ($prop) {
-                case '_href':
-                    $output[$prop] = $this->getApiUrl(
-                        'submissions/' . $submission->getId(),
-                        $this->context->getData('urlPath')
-                    );
-                    break;
-                case 'publications':
-                    $output[$prop] = Repo::publication()->getSchemaMap($submission, $this->userGroups, $this->genres)
-                        ->summarizeMany($submission->getData('publications'), $anonymize);
-                    break;
-                case 'reviewAssignments':
-                    $output[$prop] = $this->getPropertyReviewAssignments($submission);
-                    break;
-                case 'reviewRounds':
-                    $output[$prop] = $this->getPropertyReviewRounds($submission);
-                    break;
-                case 'stages':
-                    $output[$prop] = $this->getPropertyStages($submission);
-                    break;
-                case 'statusLabel':
-                    $output[$prop] = __($submission->getStatusKey());
-                    break;
-                case 'urlAuthorWorkflow':
-                    $output[$prop] = $this->request->getDispatcher()->url(
-                        $this->request,
-                        Application::ROUTE_PAGE,
-                        $this->context->getData('urlPath'),
-                        'authorDashboard',
-                        'submission',
-                        $submission->getId()
-                    );
-                    break;
-                case 'urlEditorialWorkflow':
-                    $output[$prop] = $this->request->getDispatcher()->url(
-                        $this->request,
-                        Application::ROUTE_PAGE,
-                        $this->context->getData('urlPath'),
-                        'workflow',
-                        'access',
-                        $submission->getId()
-                    );
-                    break;
-                case 'urlWorkflow':
-                    $output[$prop] = Repo::submission()->getWorkflowUrlByUserRoles($submission);
-                    break;
-                default:
-                    $output[$prop] = $submission->getData($prop);
-                    break;
-            }
+            $output[$prop] = match ($prop) {
+                '_href' => $this->getApiUrl(
+                    'submissions/' . $submission->getId(),
+                    $this->context->getData('urlPath')
+                ),
+                'publications' => Repo::publication()->getSchemaMap($submission, $this->userGroups, $this->genres)
+                    ->summarizeMany($submission->getData('publications'), $anonymize),
+                'reviewAssignments' => $this->getPropertyReviewAssignments($submission),
+                'reviewRounds' => $this->getPropertyReviewRounds($submission),
+                'stages' => $this->getPropertyStages($submission),
+                'statusLabel' => __($submission->getStatusKey()),
+                'urlAuthorWorkflow' => $this->request->getDispatcher()->url(
+                    $this->request,
+                    Application::ROUTE_PAGE,
+                    $this->context->getData('urlPath'),
+                    'authorDashboard',
+                    'submission',
+                    $submission->getId()
+                ),
+                'urlEditorialWorkflow' => $this->request->getDispatcher()->url(
+                    $this->request,
+                    Application::ROUTE_PAGE,
+                    $this->context->getData('urlPath'),
+                    'workflow',
+                    'access',
+                    $submission->getId()
+                ),
+                'urlWorkflow' => Repo::submission()->getWorkflowUrlByUserRoles($submission),
+                default => $submission->getData($prop),
+            };
         }

         return $output;
@@ @@
     /**
      * Get details about a submission's stage(s)
      *
-     * @return array
      * [
      *  {
      *  `id` int stage id
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * UnionTypesRector
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


185) classes/submission/form/PKPSubmissionSubmitStep2Form.inc.php:103

    ---------- begin diff ----------
@@ @@
                     'emptyAddLabel' => __('common.upload.addFile'),
                     'fileStage' => SubmissionFile::SUBMISSION_FILE_SUBMISSION,
                     'form' => isset($submissionFileForm) ? $submissionFileForm->getConfig() : null,
-                    'genres' => array_map(function ($genre) {
-                        return [
-                            'id' => (int) $genre->getId(),
-                            'name' => $genre->getLocalizedName(),
-                            'isPrimary' => !$genre->getSupplementary() && !$genre->getDependent(),
-                        ];
-                    }, $genres),
+                    'genres' => array_map(fn($genre) => [
+                        'id' => (int) $genre->getId(),
+                        'name' => $genre->getLocalizedName(),
+                        'isPrimary' => !$genre->getSupplementary() && !$genre->getDependent(),
+                    ], $genres),
                     'id' => 'submissionFiles',
                     'items' => $submissionFiles->values(),
                     'options' => [
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


186) classes/submission/form/PKPSubmissionSubmitStep1Form.inc.php:416

    ---------- begin diff ----------
@@ @@
             // copy the names in default site primary locale for this locale as well
             $authorUserGroups = $userGroupDao->getByRoleId($this->context->getId(), Role::ROLE_ID_AUTHOR)->toArray();

-            $userInAuthorGroup = array_filter($authorUserGroups, function ($item) use ($userGroupId) {
-                return $item->getId() === $userGroupId;
-            });
+            $userInAuthorGroup = array_filter($authorUserGroups, fn($item) => $item->getId() === $userGroupId);

             if (!empty($userInAuthorGroup)) {
                 $userGivenNames = $user->getGivenName(null);
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


187) classes/submission/GenreDAO.inc.php:345

    ---------- begin diff ----------
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('genres', 'genre_id');
+        return $this->_getInsertId();
     }

     /**
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


188) classes/submission/Collector.inc.php:102

    ---------- begin diff ----------
@@ @@
     /**
      * Limit results to submissions that do/don't have any DOIs assign to their sub objects
      *
-     * @param bool|null $hasDois
      * @param array|null $enabledDoiTypes TYPE_* constants to consider when checking submission has DOIs
-     * @return AppCollector
      */
     public function filterByHasDois(?bool $hasDois, ?array $enabledDoiTypes = null): AppCollector
     {
         $this->hasDois = $hasDois;
-        $this->enabledDoiTypes = $enabledDoiTypes === null ? [Repo::doi()::TYPE_PUBLICATION] : $enabledDoiTypes;
+        $this->enabledDoiTypes = $enabledDoiTypes ?? [Repo::doi()::TYPE_PUBLICATION];
         return $this;
     }

@@ @@
      * @param int|array $assignedTo An array of user IDs
      *  or self::UNASSIGNED to get unassigned submissions
      */
-    public function assignedTo($assignedTo): AppCollector
+    public function assignedTo(int|array $assignedTo): AppCollector
     {
         $this->assignedTo = $assignedTo;
         return $this;
    ----------- end diff -----------

Applied rules:
 * TernaryToNullCoalescingRector
 * UnionTypesRector


189) classes/statistics/PKPStatisticsHelper.inc.php:111

    ---------- begin diff ----------
@@ @@
     * @return null|array The canonicalized metric type array. Null if an error
     *  occurred.
     */
-    public function canonicalizeMetricTypes($metricType, $context, $defaultSiteMetricType, $siteMetricTypes)
+    public function canonicalizeMetricTypes(string|array $metricType, $context, $defaultSiteMetricType, $siteMetricTypes)
     {
         // Metric type is null: Return the default metric for
         // the filtered context.
@@ @@
         $args = [
             'metricType' => $metricType,
             'columns' => $columns,
-            'filters' => json_encode($filter)
+            'filters' => json_encode($filter, JSON_THROW_ON_ERROR)
         ];

         if (!empty($orderBy)) {
-            $args['orderBy'] = json_encode($orderBy);
+            $args['orderBy'] = json_encode($orderBy, JSON_THROW_ON_ERROR);
         }

         return $dispatcher->url($request, PKPApplication::ROUTE_PAGE, null, 'stats', 'reports', 'generateReport', $args);
    ----------- end diff -----------

Applied rules:
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)
 * UnionTypesRector


190) classes/statistics/PKPMetricsDAO.inc.php:48

    ---------- begin diff ----------
@@ @@
      *  null if metrics are not supported, the specified report
      *  is invalid or cannot be produced or another error occurred.
      */
-    public function &getMetrics($metricType, $columns = [], $filters = [], $orderBy = [], $range = null, $nonAdditive = true)
+    public function &getMetrics(string|array $metricType, string|array $columns = [], $filters = [], $orderBy = [], $range = null, $nonAdditive = true)
     {
         // Return by reference.
         $nullVar = null;
@@ @@
                 if (is_scalar($values)) {
                     $currentClause .= "${column} = ?";
                     $params[] = $values;
-                } elseif (count($values)) {
-                    $placeholders = array_pad([], count($values), '?');
+                } elseif (is_countable($values) ? count($values) : 0) {
+                    $placeholders = array_pad([], is_countable($values) ? count($values) : 0, '?');
                     $placeholders = implode(', ', $placeholders);
                     $currentClause .= "${column} IN (${placeholders})";
                     foreach ($values as $value) {
    ----------- end diff -----------

Applied rules:
 * CountOnNullRector (https://3v4l.org/Bndc9)
 * UnionTypesRector


191) classes/stageAssignment/StageAssignmentDAO.inc.php:365

    ---------- begin diff ----------
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('stage_assignments', 'stage_assignment_id');
+        return $this->_getInsertId();
     }

     /**
@@ @@
      *
      * @return StageAssignment|ResultFactory Mixed, depending on $single
      */
-    public function _getByIds($submissionId = null, $stageId = null, $userGroupId = null, $userId = null, $roleId = null, $single = false)
+    public function _getByIds($submissionId = null, $stageId = null, $userGroupId = null, $userId = null, $roleId = null, $single = false): \PKP\stageAssignment\StageAssignment|\ResultFactory
     {
         $conditions = [];
         $params = [];
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)
 * UnionTypesRector


192) classes/site/VersionCheck.inc.php:181

    ---------- begin diff ----------
@@ @@
      *
      * @return string|false Version description or false if no newer version
      */
-    public static function checkIfNewVersionExists()
+    public static function checkIfNewVersionExists(): string|false
     {
         $versionInfo = self::getLatestVersion();
         $latestVersion = $versionInfo['release'];
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


193) classes/site/Version.inc.php:66

    ---------- begin diff ----------
@@ @@
      *
      * @return int
      */
-    public function compare($version)
+    public function compare(string|\PKP\site\Version $version)
     {
         if (is_object($version)) {
             return $this->compare($version->getVersionString());
    ----------- end diff -----------

Applied rules:
 * RegexDashEscapeRector (https://3v4l.org/dRG8U)
 * UnionTypesRector


194) classes/site/SiteDAO.inc.php:83

    ---------- begin diff ----------
@@ @@
                 // that calls to $site->getInstalledLocales() and
                 // $site->getSupportedLocales() return an appropriate array.
                 if (in_array($column, ['installed_locales', 'supported_locales']) &&
-                        !is_null($primaryRow[$column]) && strpos($primaryRow[$column], '{') === false && is_null(json_decode($primaryRow[$column]))) {
+                        !is_null($primaryRow[$column]) && !str_contains($primaryRow[$column], '{') && is_null(json_decode($primaryRow[$column], null, 512, JSON_THROW_ON_ERROR))) {
                     $site->setData($propName, explode(':', $primaryRow[$column]));
                 } else {
                     $site->setData(
@@ @@
         }

         if (count($deleteSettings)) {
-            $deleteSettingNames = join(',', array_map(function ($settingName) {
-                return "'${settingName}'";
-            }, $deleteSettings));
+            $deleteSettingNames = join(',', array_map(fn($settingName) => "'${settingName}'", $deleteSettings));
             $this->update("DELETE FROM site_settings WHERE setting_name in (${deleteSettingNames})");
         }
     }
    ----------- end diff -----------

Applied rules:
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * StrContainsRector (https://externals.io/message/108562 https://github.com/php/php-src/pull/5179)


195) classes/site/Site.inc.php:68

    ---------- begin diff ----------
@@ @@
     /**
      * Get "localized" site page title (if applicable).
      *
-     * @return array|string
      *
      * @deprecated 3.3.0
      */
-    public function getLocalizedPageHeaderTitle()
+    public function getLocalizedPageHeaderTitle(): array|string
     {
         if ($this->getLocalizedData('pageHeaderTitleImage')) {
             return $this->getLocalizedData('pageHeaderTitleImage');
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


196) classes/session/SessionManager.inc.php:119

    ---------- begin diff ----------
@@ @@
     }

     /**
-     * Return an instance of the session manager.
-     *
-     * @return SessionManager
-     */
-    public static function getManager(): SessionManager
+				 * Return an instance of the session manager.
+				 */
+				public static function getManager(): SessionManager
     {
         // Reference required
         $instance = & Registry::get('sessionManager', true, null);
@@ @@
     }

 	/**
-     * Invalidate given user's all sessions or except for the given session id
-     *
-     * @param int                   $userId     The target user id for whom to invalidate sessions
-     * @param mixed<string|null>    $sessionId  The specific session id which need to be excluded from invalidation process for targated user
-     * 
-     * @return bool
-     */
-    public function invalidateSessions(int $userId, string $excludableSessionId = null): bool 
+				 * Invalidate given user's all sessions or except for the given session id
+				 *
+				 * @param int                   $userId     The target user id for whom to invalidate sessions
+				 * @param mixed<string|null>    $sessionId  The specific session id which need to be excluded from invalidation process for targated user
+				 */
+				public function invalidateSessions(int $userId, string $excludableSessionId = null): bool 
     {
         $this->getSessionDao()->deleteUserSessions($userId, $excludableSessionId);

@@ @@
     {
         $domain = ini_get('session.cookie_domain');
         // Specific domains must contain at least one '.' (e.g. Chrome)
-        if (strpos($domain, '.') === false) {
+        if (!str_contains($domain, '.')) {
             $domain = false;
         }

         // Clear cookies with no domain #8921
         if ($domain) {
-            setcookie(session_name(), '', 0, ini_get('session.cookie_path'), false);
+            setcookie(session_name(), '', ['expires' => 0, 'path' => ini_get('session.cookie_path'), 'domain' => false]);
         }

         return setcookie(
             session_name(),
             ($sessionId === false) ? session_id() : $sessionId,
-            $expireTime,
-            ini_get('session.cookie_path'),
-            $domain,
-            false,
-            true
+												['expires' => $expireTime, 'path' => ini_get('session.cookie_path'), 'domain' => $domain, 'secure' => false, 'httponly' => true]
         );
     }
    ----------- end diff -----------

Applied rules:
 * SetCookieRector (https://www.php.net/setcookie https://wiki.php.net/rfc/same-site-cookie)
 * UnionTypesRector
 * StrContainsRector (https://externals.io/message/108562 https://github.com/php/php-src/pull/5179)


197) classes/session/SessionDAO.inc.php:104

    ---------- begin diff ----------
@@ @@
 					domain = ?
 				WHERE session_id = ?',
             [
-                $session->getUserId() == '' ? null : (int) $session->getUserId(),
+                $session->getUserId() == 0 ? null : (int) $session->getUserId(),
                 $session->getIpAddress(),
                 substr($session->getUserAgent(), 0, 255),
                 (int) $session->getSecondsCreated(),
    ----------- end diff -----------

Applied rules:
 * BinaryOpBetweenNumberAndStringRector (https://3v4l.org/XPEEl)


198) classes/session/Session.inc.php:261

    ---------- begin diff ----------
@@ @@
             } elseif (function_exists('random_bytes')) {
                 $data = random_bytes(128);
             } else {
-                $data = sha1(mt_rand());
+                $data = sha1(random_int(0, mt_getrandmax()));
             }

             // Hash the data
    ----------- end diff -----------

Applied rules:
 * RandomFunctionRector


199) classes/services/queryBuilders/PKPStatsQueryBuilder.inc.php:55

    ---------- begin diff ----------
@@ @@
     /**
      * Set the contexts to get records for
      *
-     * @param array|int $contextIds
      *
      * @return \PKP\services\queryBuilders\PKPStatsQueryBuilder
      */
-    public function filterByContexts($contextIds)
+    public function filterByContexts(array|int $contextIds)
     {
         $this->contextIds = is_array($contextIds) ? $contextIds : [$contextIds];
         return $this;
@@ @@
     /**
      * Set the submissions to get records for
      *
-     * @param array|int $submissionIds
      *
      * @return \PKP\services\queryBuilders\PKPStatsQueryBuilder
      */
-    public function filterBySubmissions($submissionIds)
+    public function filterBySubmissions(array|int $submissionIds)
     {
         $this->submissionIds = is_array($submissionIds) ? $submissionIds : [$submissionIds];
         return $this;
@@ @@
     /**
      * Set the assocTypes to get records for
      *
-     * @param array|int $assocTypes
      *
      * @return \PKP\services\queryBuilders\PKPStatsQueryBuilder
      */
-    public function filterByAssocTypes($assocTypes)
+    public function filterByAssocTypes(array|int $assocTypes)
     {
         $this->assocTypes = is_array($assocTypes) ? $assocTypes : [$assocTypes];
         return $this;
@@ @@
     /**
      * Set the assoc type object ids to get records for
      *
-     * @param array|int $assocIds
      *
      * @return \PKP\services\queryBuilders\PKPStatsQueryBuilder
      */
-    public function filterByAssocIds($assocIds)
+    public function filterByAssocIds(array|int $assocIds)
     {
         $this->assocIds = is_array($assocIds) ? $assocIds : [$assocIds];
         return $this;
@@ @@
      *
      * @return \PKP\services\queryBuilders\PKPStatsQueryBuilder
      */
-    public function filterByFileTypes($fileTypes)
+    public function filterByFileTypes(array|int $fileTypes)
     {
         $this->fileTypes = is_array($fileTypes) ? $fileTypes : [$fileTypes];
         return $this;
@@ @@
      * Set the to get records for. This is stored under the section_id
      * db column but in OMP refers to seriesIds.
      *
-     * @param array|int $sectionIds
      *
      * @return \PKP\services\queryBuilders\PKPStatsQueryBuilder
      */
-    public function filterBySections($sectionIds)
+    public function filterBySections(array|int $sectionIds)
     {
         $this->sectionIds = is_array($sectionIds) ? $sectionIds : [$sectionIds];
         return $this;
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


200) classes/services/queryBuilders/PKPStatsEditorialQueryBuilder.inc.php:41

    ---------- begin diff ----------
@@ @@
     /**
      * Set the contexts to return activity for
      *
-     * @param array|int $contextIds
      *
      * @return \PKP\services\queryBuilders\PKPStatsEditorialQueryBuilder
      */
-    public function filterByContexts($contextIds)
+    public function filterByContexts(array|int $contextIds)
     {
         $this->contextIds = is_array($contextIds) ? $contextIds : [$contextIds];
         return $this;
@@ @@
      * Set the section ids to include activity for. This is stored under
      * the section_id db column but in OMP refers to seriesIds.
      *
-     * @param array|int $sectionIds
      *
      * @return \PKP\services\queryBuilders\PKPStatsEditorialQueryBuilder
      */
-    public function filterBySections($sectionIds)
+    public function filterBySections(array|int $sectionIds)
     {
         $this->sectionIds = is_array($sectionIds) ? $sectionIds : [$sectionIds];
         return $this;
@@ @@
         // and then later declined. We check the current status to
         // exclude submissions where the status doesn't match the
         // decisions we are looking for.
-        $declineDecisions = array_map(function(DecisionType $decisionType) {
-            return $decisionType->getDecision();
-        }, Repo::decision()->getDeclineDecisionTypes());
+        $declineDecisions = array_map(fn(DecisionType $decisionType) => $decisionType->getDecision(), Repo::decision()->getDeclineDecisionTypes());
         if (count(array_intersect($declineDecisions, $decisions))) {
             $q->where('s.status', '=', PKPSubmission::STATUS_DECLINED);
         } else {
@@ @@
      *
      * @return int
      */
-    public function countByStatus($status)
+    public function countByStatus(int|array $status)
     {
         return $this->_getObject()
             ->whereIn('s.status', (array) $status)
@@ @@
         // and then later declined. We check the current status to
         // exclude submissions where the status doesn't match the
         // decisions we are looking for.
-        $declineDecisions = array_map(function(DecisionType $decisionType) {
-            return $decisionType->getDecision();
-        }, Repo::decision()->getDeclineDecisionTypes());
+        $declineDecisions = array_map(fn(DecisionType $decisionType) => $decisionType->getDecision(), Repo::decision()->getDeclineDecisionTypes());
         if (count(array_intersect($declineDecisions, $decisions))) {
             $q->where('s.status', '=', PKPSubmission::STATUS_DECLINED);
         } else {
@@ @@
     {
         switch (\Config::getVar('database', 'driver')) {
             case 'mysql':
-            case 'mysqli':
+            case \mysqli::class:
                 return 'DATEDIFF(' . $leftDate . ',' . $rightDate . ')';
         }
         return "DATE_PART('day', " . $leftDate . ' - ' . $rightDate . ')';
    ----------- end diff -----------

Applied rules:
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * UnionTypesRector


201) classes/services/queryBuilders/PKPContextQueryBuilder.inc.php:164

    ---------- begin diff ----------
@@ @@
         $q->when($this->searchPhrase !== null, function ($query) {
             $words = explode(' ', $this->searchPhrase);
             foreach ($words as $word) {
-                $query->whereIn('c.' . $this->dbIdColumn, function ($query) use ($word) {
-                    return $query->select($this->dbIdColumn)
-                        ->from($this->dbSettings)
-                        ->whereIn('setting_name', ['description', 'acronym', 'abbreviation'])
-                        ->where(DB::raw('LOWER(setting_value)'), 'LIKE', DB::raw("CONCAT('%', LOWER(?), '%')"))->addBinding($word);
-                });
+                $query->whereIn('c.' . $this->dbIdColumn, fn($query) => $query->select($this->dbIdColumn)
+                    ->from($this->dbSettings)
+                    ->whereIn('setting_name', ['description', 'acronym', 'abbreviation'])
+                    ->where(DB::raw('LOWER(setting_value)'), 'LIKE', DB::raw("CONCAT('%', LOWER(?), '%')"))->addBinding($word));
             }
         });
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


202) classes/services/PKPStatsService.inc.php:288

    ---------- begin diff ----------
@@ @@
      */
     public function getEmptyTimelineIntervals($startDate, $endDate, $timelineInterval)
     {
+        $dateFormat = null;
+        $labelFormat = null;
+        $interval = null;
         if ($timelineInterval === PKPStatisticsHelper::STATISTICS_DIMENSION_MONTH) {
             $dateFormat = 'Y-m';
             $labelFormat = 'F Y';
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)


203) classes/services/PKPStatsEditorialService.inc.php:322

    ---------- begin diff ----------
@@ @@
      *
      * @return int
      */
-    public function countByDecisions($decisions, $args = [])
+    public function countByDecisions(int|array $decisions, $args = [])
     {
         return $this->getQueryBuilder($args)->countByDecisions((array) $decisions);
     }
@@ @@
      *
      * @return int
      */
-    public function countByDecisionsForSubmittedDate($decisions, $args = [])
+    public function countByDecisionsForSubmittedDate(int|array $decisions, $args = [])
     {
         return $this->getQueryBuilder($args)->countByDecisions((array) $decisions, true);
     }
@@ @@
      *
      * @return int
      */
-    public function countByStatus($statuses, $args = [])
+    public function countByStatus(int|array $statuses, $args = [])
     {
         return $this->getQueryBuilder($args)->countByStatus((array) $statuses);
     }
@@ @@
      *
      * @return int
      */
-    public function countActiveByStages($stages, $args = [])
+    public function countActiveByStages(int|array $stages, $args = [])
     {
         return $this->getQueryBuilder($args)->countActiveByStages((array) $stages);
     }
@@ @@
      *
      * @return array
      */
-    public function getDaysToDecisions($decisions, $args = [])
+    public function getDaysToDecisions(int|array $decisions, $args = [])
     {
         return $this->getQueryBuilder($args)->getDaysToDecisions((array) $decisions);
     }
@@ @@
      *
      * @return int
      */
-    public function getAverageDaysToDecisions($decisions, $args = [])
+    public function getAverageDaysToDecisions(int|array $decisions, $args = [])
     {
         return ceil($this->getQueryBuilder($args)->getAverageDaysToDecisions((array) $decisions));
     }
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


204) classes/services/PKPSiteService.inc.php:220

    ---------- begin diff ----------
@@ @@
      *
      * @return string|boolean The new filename or false on failure
      */
-    public function moveTemporaryFile($context, $temporaryFile, $fileNameBase, $userId, $localeKey = '')
+    public function moveTemporaryFile($context, $temporaryFile, $fileNameBase, $userId, $localeKey = ''): string|bool
     {
         $publicFileManager = new \PublicFileManager();
         $temporaryFileManager = new \TemporaryFileManager();
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


205) classes/services/PKPSchemaService.inc.php:41

    ---------- begin diff ----------
@@ @@
     public const SCHEMA_USER_GROUP = 'userGroup';

     /** @var array cache of schemas that have been loaded */
-    private $_schemas = [];
+    private array $_schemas = [];

     /**
      * Get a schema
@@ @@
                 if (is_array($value) && array_key_exists($localeKey, $value)) {
                     continue;
                 }
-                switch ($schema->properties->{$key}->type) {
-                    case 'string':
-                        $values[$key][$localeKey] = '';
-                        break;
-                    case 'array':
-                        $values[$key][$localeKey] = [];
-                        break;
-                    default:
-                        $values[$key][$localeKey] = null;
-                }
+                $values[$key][$localeKey] = match ($schema->properties->{$key}->type) {
+                    'string' => '',
+                    'array' => [],
+                    default => null,
+                };
             }
         }
    ----------- end diff -----------

Applied rules:
 * TypedPropertyRector (https://wiki.php.net/rfc/typed_properties_v2#proposal)
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


206) classes/services/PKPNavigationMenuService.inc.php:424

    ---------- begin diff ----------
@@ @@

         $navigationMenuDao = DAORegistry::getDAO('NavigationMenuDAO');
         $cache = $navigationMenuDao->getCache($navigationMenu->getId());
-        $json = json_encode($navigationMenu);
+        $json = json_encode($navigationMenu, JSON_THROW_ON_ERROR);
         $cache->setEntireCache($json);
     }

@@ @@
         $navigationMenuDao = DAORegistry::getDAO('NavigationMenuDAO');
         $cache = $navigationMenuDao->getCache($navigationMenu->getId());
         if ($cache->cache) {
-            $navigationMenu = json_decode($cache->cache, true);
+            $navigationMenu = json_decode($cache->cache, true, 512, JSON_THROW_ON_ERROR);
             $navigationMenu = $this->arrayToObject('NavigationMenu', $navigationMenu);
             $this->loadMenuTreeDisplayState($navigationMenu);
             return;
@@ @@
      */
     public function arrayToObject($class, $array)
     {
+        $obj = null;
         if ($class == 'NavigationMenu') {
             $obj = new NavigationMenu();
         } elseif ($class == 'NavigationMenuItem') {
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)


207) classes/services/PKPFileService.inc.php:200

    ---------- begin diff ----------
@@ @@
      */
     public function getDocumentType($mimetype)
     {
-        switch ($mimetype) {
-            case 'application/pdf':
-            case 'application/x-pdf':
-            case 'text/pdf':
-            case 'text/x-pdf':
-                return FileManager::DOCUMENT_TYPE_PDF;
-            case 'application/msword':
-            case 'application/word':
-            case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
-                return FileManager::DOCUMENT_TYPE_WORD;
-            case 'application/excel':
-            case 'application/vnd.ms-excel':
-            case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
-                return FileManager::DOCUMENT_TYPE_EXCEL;
-            case 'text/html':
-                return FileManager::DOCUMENT_TYPE_HTML;
-            case 'application/zip':
-            case 'application/x-zip':
-            case 'application/x-zip-compressed':
-            case 'application/x-compress':
-            case 'application/x-compressed':
-            case 'multipart/x-zip':
-                return FileManager::DOCUMENT_TYPE_ZIP;
-            case 'application/epub':
-            case 'application/epub+zip':
-                return FileManager::DOCUMENT_TYPE_EPUB;
-            case 'image/gif':
-            case 'image/jpeg':
-            case 'image/pjpeg':
-            case 'image/png':
-            case 'image/x-png':
-            case 'image/vnd.microsoft.icon':
-            case 'image/x-icon':
-            case 'image/x-ico':
-            case 'image/ico':
-            case 'image/svg+xml':
-            case 'image/svg':
-                return FileManager::DOCUMENT_TYPE_IMAGE;
-            case 'application/x-shockwave-flash':
-            case 'video/x-flv':
-            case 'application/x-flash-video':
-            case 'flv-application/octet-stream':
-            case 'video/mpeg':
-            case 'video/quicktime':
-            case 'video/mp4':
-                return FileManager::DOCUMENT_TYPE_VIDEO;
-            case 'audio/mpeg':
-            case 'audio/x-aiff':
-            case 'audio/x-wav':
-                return FileManager::DOCUMENT_TYPE_AUDIO;
-            default:
-                return FileManager::DOCUMENT_TYPE_DEFAULT;
-        }
+        return match ($mimetype) {
+            'application/pdf', 'application/x-pdf', 'text/pdf', 'text/x-pdf' => FileManager::DOCUMENT_TYPE_PDF,
+            'application/msword', 'application/word', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' => FileManager::DOCUMENT_TYPE_WORD,
+            'application/excel', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' => FileManager::DOCUMENT_TYPE_EXCEL,
+            'text/html' => FileManager::DOCUMENT_TYPE_HTML,
+            'application/zip', 'application/x-zip', 'application/x-zip-compressed', 'application/x-compress', 'application/x-compressed', 'multipart/x-zip' => FileManager::DOCUMENT_TYPE_ZIP,
+            'application/epub', 'application/epub+zip' => FileManager::DOCUMENT_TYPE_EPUB,
+            'image/gif', 'image/jpeg', 'image/pjpeg', 'image/png', 'image/x-png', 'image/vnd.microsoft.icon', 'image/x-icon', 'image/x-ico', 'image/ico', 'image/svg+xml', 'image/svg' => FileManager::DOCUMENT_TYPE_IMAGE,
+            'application/x-shockwave-flash', 'video/x-flv', 'application/x-flash-video', 'flv-application/octet-stream', 'video/mpeg', 'video/quicktime', 'video/mp4' => FileManager::DOCUMENT_TYPE_VIDEO,
+            'audio/mpeg', 'audio/x-aiff', 'audio/x-wav' => FileManager::DOCUMENT_TYPE_AUDIO,
+            default => FileManager::DOCUMENT_TYPE_DEFAULT,
+        };
     }

     /**
    ----------- end diff -----------

Applied rules:
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


208) classes/services/PKPContextService.inc.php:674

    ---------- begin diff ----------
@@ @@
      *
      * @return string|boolean The new filename or false on failure
      */
-    public function moveTemporaryFile($context, $temporaryFile, $fileNameBase, $userId, $localeKey = '')
+    public function moveTemporaryFile($context, $temporaryFile, $fileNameBase, $userId, $localeKey = ''): string|bool
     {
         $publicFileManager = new PublicFileManager();
         $temporaryFileManager = new TemporaryFileManager();
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


209) classes/security/authorization/internal/SubmissionFileStageAccessPolicy.inc.php:84

    ---------- begin diff ----------
@@ @@
         // is not yet complete
         if ($this->_fileStage === SubmissionFile::SUBMISSION_FILE_SUBMISSION && $this->_action === SubmissionFileAccessPolicy::SUBMISSION_FILE_ACCESS_MODIFY) {
             if (!empty($stageAssignments[WORKFLOW_STAGE_ID_SUBMISSION])
-                    && count($stageAssignments[WORKFLOW_STAGE_ID_SUBMISSION]) === 1
+                    && (is_countable($stageAssignments[WORKFLOW_STAGE_ID_SUBMISSION]) ? count($stageAssignments[WORKFLOW_STAGE_ID_SUBMISSION]) : 0) === 1
                     && in_array(Role::ROLE_ID_AUTHOR, $stageAssignments[WORKFLOW_STAGE_ID_SUBMISSION])
                     && $submission->getData('submissionProgress') > 0) {
                 $assignedFileStages[] = SubmissionFile::SUBMISSION_FILE_SUBMISSION;
@@ @@
                 ? WORKFLOW_STAGE_ID_INTERNAL_REVIEW
                 : WORKFLOW_STAGE_ID_EXTERNAL_REVIEW;

-            if (count($stageAssignments[$reviewStage]) === 1 && in_array(Role::ROLE_ID_AUTHOR, $stageAssignments[$reviewStage])) {
+            if ((is_countable($stageAssignments[$reviewStage]) ? count($stageAssignments[$reviewStage]) : 0) === 1 && in_array(Role::ROLE_ID_AUTHOR, $stageAssignments[$reviewStage])) {
                 $reviewRoundDao = DAORegistry::getDAO('ReviewRoundDAO'); /** @var ReviewRoundDAO $reviewRoundDao */
                 $reviewRound = $reviewRoundDao->getLastReviewRoundBySubmissionId($submission->getId(), $reviewStage);
                 if ($reviewRound) {
    ----------- end diff -----------

Applied rules:
 * CountOnNullRector (https://3v4l.org/Bndc9)


210) classes/reviewForm/ReviewFormElementDAO.inc.php:315

    ---------- begin diff ----------
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('review_form_elements', 'review_form_element_id');
+        return $this->_getInsertId();
     }
 }
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


211) classes/reviewForm/ReviewFormDAO.inc.php:316

    ---------- begin diff ----------
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('review_forms', 'review_form_id');
+        return $this->_getInsertId();
     }
 }
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


212) classes/query/QueryDAO.inc.php:321

    ---------- begin diff ----------
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('queries', 'query_id');
+        return $this->_getInsertId();
     }

     /**
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


213) classes/publication/maps/Schema.inc.php:81

    ---------- begin diff ----------
@@ @@
     public function mapMany(Enumerable $collection, bool $anonymize = false): Enumerable
     {
         $this->collection = $collection;
-        return $collection->map(function ($item) use ($anonymize) {
-            return $this->map($item, $anonymize);
-        });
+        return $collection->map(fn($item) => $this->map($item, $anonymize));
     }

     /**
@@ @@
     public function summarizeMany(Enumerable $collection, bool $anonymize = false): Enumerable
     {
         $this->collection = $collection;
-        return $collection->map(function ($item) use ($anonymize) {
-            return $this->summarize($item, $anonymize);
-        });
+        return $collection->map(fn($item) => $this->summarize($item, $anonymize));
     }

     /**
@@ @@
                 case 'citations':
                     $citationDao = DAORegistry::getDAO('CitationDAO'); /** @var CitationDAO $citationDao */
                     $output[$prop] = array_map(
-                        function ($citation) {
-                            return $citation->getCitationWithLinks();
-                        },
+                        fn($citation) => $citation->getCitationWithLinks(),
                         $citationDao->getByPublicationId($publication->getId())->toArray()
                     );
                     break;
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


214) classes/publication/Repository.inc.php:185

    ---------- begin diff ----------
@@ @@
         // any submission other than this publication's submission
         if (!empty($props['urlPath'])) {
             $validator->after(function ($validator) use ($publication, $props) {
+                $submission = null;
                 if (!$validator->errors()->get('urlPath')) {
                     if (ctype_digit((string) $props['urlPath'])) {
                         $validator->errors()->add('urlPath', __('publication.urlPath.numberInvalid'));
@@ @@
                 $value[$localeKey] = $this->_saveFileParam($publication, $submission, $publication->getData('coverImage', $localeKey), 'coverImage', $userId, $localeKey, true);
             }

-            $this->edit($publication, ['coverImage' => $value], $this->request);
+            $this->edit($publication, ['coverImage' => $value]);
         }

         HookRegistry::call('Publication::add', [&$publication]);
@@ @@

         // Log an event when publication is published. Adjust the message depending
         // on whether this is the first publication or a subsequent version
-        if (count($submission->getData('publications')) > 1) {
+        if ((is_countable($submission->getData('publications')) ? count($submission->getData('publications')) : 0) > 1) {
             $msg = ($newPublication->getData('status') === Submission::STATUS_SCHEDULED) ? 'publication.event.versionScheduled' : 'publication.event.versionPublished';
         }

@@ @@
         // on whether this is the first publication or a subsequent version
         $msg = 'publication.event.unpublished';

-        if (count($submission->getData('publications')) > 1) {
+        if ((is_countable($submission->getData('publications')) ? count($submission->getData('publications')) : 0) > 1) {
             $msg = 'publication.event.versionUnpublished';
         }

@@ @@
         int $userId,
         string $localeKey = '',
         bool $isImage = false
-    ) {
+    ): string|array|bool {

         // If the value is null, delete any existing unused file in the system
         if (is_null($value)) {
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)
 * CountOnNullRector (https://3v4l.org/Bndc9)
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)
 * UnionTypesRector


215) classes/publication/PKPPublication.inc.php:157

    ---------- begin diff ----------
@@ @@
         }

         if ($includeInBrowseOnly) {
-            $authors = $authors->filter(function ($author, $key) {
-                return $author->getData('includeInBrowse');
-            });
+            $authors = $authors->filter(fn($author, $key) => $author->getData('includeInBrowse'));
         }

         $str = '';
    ----------- end diff -----------

Applied rules:
 * RegexDashEscapeRector (https://3v4l.org/dRG8U)
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


216) classes/publication/DAO.inc.php:491

    ---------- begin diff ----------
@@ @@
     protected function setCategories(Publication $publication)
     {
         $publication->setData('categoryIds', array_map(
-            function ($category) {
-                return (int) $category->getId();
-            },
+            fn($category) => (int) $category->getId(),
             iterator_to_array(Repo::category()->getMany(
                 Repo::category()->getCollector()
                     ->filterByPublicationIds([$publication->getId()])
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


217) classes/publication/Collector.inc.php:22

    ---------- begin diff ----------
@@ @@
     public DAO $dao;
     public ?array $contextIds;
     public ?array $submissionIds;
-    public ?int $count;
-    public ?int $offset;
+    public ?int $count = null;
+    public ?int $offset = null;

     public function __construct(DAO $dao)
     {
    ----------- end diff -----------

Applied rules:
 * RestoreDefaultNullToNullableTypePropertyRector


218) classes/plugins/importexport/PKPImportExportFilter.inc.php:24

    ---------- begin diff ----------
@@ @@

 class PKPImportExportFilter extends PersistableFilter
 {
-    /** @var PKPNativeImportExportDeployment */
-    private $_deployment;
+    private ?\PKPNativeImportExportDeployment $_deployment = null;

     //
     // Deployment management
@@ @@
         $filterDao = DAORegistry::getDAO('FilterDAO'); /** @var FilterDAO $filterDao */
         $filters = $filterDao->getObjectsByGroup($filter);

-        if (count($filters) != 1) {
+        if ((is_countable($filters) ? count($filters) : 0) != 1) {
             throw new Exception(
                 __(
                     'plugins.importexport.native.common.error.filter.configuration.count',
                     [
                         'filterName' => $filter,
-                        'filterCount' => count($filters)
+                        'filterCount' => is_countable($filters) ? count($filters) : 0
                     ]
                 )
             );
    ----------- end diff -----------

Applied rules:
 * CountOnNullRector (https://3v4l.org/Bndc9)
 * TypedPropertyRector (https://wiki.php.net/rfc/typed_properties_v2#proposal)


219) classes/plugins/importexport/PKPImportExportDeployment.inc.php:27

    ---------- begin diff ----------
@@ @@
 class PKPImportExportDeployment
 {
     /** @var array Array of possible validation errors */
-    private $xmlValidationErrors = [];
+    private array $xmlValidationErrors = [];

     /** @var bool Indicator that the import/export process has failed */
-    private $processFailed = false;
+    private bool $processFailed = false;

     /** @var mixed The import/export process result */
     public $processResult = null;
@@ @@
     private $_publication;

     /** @var array The processed import objects IDs */
-    private $_processedObjectsIds = [];
+    private array $_processedObjectsIds = [];

     /** @var array Warnings keyed by object IDs */
-    private $_processedObjectsErrors = [];
+    private array $_processedObjectsErrors = [];

     /** @var array Errors keyed by object IDs */
-    private $_processedObjectsWarnings = [];
+    private array $_processedObjectsWarnings = [];

     /** @var array Connection between the file from the XML import file and the new IDs after they are imported */
-    private $_fileDBIds;
+    private ?array $_fileDBIds = null;

     /** @var array Connection between the submission file IDs from the XML import file and the new IDs after they are imported */
-    private $_submissionFileDBIds;
+    private ?array $_submissionFileDBIds = null;

     /** @var array Connection between the author id from the XML import file and the DB file IDs */
-    private $_authorDBIds;
+    private ?array $_authorDBIds = null;

     /** @var string Base path for the import source */
-    private $_baseImportPath = '';
+    private string $_baseImportPath = '';

     /** @var array A list of imported root elements to display to the user after the import is complete */
-    private $_importedRootEntities;
+    private array $_importedRootEntities = [];

     /** @var array A list of exported root elements to display to the user after the export is complete */
-    private $_exportRootEntities;
+    private ?array $_exportRootEntities = null;

     /**
      * Constructor
@@ @@
         $this->setPublication(null);
         $this->setFileDBIds([]);
         $this->setSubmissionFileDBIds([]);
-        $this->_processedObjectsIds = [];
-        $this->_importedRootEntities = [];
     }

     //
@@ @@

             $result = $currentFilter->execute($importXml);

-            $this->xmlValidationErrors = array_filter(libxml_get_errors(), function ($a) {
-                return $a->level == LIBXML_ERR_ERROR || $a->level == LIBXML_ERR_FATAL;
-            });
+            $this->xmlValidationErrors = array_filter(libxml_get_errors(), fn($a) => $a->level == LIBXML_ERR_ERROR || $a->level == LIBXML_ERR_FATAL);

             libxml_clear_errors();

@@ @@
             libxml_use_internal_errors(true);
             $result = $currentFilter->execute($exportObjects, true);

-            $this->xmlValidationErrors = array_filter(libxml_get_errors(), function ($a) {
-                return $a->level == LIBXML_ERR_ERROR || $a->level == LIBXML_ERR_FATAL;
-            });
+            $this->xmlValidationErrors = array_filter(libxml_get_errors(), fn($a) => $a->level == LIBXML_ERR_ERROR || $a->level == LIBXML_ERR_FATAL);

             libxml_clear_errors();
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * TypedPropertyRector (https://wiki.php.net/rfc/typed_properties_v2#proposal)


220) classes/plugins/ThemePlugin.inc.php:437

    ---------- begin diff ----------
@@ @@
         $class = 'PKP\components\forms\\' . $type;
         try {
             $this->options[$name] = new $class($name, $args);
-        } catch (Exception $e) {
+        } catch (Exception) {
             $class = 'APP\components\forms\\' . $type;
             try {
                 $this->options[$name] = new $class($name, $args);
-            } catch (Exception $e) {
+            } catch (Exception) {
                 throw new Exception(sprintf(
                     'The %s class was not found for the theme option, %s,  defined by %s or one of its parent themes.',
                     $type,
@@ @@
     public function getOption($name)
     {

+        $option = null;
         // Check if this is a valid option
         if (!isset($this->options[$name])) {
             return $this->parent ? $this->parent->getOption($name) : false;
@@ @@
      * @return false|array The config array for this option. Or false if no
      *  config is found.
      */
-    public function getOptionConfig($name)
+    public function getOptionConfig($name): false|array
     {
         if (isset($this->options[$name])) {
             return $this->options[$name];
@@ @@
      *
      * @param string|array $menuAreas One or more menu area names
      */
-    public function addMenuArea($menuAreas)
+    public function addMenuArea(string|array $menuAreas)
     {
         if (!is_array($menuAreas)) {
             $menuAreas = [$menuAreas];
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)
 * RemoveUnusedVariableInCatchRector (https://wiki.php.net/rfc/non-capturing_catches)
 * UnionTypesRector


221) classes/plugins/ReportPlugin.inc.php:40

    ---------- begin diff ----------
@@ @@
      *  null if metrics are not supported by this plug-in, the specified report
      *  is invalid or cannot be produced or another error occurred.
      */
-    public function getMetrics($metricType = null, $columns = [], $filters = [], $orderBy = [], $range = null)
+    public function getMetrics($metricType = null, string|array $columns = [], $filters = [], $orderBy = [], $range = null)
     {
         return null;
     }
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


222) classes/plugins/PluginSettingsDAO.inc.php:216

    ---------- begin diff ----------
@@ @@
      */
     public function _performReplacement($rawInput, $paramArray = [])
     {
-        $value = preg_replace_callback('{{translate key="([^"]+)"}}', function ($matches) {
-            return __($matches[1]);
-        }, $rawInput);
+        $value = preg_replace_callback('{{translate key="([^"]+)"}}', fn($matches) => __($matches[1]), $rawInput);
         foreach ($paramArray as $pKey => $pValue) {
             $value = str_replace('{$' . $pKey . '}', $pValue, $value);
         }
    ----------- end diff -----------

Applied rules:
 * RegexDashEscapeRector (https://3v4l.org/dRG8U)
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


223) classes/plugins/PluginRegistry.inc.php:183

    ---------- begin diff ----------
@@ @@
         HookRegistry::call('PluginRegistry::categoryLoaded::' . $category, [&$plugins]);

         // Sort the plugins by priority before returning.
-        uasort($plugins, function ($a, $b) {
-            return $a->getSeq() - $b->getSeq();
-        });
+        uasort($plugins, fn($a, $b) => $a->getSeq() - $b->getSeq());

         return $plugins;
     }
    ----------- end diff -----------

Applied rules:
 * RegexDashEscapeRector (https://3v4l.org/dRG8U)
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


224) classes/plugins/PluginHelper.inc.php:58

    ---------- begin diff ----------
@@ @@
         }

         // Create random dirname to avoid symlink attacks.
-        $pluginExtractDir = dirname($filePath) . "/$pluginShortName" . substr(md5(mt_rand()), 0, 10);
+        $pluginExtractDir = dirname($filePath) . "/$pluginShortName" . substr(md5(random_int(0, mt_getrandmax())), 0, 10);
         if (!mkdir($pluginExtractDir)) {
             throw new Exception('Could not create directory ' . $pluginExtractDir);
         }
    ----------- end diff -----------

Applied rules:
 * RandomFunctionRector


225) classes/plugins/PluginGalleryDAO.inc.php:77

    ---------- begin diff ----------
@@ @@

     /**
      * Get the external Plugin XML document
-     *
-     * @return ?string
      */
     protected function getExternalDocument(): ?string
     {
@@ @@

     /**
      * Get the cached Plugin XML document
-     *
-     * @return ?string
      */
     protected function getCachedDocument(): ?string
     {
    ----------- end diff -----------

Applied rules:
 * FunctionArgumentDefaultValueReplacerRector (https://php.watch/versions/8.1/version_compare-operator-restrictions)
 * UnionTypesRector


226) classes/plugins/Plugin.inc.php:295

    ---------- begin diff ----------
@@ @@
      *
      * @return string|array one or more file locations.
      */
-    public function getInstallFilterConfigFiles()
+    public function getInstallFilterConfigFiles(): string|array
     {
         // Construct the well-known filter configuration file names.
         $filterConfigFile = $this->getPluginPath() . '/filter/' . PLUGIN_FILTER_DATAFILE;
@@ @@
         $checkFilePath = $filePath;

         // If there's a templates/ prefix on the template, clean up the test path.
-        if (strpos($filePath, 'plugins/') === 0) {
+        if (str_starts_with($filePath, 'plugins/')) {
             $checkFilePath = 'templates/' . $checkFilePath;
         }

         // If there's a lib/pkp/ prefix on the template, test without it.
         $libPkpPrefix = 'lib/pkp/';
-        if (strpos($checkFilePath, $libPkpPrefix) === 0) {
+        if (str_starts_with($checkFilePath, $libPkpPrefix)) {
             $checkFilePath = substr($filePath, strlen($libPkpPrefix));
         }

@@ @@
             try {
                 $migration->up();
             } catch (Exception $e) {
-                $installer->setError(Installer::INSTALLER_ERROR_DB, __('installer.installMigrationError', ['class' => get_class($migration), 'message' => $e->getMessage()]));
+                $installer->setError(Installer::INSTALLER_ERROR_DB, __('installer.installMigrationError', ['class' => $migration::class, 'message' => $e->getMessage()]));
                 $result = false;
             }
         }
    ----------- end diff -----------

Applied rules:
 * RegexDashEscapeRector (https://3v4l.org/dRG8U)
 * ClassOnObjectRector (https://wiki.php.net/rfc/class_name_literal_on_object)
 * UnionTypesRector
 * StrStartsWithRector (https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions)


227) classes/user/InterestDAO.inc.php:93

    ---------- begin diff ----------
@@ @@

         // Sort by name.
         $interests = $iterator->toArray();
-        usort($interests, function ($s1, $s2) {
-            return strcmp($s1->getInterest(), $s2->getInterest());
-        });
+        usort($interests, fn($s1, $s2) => strcmp($s1->getInterest(), $s2->getInterest()));

         // Turn back into an iterator.
         return new ArrayItemIterator($interests);
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


228) classes/user/DAO.inc.php:143

    ---------- begin diff ----------
@@ @@
     {
         $row = DB::table('users')
             ->where('username', '=', $username)
-            ->when(!$allowDisabled, function ($query) {
-                return $query->where('disabled', '=', false);
-            })
+            ->when(!$allowDisabled, fn($query) => $query->where('disabled', '=', false))
             ->get('user_id')
             ->first();
         return $row ? $this->get($row->user_id, $allowDisabled) : null;
@@ @@
     {
         $row = DB::table('users')
             ->where('email', '=', $email)
-            ->when(!$allowDisabled, function ($query) {
-                return $query->where('disabled', '=', false);
-            })
+            ->when(!$allowDisabled, fn($query) => $query->where('disabled', '=', false))
             ->get('user_id')
             ->first();
         return $row ? $this->get($row->user_id) : null;
@@ @@
         $row = DB::table('users')
             ->where('username', '=', $username)
             ->where('password', '=', $password)
-            ->when(!$allowDisabled, function ($query) {
-                return $query->where('disabled', '=', false);
-            })
+            ->when(!$allowDisabled, fn($query) => $query->where('disabled', '=', false))
             ->get('user_id')
             ->first();
         return $row ? $this->get($row->user_id) : null;
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


229) classes/tombstone/DataObjectTombstoneDAO.inc.php:179

    ---------- begin diff ----------
@@ @@
      */
     public function updateObject($dataObjectTombstone)
     {
+        $publicationFormatTombstone = null;
         $returner = $this->update(
             sprintf(
                 'UPDATE	data_object_tombstones SET
@@ @@
      */
     public function getInsertId()
     {
-        return $this->_getInsertId('data_object_tombstones', 'tombstone_id');
+        return $this->_getInsertId();
     }

     /**
    ----------- end diff -----------

Applied rules:
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


230) classes/template/PKPTemplateResource.inc.php:60

    ---------- begin diff ----------
@@ @@
      * Get the timestamp for the specified template.
      *
      * @param string $name Template name
-     *
-     * @return int|boolean
      */
-    protected function fetchTimestamp($name)
+    protected function fetchTimestamp($name): int|bool
     {
         return filemtime($this->_getFilename($name));
     }
    ----------- end diff -----------

Applied rules:
 * UnionTypesRector


231) classes/template/PKPTemplateManager.inc.php:80

    ---------- begin diff ----------
@@ @@
     public const PAGE_WIDTH_FULL = 'full';

     /** @var array of URLs to stylesheets */
-    private $_styleSheets = [];
+    private array $_styleSheets = [];

     /** @var array of URLs to javascript files */
-    private $_javaScripts = [];
+    private array $_javaScripts = [];

     /** @var array of HTML head content to output */
-    private $_htmlHeaders = [];
+    private array $_htmlHeaders = [];

     /** @var array Key/value list of constants to expose in the JS interface */
-    private $_constants = [];
+    private array $_constants = [];

     /** @var array Key/value list of locale keys to expose in the JS interface */
-    private $_localeKeys = [];
+    private array $_localeKeys = [];

     /** @var array Initial state data to be managed by the page's Vue.js component */
     protected $_state = [];

     /** @var string Type of cacheability (Cache-Control). */
-    private $_cacheability;
+    private string $_cacheability = self::CACHEABILITY_NO_STORE;

     /** @var object The form builder vocabulary class. */
     private $_fbv;

-    /** @var PKPRequest */
-    private $_request;
+    private ?\PKPRequest $_request = null;

     /**
      * Constructor.
@@ @@

         $this->compile_dir = "${cachePath}/t_compile";
         $this->config_dir = "${cachePath}/t_config";
-        $this->cache_dir = "${cachePath}/t_cache";
+        $this->cache_dir = "${cachePath}/t_cache"; // Safe default

-        $this->_cacheability = self::CACHEABILITY_NO_STORE; // Safe default
-
         // Register the template resources.
         $this->registerResource('core', new PKPTemplateResource($coreTemplateDir = 'lib/pkp/templates'));
         $this->registerResource('app', new PKPTemplateResource(['templates', $coreTemplateDir]));
@@ @@

         if (Application::isInstalled()) {
             $activeTheme = null;
-            $contextOrSite = $currentContext ? $currentContext : $request->getSite();
+            $contextOrSite = $currentContext ?: $request->getSite();
             $allThemes = PluginRegistry::getPlugins('themes');
             foreach ($allThemes as $theme) {
                 if ($contextOrSite->getData('themePluginPath') === $theme->getDirName()) {
@@ @@
             $app_data['rtlLocales'] = array_values($rtlLocales);
         }

-        $output .= '$.pkp.app = ' . json_encode($app_data) . ';';
+        $output .= '$.pkp.app = ' . json_encode($app_data, JSON_THROW_ON_ERROR) . ';';

         // Load exposed constants
-        $output .= '$.pkp.cons = ' . json_encode($this->_constants) . ';';
+        $output .= '$.pkp.cons = ' . json_encode($this->_constants, JSON_THROW_ON_ERROR) . ';';

         // Allow plugins to load data within their own namespace
         $output .= '$.pkp.plugins = {};';
@@ @@

                 // Load system notifications in SiteHandler.js
                 $notificationDao = DAORegistry::getDAO('NotificationDAO'); /** @var NotificationDAO $notificationDao */
-                $notificationsCount = count($notificationDao->getByUserId($request->getUser()->getId(), Notification::NOTIFICATION_LEVEL_TRIVIAL)->toArray());
+                $notificationsCount = is_countable($notificationDao->getByUserId($request->getUser()->getId(), Notification::NOTIFICATION_LEVEL_TRIVIAL)->toArray()) ? count($notificationDao->getByUserId($request->getUser()->getId(), Notification::NOTIFICATION_LEVEL_TRIVIAL)->toArray()) : 0;

                 // Load context switcher
                 $isAdmin = in_array(Role::ROLE_ID_SITE_ADMIN, $this->getTemplateVars('userRoles'));
@@ @@
                 }
                 $availableContexts = Services::get('context')->getManySummary($args);
                 if ($request->getContext()) {
-                    $availableContexts = array_filter($availableContexts, function ($context) use ($request) {
-                        return $context->id !== $request->getContext()->getId();
-                    });
+                    $availableContexts = array_filter($availableContexts, fn($context) => $context->id !== $request->getContext()->getId());
                 }
                 // Admins should switch to the same page on another context where possible
                 $requestedOp = $request->getRequestedOp() === 'index' ? null : $request->getRequestedOp();
@@ @@
         // Output global constants and locale keys used in new component library
         $output = '';
         if (!empty($this->_constants)) {
-            $output .= 'pkp.const = ' . json_encode($this->_constants) . ';';
+            $output .= 'pkp.const = ' . json_encode($this->_constants, JSON_THROW_ON_ERROR) . ';';
         }
         if (!empty($this->_localeKeys)) {
-            $output .= 'pkp.localeKeys = ' . json_encode($this->_localeKeys) . ';';
+            $output .= 'pkp.localeKeys = ' . json_encode($this->_localeKeys, JSON_THROW_ON_ERROR) . ';';
         }

         // Load current user data
@@ @@
                     'id' => (int) $user->getId(),
                     'roles' => array_values(array_unique($userRoles)),
                 ];
-                $output .= 'pkp.currentUser = ' . json_encode($currentUser) . ';';
+                $output .= 'pkp.currentUser = ' . json_encode($currentUser, JSON_THROW_ON_ERROR) . ';';
             }
         }

@@ @@
      */
     public function smartyUrl($parameters, $smarty)
     {
+        $params = null;
+        $router = null;
+        $context = [];
+        $handler = null;
+        $op = null;
+        $path = null;
+        $anchor = null;
         if (!isset($parameters['context'])) {
             // Extract the variables named in $paramList, and remove them
             // from the parameters array. Variables remaining in params will be
@@ @@
         $paramList = ['params', 'router', 'context', 'page', 'component', 'op', 'path', 'anchor', 'escape'];
         foreach ($paramList as $parameter) {
             if (isset($parameters[$parameter])) {
-                $$parameter = $parameters[$parameter];
+                ${$parameter} = $parameters[$parameter];
                 unset($parameters[$parameter]);
             } else {
-                $$parameter = null;
+                ${$parameter} = null;
             }
         }

@@ @@
     public function smartyCSRF($params, $smarty)
     {
         $csrfToken = $this->_request->getSession()->getCSRFToken();
-        switch ($params['type'] ?? null) {
-            case 'raw': return $csrfToken;
-            case 'json': return json_encode($csrfToken);
-            case 'html':
-            default:
-                return '<input type="hidden" name="csrfToken" value="' . htmlspecialchars($csrfToken) . '">';
-        }
+        return match ($params['type'] ?? null) {
+            'raw' => $csrfToken,
+            'json' => json_encode($csrfToken, JSON_THROW_ON_ERROR),
+            default => '<input type="hidden" name="csrfToken" value="' . htmlspecialchars($csrfToken) . '">',
+        };
     }

     /**
@@ @@
                 if (!empty($style['inline'])) {
                     $output .= '<style type="text/css">' . $style['style'] . '</style>';
                 } else {
-                    if ($appVersion && strpos($style['style'], '?') === false) {
+                    if ($appVersion && !str_contains($style['style'], '?')) {
                         $style['style'] .= '?v=' . $appVersion;
                     }
                     $output .= '<link rel="stylesheet" href="' . $style['style'] . '" type="text/css" />';
@@ @@
                 if ($data['inline']) {
                     $output .= '<script type="text/javascript">' . $data['script'] . '</script>';
                 } else {
-                    if ($appVersion && strpos($data['script'], '?') === false) {
+                    if ($appVersion && !str_contains($data['script'], '?')) {
                         $data['script'] .= '?v=' . $appVersion;
                     }
                     $output .= '<script src="' . $data['script'] . '" type="text/javascript"></script>';
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector
 * TernaryToElvisRector (http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary https://stackoverflow.com/a/1993455/1348344)
 * AddDefaultValueForUndefinedVariableRector (https://github.com/vimeo/psalm/blob/29b70442b11e3e66113935a2ee22e165a70c74a4/docs/fixing_code.md#possiblyundefinedvariable)
 * WrapVariableVariableNameInCurlyBracesRector (https://www.php.net/manual/en/language.variables.variable.php)
 * CountOnNullRector (https://3v4l.org/Bndc9)
 * JsonThrowOnErrorRector (http://wiki.php.net/rfc/json_throw_on_error)
 * RegexDashEscapeRector (https://3v4l.org/dRG8U)
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * TypedPropertyRector (https://wiki.php.net/rfc/typed_properties_v2#proposal)
 * StrContainsRector (https://externals.io/message/108562 https://github.com/php/php-src/pull/5179)
 * ChangeSwitchToMatchRector (https://wiki.php.net/rfc/match_expression_v2)


232) classes/task/StatisticsReport.inc.php:26

    ---------- begin diff ----------
@@ @@
 class StatisticsReport extends ScheduledTask
 {
     /** @var array List of roles that might be notified */
-    private $_roleIds = [Role::ROLE_ID_MANAGER, Role::ROLE_ID_SUB_EDITOR];
+    private array $_roleIds = [Role::ROLE_ID_MANAGER, Role::ROLE_ID_SUB_EDITOR];

     /** @var int Quantity of emails to accept for each batch */
-    private $_sleepEvery = 100;
+    private int $_sleepEvery = 100;

     /** @var int Defines how many seconds the script will wait between each batch */
-    private $_sleepBy = 2;
+    private int $_sleepBy = 2;


     /**
    ----------- end diff -----------

Applied rules:
 * TypedPropertyRector (https://wiki.php.net/rfc/typed_properties_v2#proposal)


233) classes/task/FileLoader.inc.php:40

    ---------- begin diff ----------
@@ @@
     private $_basePath;

     /** @var string Stage directory path. */
-    private $_stagePath;
+    private ?string $_stagePath = null;

     /** @var string Processing directory path. */
-    private $_processingPath;
+    private ?string $_processingPath = null;

     /** @var string Archive directory path. */
-    private $_archivePath;
+    private ?string $_archivePath = null;

     /** @var string Reject directory path. */
-    private $_rejectPath;
+    private ?string $_rejectPath = null;

     /** @var string Reject directory path. */
-    private $_adminEmail;
+    private string $_adminEmail;

     /** @var string Reject directory path. */
-    private $_adminName;
+    private string $_adminName;

     /** @var array List of staged back files after processing. */
-    private $_stagedBackFiles = [];
+    private array $_stagedBackFiles = [];

     /** @var bool Whether to compress the archived files or not. */
-    private $_compressArchives = false;
+    private bool $_compressArchives = false;

     /**
      * Constructor.
@@ @@
         // The files dir has appropriate write permissions and is assumed
         // to be protected against information leak and symlink attacks.
         $filesDir = realpath(Config::getVar('files', 'files_dir'));
-        if (is_null($this->_basePath) || strpos($this->_basePath, $filesDir) !== 0) {
+        if (is_null($this->_basePath) || !str_starts_with($this->_basePath, $filesDir)) {
             $this->addExecutionLogEntry(
                 __('admin.fileLoader.wrongBasePathLocation', ['path' => $this->_basePath]),
                 ScheduledTaskHelper::SCHEDULED_TASK_MESSAGE_TYPE_ERROR
    ----------- end diff -----------

Applied rules:
 * TypedPropertyRector (https://wiki.php.net/rfc/typed_properties_v2#proposal)
 * StrStartsWithRector (https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions)


234) classes/submissionFile/maps/Schema.inc.php:75

    ---------- begin diff ----------
@@ @@
     public function mapMany(Enumerable $collection, array $genres): Enumerable
     {
         $this->collection = $collection;
-        return $collection->map(function ($item) use ($genres) {
-            return $this->map($item, $genres);
-        });
+        return $collection->map(fn($item) => $this->map($item, $genres));
     }

     /**
@@ @@
     public function summarizeMany(Enumerable $collection, array $genres): Enumerable
     {
         $this->collection = $collection;
-        return $collection->map(function ($item) use ($genres) {
-            return $this->summarize($item, $genres);
-        });
+        return $collection->map(fn($item) => $this->summarize($item, $genres));
     }

     /**
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)


235) classes/submissionFile/Repository.inc.php:240

    ---------- begin diff ----------
@@ @@
         if ($validator->fails()) {
             $errors = $this->schemaService
                 ->formatValidationErrors(
-                    $validator->errors(),
-                    $this->schemaService->get($this->dao->schema),
-                    $allowedLocales
+                    $validator->errors()
                 );
         }
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)


236) classes/submissionFile/DAO.inc.php:219

    ---------- begin diff ----------
@@ @@

         $submissionFileId = DB::table('submission_files as sf')
             ->where('sf.submission_id', '=', $submissionId)
-            ->whereIn('sf.submission_file_id', function ($q) use ($pubIdType, $pubId) {
-                return $q->select('sfs.submission_file_id')
-                    ->from($this->settingsTable . ' as sfs')
-                    ->where('sfs.setting_name', '=', 'pub-id::' . $pubIdType)
-                    ->where('sfs.setting_value', '=', $pubId);
-            })
+            ->whereIn('sf.submission_file_id', fn($q) => $q->select('sfs.submission_file_id')
+                ->from($this->settingsTable . ' as sfs')
+                ->where('sfs.setting_name', '=', 'pub-id::' . $pubIdType)
+                ->where('sfs.setting_value', '=', $pubId))
             ->select('sf.*')
             ->value('sf.submission_file_id');

@@ @@
      * @param string|int $bestId Publisher id or submissionFileId
      */
     public function getByBestId(
-        $bestId,
+        string|int $bestId,
         int $submissionId
     ): ?SubmissionFile {
         $submissionFile = null;
@@ @@
      * Assign file to a review round.
      *
      * @param int $submissionFileId The file to be assigned.
-     * @param ReviewRound $reviewRound
      */
     public function assignRevisionToReviewRound(
         int $submissionFileId,
    ----------- end diff -----------

Applied rules:
 * ClosureToArrowFunctionRector (https://wiki.php.net/rfc/arrow_functions_v2)
 * UnionTypesRector


 [OK] 236 files would have changed (dry-run) by Rector                                                                  

